{"version":3,"names":["hexChar","shorthandHex","longhandHex","shorthandHexWithAlpha","longhandHexWithAlpha","alphaToOpacity","alpha","Number","toFixed","opacityToAlpha","opacity","isValidHex","hex","hasAlpha","isShorthandHex","isLonghandHex","evaluateHex","length","pattern","test","hexLength","hexPattern","normalizeHex","convertFromHexToHexa","toLowerCase","startsWith","rgbToHex","hexToRGB","isShorthand","hexify","color","hexa","r","g","b","rChars","numToHex","gChars","bChars","alphaChars","a","num","toString","padStart","normalizeAlpha","colorObject","normalized","normalizeColor","alphaColorObject","replace","first","second","third","fourth","split","parseInt","slice","isNaN","enumify","x","CSSColorMode","HEX","HEXA","RGB_CSS","RGBA_CSS","HSL_CSS","HSLA_CSS","ObjectColorMode","RGB","RGBA","HSL","HSLA","HSV","HSVA","parseMode","colorValue","hasChannels","channels","every","channel","colorEqual","value1","value2","rgb","array","alphaCompatible","mode","toAlphaMode","alphaMode","toNonAlphaMode","nonAlphaMode"],"sources":["./node_modules/@esri/calcite-components/dist/collection/components/color-picker/utils.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.4.2\n */\nexport const hexChar = /^[0-9A-F]$/i;\nconst shorthandHex = /^#[0-9A-F]{3}$/i;\nconst longhandHex = /^#[0-9A-F]{6}$/i;\nconst shorthandHexWithAlpha = /^#[0-9A-F]{4}$/i;\nconst longhandHexWithAlpha = /^#[0-9A-F]{8}$/i;\nexport const alphaToOpacity = (alpha) => Number((alpha * 100).toFixed());\nexport const opacityToAlpha = (opacity) => Number((opacity / 100).toFixed(2));\nexport function isValidHex(hex, hasAlpha = false) {\n  return isShorthandHex(hex, hasAlpha) || isLonghandHex(hex, hasAlpha);\n}\nexport function canConvertToHexa(hex) {\n  const validHex = isValidHex(hex, false);\n  const validHexa = isValidHex(hex, true);\n  return !validHexa && validHex;\n}\nfunction evaluateHex(hex, length, pattern) {\n  if (!hex) {\n    return false;\n  }\n  return hex.length === length && pattern.test(hex);\n}\nexport function isShorthandHex(hex, hasAlpha = false) {\n  const hexLength = hasAlpha ? 5 : 4;\n  const hexPattern = hasAlpha ? shorthandHexWithAlpha : shorthandHex;\n  return evaluateHex(hex, hexLength, hexPattern);\n}\nexport function isLonghandHex(hex, hasAlpha = false) {\n  const hexLength = hasAlpha ? 9 : 7;\n  const hexPattern = hasAlpha ? longhandHexWithAlpha : longhandHex;\n  return evaluateHex(hex, hexLength, hexPattern);\n}\nexport function normalizeHex(hex, hasAlpha = false, convertFromHexToHexa = false) {\n  hex = hex.toLowerCase();\n  if (!hex.startsWith(\"#\")) {\n    hex = `#${hex}`;\n  }\n  if (isShorthandHex(hex, hasAlpha)) {\n    return rgbToHex(hexToRGB(hex, hasAlpha));\n  }\n  if (hasAlpha && convertFromHexToHexa && isValidHex(hex, false /* we only care about RGB hex for conversion */)) {\n    const isShorthand = isShorthandHex(hex, false);\n    return rgbToHex(hexToRGB(`${hex}${isShorthand ? \"f\" : \"ff\"}`, true));\n  }\n  return hex;\n}\nexport function hexify(color, hasAlpha = false) {\n  return hasAlpha ? color.hexa() : color.hex();\n}\nexport function rgbToHex(color) {\n  const { r, g, b } = color;\n  const rChars = numToHex(r);\n  const gChars = numToHex(g);\n  const bChars = numToHex(b);\n  const alphaChars = \"a\" in color ? numToHex(color.a * 255) : \"\";\n  return `#${rChars}${gChars}${bChars}${alphaChars}`.toLowerCase();\n}\nfunction numToHex(num) {\n  return num.toString(16).padStart(2, \"0\");\n}\nexport function normalizeAlpha(colorObject) {\n  const normalized = { ...colorObject, a: colorObject.alpha ?? 1 /* Color() will omit alpha if 1 */ };\n  delete normalized.alpha;\n  return normalized;\n}\nexport function normalizeColor(alphaColorObject) {\n  const normalized = { ...alphaColorObject, alpha: alphaColorObject.a ?? 1 };\n  delete normalized.a;\n  return normalized;\n}\nexport function hexToRGB(hex, hasAlpha = false) {\n  if (!isValidHex(hex, hasAlpha)) {\n    return null;\n  }\n  hex = hex.replace(\"#\", \"\");\n  let r, g, b, a;\n  const isShorthand = hex.length === 3 || hex.length === 4;\n  if (isShorthand) {\n    const [first, second, third, fourth] = hex.split(\"\");\n    r = parseInt(`${first}${first}`, 16);\n    g = parseInt(`${second}${second}`, 16);\n    b = parseInt(`${third}${third}`, 16);\n    a = parseInt(`${fourth}${fourth}`, 16) / 255;\n  }\n  else {\n    r = parseInt(hex.slice(0, 2), 16);\n    g = parseInt(hex.slice(2, 4), 16);\n    b = parseInt(hex.slice(4, 6), 16);\n    a = parseInt(hex.slice(6, 8), 16) / 255;\n  }\n  return isNaN(a) ? { r, g, b } : { r, g, b, a };\n}\n// these utils allow users to pass enum values as strings without having to access the enum\n// based on the approach suggested by https://github.com/microsoft/TypeScript/issues/17690#issuecomment-321365759,\nconst enumify = (x) => x;\nexport const CSSColorMode = enumify({\n  HEX: \"hex\",\n  HEXA: \"hexa\",\n  RGB_CSS: \"rgb-css\",\n  RGBA_CSS: \"rgba-css\",\n  HSL_CSS: \"hsl-css\",\n  HSLA_CSS: \"hsla-css\"\n});\nexport const ObjectColorMode = enumify({\n  RGB: \"rgb\",\n  RGBA: \"rgba\",\n  HSL: \"hsl\",\n  HSLA: \"hsla\",\n  HSV: \"hsv\",\n  HSVA: \"hsva\"\n});\nexport function parseMode(colorValue) {\n  if (typeof colorValue === \"string\") {\n    if (colorValue.startsWith(\"#\")) {\n      const { length } = colorValue;\n      if (length === 4 || length === 7) {\n        return CSSColorMode.HEX;\n      }\n      if (length === 5 || length === 9) {\n        return CSSColorMode.HEXA;\n      }\n    }\n    if (colorValue.startsWith(\"rgba(\")) {\n      return CSSColorMode.RGBA_CSS;\n    }\n    if (colorValue.startsWith(\"rgb(\")) {\n      return CSSColorMode.RGB_CSS;\n    }\n    if (colorValue.startsWith(\"hsl(\")) {\n      return CSSColorMode.HSL_CSS;\n    }\n    if (colorValue.startsWith(\"hsla(\")) {\n      return CSSColorMode.HSLA_CSS;\n    }\n  }\n  if (typeof colorValue === \"object\") {\n    if (hasChannels(colorValue, \"r\", \"g\", \"b\")) {\n      return hasChannels(colorValue, \"a\") ? ObjectColorMode.RGBA : ObjectColorMode.RGB;\n    }\n    if (hasChannels(colorValue, \"h\", \"s\", \"l\")) {\n      return hasChannels(colorValue, \"a\") ? ObjectColorMode.HSLA : ObjectColorMode.HSL;\n    }\n    if (hasChannels(colorValue, \"h\", \"s\", \"v\")) {\n      return hasChannels(colorValue, \"a\") ? ObjectColorMode.HSVA : ObjectColorMode.HSV;\n    }\n  }\n  return null;\n}\nfunction hasChannels(colorObject, ...channels) {\n  return channels.every((channel) => channel && colorObject && `${channel}` in colorObject);\n}\nexport function colorEqual(value1, value2) {\n  return value1?.rgb().array().toString() === value2?.rgb().array().toString();\n}\nexport function alphaCompatible(mode) {\n  return (mode === CSSColorMode.HEXA ||\n    mode === CSSColorMode.RGBA_CSS ||\n    mode === CSSColorMode.HSLA_CSS ||\n    mode === ObjectColorMode.RGBA ||\n    mode === ObjectColorMode.HSLA ||\n    mode === ObjectColorMode.HSVA);\n}\nexport function toAlphaMode(mode) {\n  const alphaMode = mode === CSSColorMode.HEX\n    ? CSSColorMode.HEXA\n    : mode === CSSColorMode.RGB_CSS\n      ? CSSColorMode.RGBA_CSS\n      : mode === CSSColorMode.HSL_CSS\n        ? CSSColorMode.HSLA_CSS\n        : mode === ObjectColorMode.RGB\n          ? ObjectColorMode.RGBA\n          : mode === ObjectColorMode.HSL\n            ? ObjectColorMode.HSLA\n            : mode === ObjectColorMode.HSV\n              ? ObjectColorMode.HSVA\n              : mode;\n  return alphaMode;\n}\nexport function toNonAlphaMode(mode) {\n  const nonAlphaMode = mode === CSSColorMode.HEXA\n    ? CSSColorMode.HEX\n    : mode === CSSColorMode.RGBA_CSS\n      ? CSSColorMode.RGB_CSS\n      : mode === CSSColorMode.HSLA_CSS\n        ? CSSColorMode.HSL_CSS\n        : mode === ObjectColorMode.RGBA\n          ? ObjectColorMode.RGB\n          : mode === ObjectColorMode.HSLA\n            ? ObjectColorMode.HSL\n            : mode === ObjectColorMode.HSVA\n              ? ObjectColorMode.HSV\n              : mode;\n  return nonAlphaMode;\n}\n"],"mappings":"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"}