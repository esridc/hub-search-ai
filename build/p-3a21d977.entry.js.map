{"version":3,"names":["getProp","obj","path","split","reduce","prev","curr","match","indexOrFnName","propName","replace","parseInt","idx","Array","isArray","undefined","applyOperation","$use","arr","operation","parts","length","result","fnName","args","map","p","trim","prop","val","isNumeric","parseFloat","find","n","isNaN","cloneObject","clone","i","hasOwnProperty","value","Date","getTime","Blob","type","createId","prefix","Math","random","toString","substr","unique","index","ary","indexOf","deepSet","target","worker","lastIdx","forEach","Object","assign","getWithDefault","def","res","setProp","join","OperationError","Error","constructor","message","rootCause","super","this","name","setPrototypeOf","prototype","stack","createOperationPipeline","fns","input","chain","func","then","catch","err","Promise","reject","msg","opErr","operationStack","serialize","resolve","mapBy","e","extendStatics","d","b","__proto__","__extends","__","create","__assign","t","s","arguments","call","apply","__rest","getOwnPropertySymbols","propertyIsEnumerable","requiresFormData","params","keys","some","key","toParam","processParams","newParams","_a","_b","param","firstElementType","JSON","stringify","valueOf","encodeParam","arrayElem","encodeURIComponent","encodeQueryString","encodeFormData","forceFormData","useFormData","formData_1","FormData","filename","append","Number","isInteger","knownLength","ArcGISRequestError","code","response","url","options","originalMessage","warn","console","NODEJS_DEFAULT_REFERER_HEADER","DEFAULT_ARCGIS_REQUEST_OPTIONS","httpMethod","f","ArcGISAuthError","_super","_this","retry","getSession","retryLimit","tries","retryRequest","session","newOptions","authentication","request","checkForErrors","originalAuthError","error","messageCode","errorCode","status","parse","statusMessage","requestOptions","headers","missingGlobals","recommendedPackages","fetch","bind","Function","push","rawResponse","fetchOptions","method","credentials","getToken","token","getDomainCredentials","requestHeaders","hideToken","window","queryParams","urlWithQueryString","maxUrlLength","RegExp","test","body","referer","ok","status_1","statusText","json","text","blob","data","truncatedUrl","toLowerCase","federatedServers","expires","now","appendCustomParams","customOptions","baseOptions","requestOptionsKeys","cleanUrl","slice","decodeParam","decodeURIComponent","decodeQueryString","query","acc","entry","fetchToken","r","access_token","username","expires_in","ssl","refresh_token","refreshToken","generateToken","location","host","arcgisOnlineUrlRegex","isOnline","normalizeOnlinePortalUrl","portalUrl","getOnlineEnvironment","subdomain","pop","includes","isFederated","owningSystemUrl","normalizedPortalUrl","normalizedOwningSystemUrl","canUseOnlineToken","requestUrl","portalIsOnline","requestIsOnline","portalEnv","requestEnv","validateAppAccess","clientId","portal","ro","client_id","defer","deferred","promise","UserSession","_refreshToken","_refreshTokenExpires","refreshTokenExpires","password","_token","_tokenExpires","tokenExpires","provider","tokenDuration","redirectUri","refreshTokenTTL","server","trustedDomains","root","getServerRootUrl","_pendingTokenRequests","defineProperty","get","enumerable","configurable","log","beginOAuth2","win","duration","expiration","popup","popupWindowFeatures","state","locale","href","errorString","oauthInfoString","errorMessage","oauthInfo","open","completeOAuth2","completeSignIn","handlerFn","handlerFnName","opener","parent","close","hash","error_description","fromParent","parentOrigin","handler","event","source","parentMessageHandler","addEventListener","postMessage","removeEventListener","authorize","writeHead","Location","end","exchangeAuthorizationCode","authorizationCode","grant_type","redirect_uri","deserialize","str","fromCredential","credential","userId","toCredential","getUser","_pendingUserRequest","_user","getPortal","_pendingPortalRequest","_portalInfo","getUsername","user","getFreshToken","getTokenForServer","toJSON","enablePostMessageAuth","validChildOrigins","_hostHandler","createPostMessageHandler","disablePostMessageAuth","refreshSession","refreshWithUsernameAndPassword","refreshWithRefreshToken","protocol","domainAndPath","domain","domainWithProtocol","startsWith","validOrigins","isValidOrigin","origin","isValidType","isTokenValid","existingToken","fetchAuthorizedDomains","authInfo","tokenServicesUrl","serverUrl","client","refreshRefreshToken","portalInfo","authorizedCrossOriginDomains","filter","getPortalUrl","CONTROL_CHAR_MATCHER","scrubControlChars","getItem","id","getItemBaseUrl","portalUrlOrRequestOptions","getItemData","file","emptyResponseErr","getItemGroups","getItemInfo","fileName","_c","readAs","getItemFile","getItemMetadata","readMethod","justReturnResponse","searchGroupUsers","searchOptions","SearchQueryBuilder","q","termStack","rangeStack","openGroups","terms","_i","concat","in","field","fn","hasRange","hasTerms","commit","startGroup","endGroup","and","addModifier","or","not","from","term","to","boost","num","cleanup","modifier","currentModifer","toUpperCase","needsQuotes","formatTerm","oldQ","genericSearch","search","searchType","groupId","nextStart","nextPage","start","searchItems","searchGroups","searchGroupContent","searchUsers","idOrSelf","urlOrObject","portalSelf","portalHostname","urlKey","customBaseUrl","isPortal","getPortalApiUrl","getItemHomeUrl","itemId","portalUrlOrObject","getItemApiUrl","item","access","URLSearchParams","getPortalBaseFromOrgUrl","orgUrl","getGroupHomeUrl","getUserHomeUrl","app","dataset","document","feedback","initiative","solution","template","other","site","getCollection","lowerCaseType","toLocaleLowerCase","collections","collectionTypes","getCollectionTypes","collection","lowerCaseCollection","serviceRegex","parseServiceUrl","stripQueryString","stripped","getAllLayersAndTables","layersUrl","getService","getItemThumbnailUrl","optionsOrToken","thumbnail","width","itemApiUrl","baseUrl","searchParams","delete","newSearch","HubError","keywordSlugToUriSlug","slug","isServicesDirectoryDisabled","async","idOrItem","disabled","getItemIdentifier","properties","collectionToFamily","overrides","getFamily","family","getFamilyTypes","types","OperationStack","operations","startOperation","op","startedAt","inputs","getOperation","o","getOperations","finish","output","merge","getCompleted","getWorking","allOps","sort","a","getOperationMessage","fetchOrg","orgId","orgPortalUrl","basePortalUrl","parseMetadataXml","metadataXml","import","opts","ignoreAttributes","attributeNamePrefix","textNodeName","fetchContentMetadata","_","enrichGroupIds","opId","admin","member","groupIds","group","handleEnrichmentError","enrichMetadata","metadata","enrichOwnerUser","owner","ownerUser","enrichOrg","getItemOrgId","orgPromise","org","enrichData","itemData","enrichServer","all","servicesDirectoryDisabled","enrichLayers","merged","layers","tables","layer","errors","getEnrichmentErrors","enrichmentOperations","fetchItemEnrichments","enrichments","ops","enrichment","pipeline","RemoteServerError","parseInclude","include","reverse","spec","enrichProjectSearchResult","title","typeKeywords","tags","categories","summary","snippet","description","createdDate","created","createdDateSource","updatedDate","modified","updatedDateSource","links","self","siteRelative","DEFAULTS","specs","enriched","identifier","getHubRelativeUrl","enrichSiteSearchResult","contentUrl","getSolutionUrl","getInitiativeTemplateUrl","familiesWithPluralizedRoute","isPageType","hubUrl","DatePrecision","enrichContentSearchResult","enrichGroupContentCount","results","contentCount","total","enrichGroupMembershipSummary","membershipSummary","users","groupEnrichementOperations","fetchGroupEnrichments","SEARCH_APIS","arcgis","label","arcgisQA","arcgisDEV","hub","hubDEV","hubQA","expandApi","api","valueToMatchOptions","any","relativeDateToDateRange","relative","offsetMs","min","hours","days","weeks","unit","setMonth","getMonth","setFullYear","getFullYear","getNextFunction","clonedRequest","getGroupThumbnailUrl","thumbnailUrl","getUserThumbnailUrl","getTopLevelPredicate","filters","matchingFilters","predicates","matchingFilter","matchingPredicates","topLevelPredicate","expandPredicate","predicate","dateProps","copyProps","nonMatchOptionsFields","entries","dateFieldValue","serializeQueryForPortal","filterSearchOptions","serializeFilter","nonEmptyOptions","removeEmptyEntries","mergeSearchOptions","bboxPredicate","bbox","predicateSearchOptions","serializePredicate","boolProps","passThroughProps","specialProps","portalAllowList","so","serializeMatchOptions","serializeDateRange","serializeStringOrArray","range","shouldUseOgcApi","targetEntity","getOgcApiDefinition","umbrellaDomain","URL","hubApiUrl","hostname","getApi","enrichPageSearchResult","convertPortalAggregations","searchResults","aggregations","counts","mode","fieldName","values","fieldValues","dotifyString","i18nScope","getAllCollectionsMap","entityType","appAndMap","scope","getWellknownCollection","collectionName","portalSearchItems","processSearchParams","searchPortalAsHubSearchResult","updatedQuery","applyWellKnownCollectionFilters","applyWellKnownItemPredicates","props","aggFields","countFields","countSize","aggLimit","resp","itemToSearchResult","hasNext","next","WellKnownItemPredicates","$application","typekeywords","$dashboard","$dataset","$document","$initiative","$experience","$feedback","$page","$site","$storymap","$template","$webmap","updated","queryFilters","wellKnownCollection","wellKnownFilters","queryClone","replacedPredicates","isWellKnownTypeFilter","replacements","lookupTypePredicates","formatOgcAggregationsResponse","ogcAgg","count","getOgcAggregationQueryParams","_query","getOgcCollectionUrl","apiDefinition","collectionId","getQueryString","_key","ogcApiRequest","updatedQueryParams","targetDomain","urlDomain","withQueryString","_fetch","searchOgcAggregations","getNextOgcCallback","originalQuery","originalOptions","nextLink","l","rel","callback","nextUrl","nextOptions","searchOgcItems","ogcItemToSearchResult","ogcItem","pseudoItem","license","formatOgcItemsResponse","formattedResults","features","numberMatched","getBboxQueryParam","getFilterQueryParam","formatFilterBlock","removeEmptyClauses","formatted","formatPredicate","section","formatSimpleComparison","formatMultiStringPredicate","isDateRange","formatDateRangePredicate","formatComplexPredicate","x","maybeAddSingleQuotes","wrappedValues","anys","formatAnys","alls","formatAlls","nots","formatNots","subsection","v","valueAsArray","whitespaceRegex","clause","getQQueryParam","qPredicate","getSortByQueryParam","sortField","sortOrder","getOgcItemQueryParams","limit","startindex","sortBy","hubSearchItems","portalSearchGroups","searchPortal","groupToSearchResult","enrichGroupSearchResult","enrichUserOrg","fetchUserEnrichments","enrichUserSearchResult","fullName","portalSearchUsers","userToSearchResult","hubSearch","filterType","remainder","formattedOptions","fnHash","isSharedUpdate","capabilities","membershipAccess","isOpenData","hubAutosuggestCss","groupBy","xs","rv","HubAutosuggest","queryTerm","info","loading","items","sections","debug","componentWillLoad","fetchSuggestions","render","h","renderLoading"],"sources":["./node_modules/@esri/hub-common/dist/esm/objects/get-prop.js","./node_modules/@esri/hub-common/dist/esm/util.js","./node_modules/@esri/hub-common/dist/esm/objects/deep-set.js","./node_modules/@esri/hub-common/dist/esm/objects/get-with-default.js","./node_modules/@esri/hub-common/dist/esm/objects/set-prop.js","./node_modules/@esri/hub-common/dist/esm/OperationError.js","./node_modules/@esri/hub-common/dist/esm/utils/create-operation-pipeline.js","./node_modules/@esri/hub-common/dist/esm/utils/map-by.js","./node_modules/tslib/tslib.es6.js","./node_modules/@esri/arcgis-rest-request/dist/esm/utils/process-params.js","./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-query-string.js","./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-form-data.js","./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISRequestError.js","./node_modules/@esri/arcgis-rest-request/dist/esm/utils/warn.js","./node_modules/@esri/arcgis-rest-request/dist/esm/request.js","./node_modules/@esri/arcgis-rest-request/dist/esm/utils/append-custom-params.js","./node_modules/@esri/arcgis-rest-request/dist/esm/utils/clean-url.js","./node_modules/@esri/arcgis-rest-request/dist/esm/utils/decode-query-string.js","./node_modules/@esri/arcgis-rest-auth/dist/esm/fetch-token.js","./node_modules/@esri/arcgis-rest-auth/dist/esm/generate-token.js","./node_modules/@esri/arcgis-rest-auth/dist/esm/federation-utils.js","./node_modules/@esri/arcgis-rest-auth/dist/esm/validate-app-access.js","./node_modules/@esri/arcgis-rest-auth/dist/esm/UserSession.js","./node_modules/@esri/arcgis-rest-portal/dist/esm/util/get-portal-url.js","./node_modules/@esri/arcgis-rest-portal/dist/esm/util/scrub-control-chars.js","./node_modules/@esri/arcgis-rest-portal/dist/esm/items/get.js","./node_modules/@esri/arcgis-rest-portal/dist/esm/groups/get.js","./node_modules/@esri/arcgis-rest-portal/dist/esm/util/SearchQueryBuilder.js","./node_modules/@esri/arcgis-rest-portal/dist/esm/util/generic-search.js","./node_modules/@esri/arcgis-rest-portal/dist/esm/items/search.js","./node_modules/@esri/arcgis-rest-portal/dist/esm/groups/search.js","./node_modules/@esri/arcgis-rest-portal/dist/esm/users/get-user.js","./node_modules/@esri/arcgis-rest-portal/dist/esm/users/search-users.js","./node_modules/@esri/arcgis-rest-portal/dist/esm/util/get-portal.js","./node_modules/@esri/hub-common/dist/esm/urls/get-portal-url.js","./node_modules/@esri/hub-common/dist/esm/urls/get-portal-api-url.js","./node_modules/@esri/hub-common/dist/esm/urls/get-item-home-url.js","./node_modules/@esri/hub-common/dist/esm/urls/get-item-api-url.js","./node_modules/@esri/hub-common/dist/esm/urls/getPortalBaseFromOrgUrl.js","./node_modules/@esri/hub-common/dist/esm/urls/getGroupHomeUrl.js","./node_modules/@esri/hub-common/dist/esm/urls/getUserHomeUrl.js","./node_modules/@esri/hub-common/dist/esm/collections.js","./node_modules/@esri/arcgis-rest-feature-layer/dist/esm/helpers.js","./node_modules/@esri/arcgis-rest-feature-layer/dist/esm/getAllLayersAndTables.js","./node_modules/@esri/arcgis-rest-feature-layer/dist/esm/getService.js","./node_modules/@esri/hub-common/dist/esm/resources/get-item-thumbnail-url.js","./node_modules/@esri/hub-common/dist/esm/HubError.js","./node_modules/@esri/hub-common/dist/esm/items/_internal/slugConverters.js","./node_modules/@esri/hub-common/dist/esm/items/is-services-directory-disabled.js","./node_modules/@esri/hub-common/dist/esm/items/getItemIdentifier.js","./node_modules/@esri/hub-common/dist/esm/content/get-family.js","./node_modules/@esri/hub-common/dist/esm/OperationStack.js","./node_modules/@esri/hub-common/dist/esm/org/fetch-org.js","./node_modules/@esri/hub-common/dist/esm/items/_enrichments.js","./node_modules/@esri/hub-common/dist/esm/request.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/parseInclude.js","./node_modules/@esri/hub-common/dist/esm/projects/fetch.js","./node_modules/@esri/hub-common/dist/esm/sites/HubSites.js","./node_modules/@esri/hub-common/dist/esm/content/_internal/internalContentUtils.js","./node_modules/@esri/hub-common/dist/esm/content/search.js","./node_modules/@esri/hub-common/dist/esm/groups/_internal/enrichments.js","./node_modules/@esri/hub-common/dist/esm/search/utils.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/commonHelpers/getTopLevelPredicate.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/expandPredicate.js","./node_modules/@esri/hub-common/dist/esm/search/serializeQueryForPortal.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/commonHelpers/shouldUseOgcApi.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/commonHelpers/getOgcApiDefinition.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/commonHelpers/getApi.js","./node_modules/@esri/hub-common/dist/esm/pages/HubPages.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/portalSearchUtils.js","./node_modules/@esri/hub-common/dist/esm/search/wellKnownCatalog.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/portalSearchItems.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/hubSearchItemsHelpers/formatOgcAggregationsResponse.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/hubSearchItemsHelpers/getOgcAggregationQueryParams.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/hubSearchItemsHelpers/getOgcCollectionUrl.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/hubSearchItemsHelpers/getQueryString.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/hubSearchItemsHelpers/ogcApiRequest.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/hubSearchItemsHelpers/searchOgcAggregations.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/hubSearchItemsHelpers/getNextOgcCallback.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/hubSearchItemsHelpers/ogcItemToSearchResult.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/hubSearchItemsHelpers/formatOgcItemsResponse.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/hubSearchItemsHelpers/getBboxQueryParam.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/hubSearchItemsHelpers/getFilterQueryParam.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/hubSearchItemsHelpers/getQQueryParam.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/hubSearchItemsHelpers/getSortByQueryParam.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/hubSearchItemsHelpers/getOgcItemQueryParams.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/hubSearchItemsHelpers/searchOgcItems.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/hubSearchItems.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/portalSearchGroups.js","./node_modules/@esri/hub-common/dist/esm/users/_internal/enrichments.js","./node_modules/@esri/hub-common/dist/esm/users/HubUsers.js","./node_modules/@esri/hub-common/dist/esm/search/_internal/portalSearchUsers.js","./node_modules/@esri/hub-common/dist/esm/search/hubSearch.js","./node_modules/@esri/hub-common/dist/esm/groups/HubGroups.js","./src/components/hub-autosuggest/hub-autosuggest.css?tag=hub-autosuggest&encapsulation=shadow","./src/components/hub-autosuggest/hub-autosuggest.tsx"],"sourcesContent":["/**\n * Get a property out of a deeply nested object. Supports array indexing\n * and property matching.\n *\n * Examples:\n * ```js\n * getProp({a: {b: {c: 1}}}, \"a.b.c\") => 1\n * getProp({a: {b: {c: 1}}}, \"a.b.d\") => undefined\n * getProp({a: {b: {c: 1}}}, \"a.b\") => {c: 1}\n * getProp({a: {b: [1,2]}}, \"a.b[0]\") => 1\n * getProp({a: {b: {c: 1}, b2: { $use: \"a.b\"}}, \"a.b2\") => {c: 1}\n * getProp({a: [{key: \"x\", val:1}, {key: \"y\", val:3}]}, \"a[1]\") => {key: \"y\", val:3}\n * getProp({a: [{key: \"x\", val:1}, {key: \"y\", val:3}]}, \"a[1].val\") => 3\n * getProp({a: [{key: \"x\", val:1}, {key: \"y\", val:3}]}, \"a[findBy(key,y)].val\") => 3\n * getProp({a: [{key: \"x\", val:1}, {key: \"y\", val:3}]}, \"a[findBy(val,1)].key\") => \"x\"\n * ```\n */\nexport const getProp = (obj, path) => {\n    return path.split(\".\").reduce(function (prev, curr) {\n        const match = curr.match(/\\[(.*?)\\]$/);\n        if (match) {\n            const indexOrFnName = match[1];\n            const propName = curr.replace(match[0], \"\");\n            if (parseInt(indexOrFnName, 10) > -1) {\n                const idx = parseInt(indexOrFnName, 10);\n                // check that the array exists and that the index is valid\n                if (Array.isArray(prev[propName]) && prev[propName][idx]) {\n                    return prev[propName][idx];\n                }\n                else {\n                    return undefined;\n                }\n            }\n            else {\n                // we have an operation that we want to apply to the array\n                return applyOperation(prev[propName], indexOrFnName);\n            }\n        }\n        else {\n            if (prev && prev[curr] !== undefined) {\n                if (prev[curr] !== null && prev[curr].$use) {\n                    return getProp(obj, prev[curr].$use);\n                }\n                else {\n                    return prev[curr];\n                }\n            }\n            else {\n                return undefined;\n            }\n        }\n    }, obj);\n};\nfunction applyOperation(arr, operation) {\n    // split up the operation into the operationName and the arguments\n    // e.g. \"findBy(key,'projects')\" => [\"findBy\", \"key, 'projects'\"]\n    const parts = operation.split(\"(\");\n    // lots of guards...\n    if (!parts || parts.length !== 2)\n        return undefined;\n    let result;\n    const fnName = parts[0];\n    const args = parts[1]\n        .replace(\")\", \"\")\n        .split(\",\")\n        .map((p) => p.trim());\n    switch (fnName) {\n        case \"findBy\":\n            const prop = args[0];\n            let val;\n            if (isNumeric(args[1])) {\n                val = parseFloat(args[1]);\n            }\n            else {\n                val = args[1].replace(/'/g, \"\");\n            }\n            result = arr.find((p) => p[prop] === val);\n            break;\n        default:\n            result = undefined;\n    }\n    return result;\n}\nfunction isNumeric(n) {\n    return !isNaN(parseFloat(n));\n}\n//# sourceMappingURL=get-prop.js.map","/* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { getProp } from \"./objects/get-prop\";\n/**\n * ```js\n * import { cloneObject } from \"@esri/hub-common\";\n * const original = { foo: \"bar\" }\n * const copy = cloneObject(original)\n * copy.foo // \"bar\"\n * copy === original // false\n * ```\n * Make a deep clone, including arrays. Does not handle functions!\n */\nexport function cloneObject(obj) {\n    let clone = {};\n    // first check array\n    if (Array.isArray(obj)) {\n        clone = obj.map(cloneObject);\n    }\n    else if (typeof obj === \"object\") {\n        for (const i in obj) {\n            if (obj.hasOwnProperty(i)) {\n                const value = obj[i];\n                if (value != null && typeof value === \"object\") {\n                    if (value instanceof Date) {\n                        clone[i] = new Date(value.getTime());\n                    }\n                    else if (typeof Blob !== \"undefined\" && value instanceof Blob) {\n                        clone[i] = new Blob([value], { type: value.type });\n                    }\n                    else {\n                        clone[i] = cloneObject(value);\n                    }\n                }\n                else {\n                    clone[i] = value;\n                }\n            }\n        }\n    }\n    else {\n        clone = obj;\n    }\n    return clone;\n}\n/**\n * Given an array of objects, convert into an object, with each\n * entry assigned the key via the keyprop\n */\nexport function arrayToObject(arr, key) {\n    return arr.reduce((hash, entry) => {\n        hash[getProp(entry, key)] = entry;\n        return hash;\n    }, {});\n}\n/**\n * Given an object, convert into an array, with each\n * something or other\n */\nexport function objectToArray(obj, keyProp = \"id\") {\n    const arr = Object.keys(obj).reduce((acc, prop) => {\n        obj[prop][keyProp] = prop;\n        acc.push(cloneObject(obj[prop]));\n        return acc;\n    }, []);\n    return arr;\n}\n/**\n * Return an entry from an array by a property name\n */\nexport function findBy(arr, prop, value) {\n    if (!arr) {\n        return null;\n    }\n    const res = arr.reduce((acc, entry) => {\n        if (getProp(entry, prop) === value) {\n            acc = entry;\n        }\n        return acc;\n    }, null);\n    return res;\n}\n/**\n * Return a new array without the specified value.\n *\n * @export\n * @param {any[]} arr\n * @param {*} val value or object to remove\n * @returns {any[]} Array without the value\n */\nexport function without(arr, value) {\n    const res = arr.filter((entry) => entry !== value);\n    return res;\n}\n/**\n * Compose\n * adapted from: https://github.com/stoeffel/compose-function/blob/master/module/index.js\n */\nexport function compose(...fns) {\n    return fns.reduce((f, g) => (...args) => f(g(...args)));\n}\n/**\n * Return a random number, prefixed with a string. Used for unique identifiers that do not require\n * the rigor of a full UUID - i.e. node id's, process ids etc.\n * @param prefix String to prefix the random number with so the result is a valid javascript property\n */\nexport function createId(prefix = \"i\") {\n    // prepend some char so it's always a valid dotable property name\n    // get a random number, convert to base 36 representation, then grab chars 2-8\n    return `${prefix}${Math.random().toString(36).substr(2, 8)}`;\n}\n/**\n * Append or replace a value on an object, using a specified key, if the value is not null.\n * This is a very useful companion to the [getProp()](../getProp/) utility.\n *\n * Note: object that is passed in is cloned before the property is appended.\n *\n * Allows for code like:\n *\n * ```js\n * let model = {\n *  item: {\n *    title: 'some example object',\n *    description: 'this is some longer text',\n *    type: 'Web Map',\n *    properties: {\n *      sourceId: '3ef'\n *    }\n *  },\n *  data: {\n *    theme: 'orange',\n *    parcelLayer: {\n *      primaryField: 'PIN'\n *    }\n *  }\n * };\n *\n * // Let's extract some details into an object.\n * const summary = [\n *  'item.title',\n *  'item.description',\n *  'item.missingProp',\n *  'data.parcelLayer.primaryField'].reduce((acc, prop) => {\n *   // create the property name... you could do this however...\n *   let propName = prop.split('.').reverse()[0];\n *   return maybeAdd(propName, getProp(model, key), acc);\n * }, {});\n *\n * // summary =>\n * // {\n * //   title: 'some example object',\n * //   description: 'this is some longer text',\n * //   primaryField: 'PIN'\n * // }\n * ```\n * @param key - key to use when appending to the object\n * @param val - the possibly null value\n * @param target - the object to update\n */\nexport function maybeAdd(key, val, target) {\n    // see if we got something...\n    if (val !== null && val !== undefined) {\n        target = cloneObject(target);\n        // attach using the key\n        target[key] = val;\n    }\n    return target;\n}\n/**\n * Append a value to an array, if the value is not null.\n * This is a very useful companion to the [getProp()](../getProp/) utility.\n *\n * Note: the array that is passed in is cloned before being appended to.\n *\n * Allows for code like:\n * ```js\n *  // example object\n * let model = {\n *  item: {\n *    id: 'c00',\n *    title: 'some example object',\n *    description: 'this is some longer text',\n *    type: 'Web Map',\n *    properties: {\n *      sourceId: '3ef'\n *    }\n *  },\n *  data: {\n *    theme: 'orange',\n *    parcelLayer: {\n *      itemId: '7ca',\n *      primaryField: 'PIN'\n *    }\n *  }\n * };\n * // lets pluck some id's into an array...\n * maybePush(getProp(model, 'item.properties.sourceId'), []);\n * // > ['3ef']\n *\n * // now try to get a value from a property that is missing...\n * maybePush(getProp(obj, 'item.properties.childId'), []);\n * // > []\n *\n * // easily pluck values via property paths\n * const summary = [\n *  'item.id',\n *  'item.properties.sourceId',\n *  'item.properties.childId',\n *  'data.parcelLayer.itemId'].reduce((acc, prop) => {\n *   return maybePush(getProp(model, key), acc);\n * }, []);\n *\n * // summary => ['c00', '3ef', '7ca']\n *\n * ```\n *\n * @param val - the possibly null value\n * @param target - the array to add the value to\n */\nexport function maybePush(val, target) {\n    if (val !== null && val !== undefined) {\n        // create a clone because mutation makes us sad...\n        target = cloneObject(target);\n        target.push(val);\n    }\n    return target;\n}\n/**\n * Convert a string to camelCase\n *\n * @export\n * @param {string} value\n * @returns {string} camelCased string\n */\nexport function camelize(value) {\n    // lower case the whole thing to start...\n    value = value.toLowerCase();\n    // strip out any/all special chars...\n    value = value.replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, \" \");\n    // Hoisted from EmberJS (MIT License)\n    // https://github.com/emberjs/ember.js/blob/v2.0.1/packages/ember-runtime/lib/system/string.js#L23-L27\n    const STRING_CAMELIZE_REGEXP_1 = /(\\-|\\_|\\.|\\s)+(.)?/g;\n    const STRING_CAMELIZE_REGEXP_2 = /(^|\\/)([A-Z])/g;\n    return value\n        .replace(STRING_CAMELIZE_REGEXP_1, function (match, separator, chr) {\n        return chr ? chr.toUpperCase() : \"\";\n    })\n        .replace(STRING_CAMELIZE_REGEXP_2, function (match, separator, chr) {\n        return match.toLowerCase();\n    });\n}\n/**\n * Determines if a value is unique in an array\n * Allows for code like:\n *\n * ```js\n * const ary = [ 1, 2, 3, 3, 4, 5, 1 ];\n *\n * const result = ary.filter(unique);\n *\n * result => [ 1, 2, 3, 4, 5 ]\n * ```\n * @param value - the value to search for\n * @param index - the index of the searched value\n * @param ary - the array to search\n * @returns {boolean} - indicating if the value is unique in the array\n */\nexport function unique(value, index, ary) {\n    return ary.indexOf(value) === index;\n}\n/**\n * Return array of unique objects, based on a deep property value\n *  Note: Property you compare on should be a primative type\n * @export\n * @template T\n * @param {T[]} arr\n * @param {string} prop\n * @return {*}  {T[]}\n */\nexport function uniqueBy(arr, prop) {\n    return arr.reduce((acc, entry) => {\n        const nameMatches = (e) => getProp(e, prop) === getProp(entry, prop);\n        return maybePush(acc.find(nameMatches) ? null : entry, acc);\n    }, []);\n}\n/**\n * Return last element of an array\n *\n * @export\n * @template T\n * @param {T[]} arr\n * @return {*}  {T}\n */\nexport function last(arr) {\n    return arr[arr.length - 1];\n}\n/**\n * Filter an array by a deep property value\n *\n * @export\n * @template T\n * @param {T[]} arr\n * @param {string} prop\n * @param {unknown} val\n * @return {*}  {T[]}\n */\nexport function filterBy(arr, prop, val) {\n    return arr.filter((entry) => getProp(entry, prop) === val);\n}\n/**\n * Extends the target object with props from the source object, overwriting identically named\n * props in target with those from source, ignoring null and undefined values; similar to $.extend.\n * Performs a deep extend by default, unless deep = false is passed as the third arg.\n *\n * @param target - the object that will take props from source\n * @param source - the object from which to take props\n * @param deep - whether or not to perform a deep (recursive) extend of source\n */\nexport function extend(target, source, deep = true) {\n    const extended = cloneObject(target);\n    return Object.keys(source).reduce((obj, prop) => {\n        if (source[prop] !== null && source[prop] !== undefined) {\n            const value = cloneObject(source[prop]);\n            if (Array.isArray(value)) {\n                // check for arrays, since array is type object\n                obj[prop] = value;\n            }\n            else if (deep && typeof value === \"object\") {\n                obj[prop] = extend(obj[prop] || {}, value, deep);\n            }\n            else {\n                obj[prop] = value;\n            }\n        }\n        return obj;\n    }, extended);\n}\n/**\n * Add number of days to a given date\n *\n * @export\n * @param {string} date\n * @param {number} numOfDays\n * @returns {string} date string with numOfDays added to the given date\n */\nexport function addDays(date, numOfDays) {\n    try {\n        const given = new Date(date);\n        const dateString = new Date(given.setDate(given.getDate() + numOfDays)).toISOString();\n        return dateString.split(\"T\")[0];\n    }\n    catch (e) {\n        throw new Error(\"Invalid Date\");\n    }\n}\n/**\n * Returns an array with arrays of the given size.\n *\n * @param arr Array to split\n * @param size Size of every group\n */\nexport function chunkArray(arr, size) {\n    const results = [];\n    let index = 0;\n    while (index < arr.length) {\n        results.push(arr.slice(index, index + size));\n        index += size;\n    }\n    return results;\n}\n/**\n * Determine if a value is null or undefined\n * @param value anything\n * @returns\n */\nexport const isNil = (value) => value == null;\n/**\n * Upper case first letter (only) of a string\n * @param word\n * @returns Word\n */\nexport const capitalize = (word) => {\n    const chars = Array.from(word);\n    // account for the empty string\n    if (chars.length) {\n        chars[0] = chars[0].toUpperCase();\n    }\n    return chars.join(\"\");\n};\n/**\n * An IE-compatible stand-in for Javascript's [array.flat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat)\n * @param arr the array\n * @returns an array\n */\nexport function flattenArray(arr) {\n    return arr.reduce((acc, val) => acc.concat(val), []);\n}\n//# sourceMappingURL=util.js.map","import { cloneObject } from \"../util\";\n/**\n * Deep set function. Like Ember.set, but smarter as it will create the path\n * @param {Object} target Object we want to set the property on\n * @param {String} path Dotted path to the property we want to set\n * @param {Any} value Value we want to assign to the property\n * @param {Boolean} replace If true, replace the value at the path with the new value instead of merging\n */\nexport function deepSet(target, path, value = {}, replace = false) {\n    const parts = path.split(\".\");\n    let worker = target;\n    const lastIdx = parts.length - 1;\n    parts.forEach((p, idx) => {\n        if (!worker.hasOwnProperty(p) || worker[p] == null) {\n            if (idx === lastIdx) {\n                worker[p] = value;\n            }\n            else {\n                // keep building the path\n                worker[p] = {};\n            }\n        }\n        else if (idx === lastIdx) {\n            if (typeof worker[p] === \"object\" && !Array.isArray(worker[p])) {\n                if (replace) {\n                    // We do this to replace the value wholesale, rather than merge the two\n                    // This is for times where value is an object\n                    worker[p] = cloneObject(value);\n                }\n                else {\n                    worker[p] = Object.assign(worker[p], cloneObject(value));\n                }\n            }\n            else {\n                worker[p] = value;\n            }\n        }\n        worker = worker[p];\n    });\n}\n//# sourceMappingURL=deep-set.js.map","import { getProp } from \"./get-prop\";\n/**\n * Gets the value of a property from an object with a\n * default if that prop is undefined\n * @param obj\n * @param prop\n * @param def\n */\nexport function getWithDefault(obj, prop, def) {\n    const res = getProp(obj, prop);\n    return res !== undefined ? res : def;\n}\n//# sourceMappingURL=get-with-default.js.map","import { deepSet } from \"./deep-set\";\n/**\n * Sets a deep object property, constructing the property path as necessary\n *\n * @param path - the path to the property we want to set\n * @param val - the value we want to set it to\n * @param obj - the target object\n * @param replace - if true, replace the value at the path with the new value instead of merging\n */\nexport function setProp(path, val, obj, replace = false) {\n    if (Array.isArray(path)) {\n        path = path.join(\".\");\n    }\n    deepSet(obj, path, val, replace);\n}\n//# sourceMappingURL=set-prop.js.map","/* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { getWithDefault } from \"./objects/get-with-default\";\n/**\n * Generic Solution Error with an Error stack as well\n * as an optional serialized OperationStack.\n *\n * Also accepts a `rootCause` Error object\n */\nexport default class OperationError extends Error {\n    /**\n     * Creates an instance of OperationError.\n     * @param {string} operation\n     * @param {string} [message]\n     * @param {Error} [rootCause]\n     * @memberof OperationError\n     */\n    constructor(operation, message, rootCause) {\n        message = message || \"UNKNOWN_ERROR\";\n        // if the rootCause has a .rootCause, use that so we don't deeply nest\n        rootCause = getWithDefault(rootCause, \"rootCause\", rootCause);\n        super(message);\n        this.operation = operation;\n        this.name = \"OperationError\";\n        this.rootCause = rootCause;\n        Object.setPrototypeOf(this, OperationError.prototype);\n        // using rootCause.stack ensures that the resulting error will have the original\n        // message + call stack. If that's not an option, we create a new\n        // stack... which is better than nothing, but it will look like\n        // OperationError is the source of the error\n        this.stack = getWithDefault(rootCause, \"stack\", new Error().stack);\n    }\n}\n//# sourceMappingURL=OperationError.js.map","import OperationError from \"../OperationError\";\n/**\n * Returns a function that orchestrates a pipeline of smaller functions.\n * See [Composing Workflows](../../../guides/composing-workflows) for more information.\n *\n * All the functions must adhere to the `PipelineFn<T>` signature:\n *\n * `(value: IPipeable<T>) => Promise<IPipeable<T>>`\n *\n * Given an array of OperationPipeFns, run them in sequence and return the resultant promise\n *\n * i.e. `createOperationPipeline([fn1, fn2, f3])` will return in a function that chains\n * the functions like this: `fn1(input).then(fn2).then(fn3).then(result)`\n *\n * @param fns functions to be run in sequence\n * @returns Promise<Pipable<T>>\n */\nexport const createOperationPipeline = (fns) => (input) => {\n    return fns.reduce((chain, func) => {\n        return chain.then(func).catch((err) => {\n            // if it's an OperationError we can just reject with it...\n            if (err.name === \"OperationError\") {\n                return Promise.reject(err);\n            }\n            else {\n                // otherwise, create an OperationError and reject with that\n                const msg = `IPipeableFn did not reject with an OperationError \\n Operation Stack: \\n ${input.stack.toString()}`;\n                const opErr = new OperationError(\"pipeline execution error\", msg);\n                opErr.operationStack = input.stack.serialize();\n                return Promise.reject(opErr);\n            }\n        });\n    }, Promise.resolve(input));\n};\n//# sourceMappingURL=create-operation-pipeline.js.map","/**\n * Map over an array returning the specified property for each entry\n * @param {String} prop Property to extracct\n * @param {Array} arr array of objects\n */\nexport function mapBy(prop, arr = []) {\n    return arr.map((e) => e[prop]);\n}\n//# sourceMappingURL=map-by.js.map","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Checks parameters to see if we should use FormData to send the request\n * @param params The object whose keys will be encoded.\n * @return A boolean indicating if FormData will be required.\n */\nexport function requiresFormData(params) {\n    return Object.keys(params).some(function (key) {\n        var value = params[key];\n        if (!value) {\n            return false;\n        }\n        if (value && value.toParam) {\n            value = value.toParam();\n        }\n        var type = value.constructor.name;\n        switch (type) {\n            case \"Array\":\n                return false;\n            case \"Object\":\n                return false;\n            case \"Date\":\n                return false;\n            case \"Function\":\n                return false;\n            case \"Boolean\":\n                return false;\n            case \"String\":\n                return false;\n            case \"Number\":\n                return false;\n            default:\n                return true;\n        }\n    });\n}\n/**\n * Converts parameters to the proper representation to send to the ArcGIS REST API.\n * @param params The object whose keys will be encoded.\n * @return A new object with properly encoded values.\n */\nexport function processParams(params) {\n    var newParams = {};\n    Object.keys(params).forEach(function (key) {\n        var _a, _b;\n        var param = params[key];\n        if (param && param.toParam) {\n            param = param.toParam();\n        }\n        if (!param &&\n            param !== 0 &&\n            typeof param !== \"boolean\" &&\n            typeof param !== \"string\") {\n            return;\n        }\n        var type = param.constructor.name;\n        var value;\n        // properly encodes objects, arrays and dates for arcgis.com and other services.\n        // ported from https://github.com/Esri/esri-leaflet/blob/master/src/Request.js#L22-L30\n        // also see https://github.com/Esri/arcgis-rest-js/issues/18:\n        // null, undefined, function are excluded. If you want to send an empty key you need to send an empty string \"\".\n        switch (type) {\n            case \"Array\":\n                // Based on the first element of the array, classify array as an array of arrays, an array of objects\n                // to be stringified, or an array of non-objects to be comma-separated\n                // eslint-disable-next-line no-case-declarations\n                var firstElementType = (_b = (_a = param[0]) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name;\n                value =\n                    firstElementType === \"Array\" ? param : // pass thru array of arrays\n                        firstElementType === \"Object\" ? JSON.stringify(param) : // stringify array of objects\n                            param.join(\",\"); // join other types of array elements\n                break;\n            case \"Object\":\n                value = JSON.stringify(param);\n                break;\n            case \"Date\":\n                value = param.valueOf();\n                break;\n            case \"Function\":\n                value = null;\n                break;\n            case \"Boolean\":\n                value = param + \"\";\n                break;\n            default:\n                value = param;\n                break;\n        }\n        if (value || value === 0 || typeof value === \"string\" || Array.isArray(value)) {\n            newParams[key] = value;\n        }\n    });\n    return newParams;\n}\n//# sourceMappingURL=process-params.js.map","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { processParams } from \"./process-params\";\n/**\n * Encodes keys and parameters for use in a URL's query string.\n *\n * @param key Parameter's key\n * @param value Parameter's value\n * @returns Query string with key and value pairs separated by \"&\"\n */\nexport function encodeParam(key, value) {\n    // For array of arrays, repeat key=value for each element of containing array\n    if (Array.isArray(value) && value[0] && Array.isArray(value[0])) {\n        return value.map(function (arrayElem) { return encodeParam(key, arrayElem); }).join(\"&\");\n    }\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n}\n/**\n * Encodes the passed object as a query string.\n *\n * @param params An object to be encoded.\n * @returns An encoded query string.\n */\nexport function encodeQueryString(params) {\n    var newParams = processParams(params);\n    return Object.keys(newParams)\n        .map(function (key) {\n        return encodeParam(key, newParams[key]);\n    })\n        .join(\"&\");\n}\n//# sourceMappingURL=encode-query-string.js.map","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { processParams, requiresFormData } from \"./process-params\";\nimport { encodeQueryString } from \"./encode-query-string\";\n/**\n * Encodes parameters in a [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object in browsers or in a [FormData](https://github.com/form-data/form-data) in Node.js\n *\n * @param params An object to be encoded.\n * @returns The complete [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object.\n */\nexport function encodeFormData(params, forceFormData) {\n    // see https://github.com/Esri/arcgis-rest-js/issues/499 for more info.\n    var useFormData = requiresFormData(params) || forceFormData;\n    var newParams = processParams(params);\n    if (useFormData) {\n        var formData_1 = new FormData();\n        Object.keys(newParams).forEach(function (key) {\n            if (typeof Blob !== \"undefined\" && newParams[key] instanceof Blob) {\n                /* To name the Blob:\n                 1. look to an alternate request parameter called 'fileName'\n                 2. see if 'name' has been tacked onto the Blob manually\n                 3. if all else fails, use the request parameter\n                */\n                var filename = newParams[\"fileName\"] || newParams[key].name || key;\n                formData_1.append(key, newParams[key], filename);\n            }\n            /* istanbul ignore next */\n            else if (newParams[key].constructor &&\n                newParams[key].constructor.name === 'ReadStream' &&\n                // TODO: only specify the knownLength option if a valid value is given.\n                // If we can verify in all REST API that the option is need for\n                // node ReadStream, it can throw an error for the missing dataSize value.\n                // Note that such change will be a breaking change.\n                Number.isInteger(newParams[\"dataSize\"])) {\n                // have to cast the formData to any so that I can use the unofficial API\n                // in the form-data library to handle Node ReadStream. See\n                // https://github.com/form-data/form-data/issues/508\n                formData_1.append(key, newParams[key], {\n                    knownLength: newParams[\"dataSize\"]\n                });\n            }\n            else {\n                formData_1.append(key, newParams[key]);\n            }\n        });\n        return formData_1;\n    }\n    else {\n        return encodeQueryString(params);\n    }\n}\n//# sourceMappingURL=encode-form-data.js.map","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n// TypeScript 2.1 no longer allows you to extend built in types. See https://github.com/Microsoft/TypeScript/issues/12790#issuecomment-265981442\n// and https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n//\n// This code is from MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types.\nvar ArcGISRequestError = /** @class */ (function () {\n    /**\n     * Create a new `ArcGISRequestError`  object.\n     *\n     * @param message - The error message from the API\n     * @param code - The error code from the API\n     * @param response - The original response from the API that caused the error\n     * @param url - The original url of the request\n     * @param options - The original options and parameters of the request\n     */\n    function ArcGISRequestError(message, code, response, url, options) {\n        message = message || \"UNKNOWN_ERROR\";\n        code = code || \"UNKNOWN_ERROR_CODE\";\n        this.name = \"ArcGISRequestError\";\n        this.message =\n            code === \"UNKNOWN_ERROR_CODE\" ? message : code + \": \" + message;\n        this.originalMessage = message;\n        this.code = code;\n        this.response = response;\n        this.url = url;\n        this.options = options;\n    }\n    return ArcGISRequestError;\n}());\nexport { ArcGISRequestError };\nArcGISRequestError.prototype = Object.create(Error.prototype);\nArcGISRequestError.prototype.constructor = ArcGISRequestError;\n//# sourceMappingURL=ArcGISRequestError.js.map","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Method used internally to surface messages to developers.\n */\nexport function warn(message) {\n    if (console && console.warn) {\n        console.warn.apply(console, [message]);\n    }\n}\n//# sourceMappingURL=warn.js.map","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { __assign, __extends } from \"tslib\";\nimport { encodeFormData } from \"./utils/encode-form-data\";\nimport { encodeQueryString } from \"./utils/encode-query-string\";\nimport { requiresFormData } from \"./utils/process-params\";\nimport { ArcGISRequestError } from \"./utils/ArcGISRequestError\";\nimport { warn } from \"./utils/warn\";\nexport var NODEJS_DEFAULT_REFERER_HEADER = \"@esri/arcgis-rest-js\";\nvar DEFAULT_ARCGIS_REQUEST_OPTIONS = {\n    httpMethod: \"POST\",\n    params: {\n        f: \"json\",\n    },\n};\n/**\n * Sets the default options that will be passed in **all requests across all `@esri/arcgis-rest-js` modules**.\n *\n *\n * ```js\n * import { setDefaultRequestOptions } from \"@esri/arcgis-rest-request\";\n * setDefaultRequestOptions({\n *   authentication: userSession // all requests will use this session by default\n * })\n * ```\n * You should **never** set a default `authentication` when you are in a server side environment where you may be handling requests for many different authenticated users.\n *\n * @param options The default options to pass with every request. Existing default will be overwritten.\n * @param hideWarnings Silence warnings about setting default `authentication` in shared environments.\n */\nexport function setDefaultRequestOptions(options, hideWarnings) {\n    if (options.authentication && !hideWarnings) {\n        warn(\"You should not set `authentication` as a default in a shared environment such as a web server which will process multiple users requests. You can call `setDefaultRequestOptions` with `true` as a second argument to disable this warning.\");\n    }\n    DEFAULT_ARCGIS_REQUEST_OPTIONS = options;\n}\nvar ArcGISAuthError = /** @class */ (function (_super) {\n    __extends(ArcGISAuthError, _super);\n    /**\n     * Create a new `ArcGISAuthError`  object.\n     *\n     * @param message - The error message from the API\n     * @param code - The error code from the API\n     * @param response - The original response from the API that caused the error\n     * @param url - The original url of the request\n     * @param options - The original options of the request\n     */\n    function ArcGISAuthError(message, code, response, url, options) {\n        if (message === void 0) { message = \"AUTHENTICATION_ERROR\"; }\n        if (code === void 0) { code = \"AUTHENTICATION_ERROR_CODE\"; }\n        var _this = _super.call(this, message, code, response, url, options) || this;\n        _this.name = \"ArcGISAuthError\";\n        _this.message =\n            code === \"AUTHENTICATION_ERROR_CODE\" ? message : code + \": \" + message;\n        return _this;\n    }\n    ArcGISAuthError.prototype.retry = function (getSession, retryLimit) {\n        var _this = this;\n        if (retryLimit === void 0) { retryLimit = 3; }\n        var tries = 0;\n        var retryRequest = function (resolve, reject) {\n            getSession(_this.url, _this.options)\n                .then(function (session) {\n                var newOptions = __assign(__assign({}, _this.options), { authentication: session });\n                tries = tries + 1;\n                return request(_this.url, newOptions);\n            })\n                .then(function (response) {\n                resolve(response);\n            })\n                .catch(function (e) {\n                if (e.name === \"ArcGISAuthError\" && tries < retryLimit) {\n                    retryRequest(resolve, reject);\n                }\n                else if (e.name === \"ArcGISAuthError\" && tries >= retryLimit) {\n                    reject(_this);\n                }\n                else {\n                    reject(e);\n                }\n            });\n        };\n        return new Promise(function (resolve, reject) {\n            retryRequest(resolve, reject);\n        });\n    };\n    return ArcGISAuthError;\n}(ArcGISRequestError));\nexport { ArcGISAuthError };\n/**\n * Checks for errors in a JSON response from the ArcGIS REST API. If there are no errors, it will return the `data` passed in. If there is an error, it will throw an `ArcGISRequestError` or `ArcGISAuthError`.\n *\n * @param data The response JSON to check for errors.\n * @param url The url of the original request\n * @param params The parameters of the original request\n * @param options The options of the original request\n * @returns The data that was passed in the `data` parameter\n */\nexport function checkForErrors(response, url, params, options, originalAuthError) {\n    // this is an error message from billing.arcgis.com backend\n    if (response.code >= 400) {\n        var message = response.message, code = response.code;\n        throw new ArcGISRequestError(message, code, response, url, options);\n    }\n    // error from ArcGIS Online or an ArcGIS Portal or server instance.\n    if (response.error) {\n        var _a = response.error, message = _a.message, code = _a.code, messageCode = _a.messageCode;\n        var errorCode = messageCode || code || \"UNKNOWN_ERROR_CODE\";\n        if (code === 498 ||\n            code === 499 ||\n            messageCode === \"GWM_0003\" ||\n            (code === 400 && message === \"Unable to generate token.\")) {\n            if (originalAuthError) {\n                throw originalAuthError;\n            }\n            else {\n                throw new ArcGISAuthError(message, errorCode, response, url, options);\n            }\n        }\n        throw new ArcGISRequestError(message, errorCode, response, url, options);\n    }\n    // error from a status check\n    if (response.status === \"failed\" || response.status === \"failure\") {\n        var message = void 0;\n        var code = \"UNKNOWN_ERROR_CODE\";\n        try {\n            message = JSON.parse(response.statusMessage).message;\n            code = JSON.parse(response.statusMessage).code;\n        }\n        catch (e) {\n            message = response.statusMessage || response.message;\n        }\n        throw new ArcGISRequestError(message, code, response, url, options);\n    }\n    return response;\n}\n/**\n * ```js\n * import { request } from '@esri/arcgis-rest-request';\n * //\n * request('https://www.arcgis.com/sharing/rest')\n *   .then(response) // response.currentVersion === 5.2\n * //\n * request('https://www.arcgis.com/sharing/rest', {\n *   httpMethod: \"GET\"\n * })\n * //\n * request('https://www.arcgis.com/sharing/rest/search', {\n *   params: { q: 'parks' }\n * })\n *   .then(response) // response.total => 78379\n * ```\n * Generic method for making HTTP requests to ArcGIS REST API endpoints.\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function request(url, requestOptions) {\n    if (requestOptions === void 0) { requestOptions = { params: { f: \"json\" } }; }\n    var options = __assign(__assign(__assign({ httpMethod: \"POST\" }, DEFAULT_ARCGIS_REQUEST_OPTIONS), requestOptions), {\n        params: __assign(__assign({}, DEFAULT_ARCGIS_REQUEST_OPTIONS.params), requestOptions.params),\n        headers: __assign(__assign({}, DEFAULT_ARCGIS_REQUEST_OPTIONS.headers), requestOptions.headers),\n    });\n    var missingGlobals = [];\n    var recommendedPackages = [];\n    // don't check for a global fetch if a custom implementation was passed through\n    if (!options.fetch && typeof fetch !== \"undefined\") {\n        options.fetch = fetch.bind(Function(\"return this\")());\n    }\n    else {\n        missingGlobals.push(\"`fetch`\");\n        recommendedPackages.push(\"`node-fetch`\");\n    }\n    if (typeof Promise === \"undefined\") {\n        missingGlobals.push(\"`Promise`\");\n        recommendedPackages.push(\"`es6-promise`\");\n    }\n    if (typeof FormData === \"undefined\") {\n        missingGlobals.push(\"`FormData`\");\n        recommendedPackages.push(\"`isomorphic-form-data`\");\n    }\n    if (!options.fetch ||\n        typeof Promise === \"undefined\" ||\n        typeof FormData === \"undefined\") {\n        throw new Error(\"`arcgis-rest-request` requires a `fetch` implementation and global variables for `Promise` and `FormData` to be present in the global scope. You are missing \" + missingGlobals.join(\", \") + \". We recommend installing the \" + recommendedPackages.join(\", \") + \" modules at the root of your application to add these to the global scope. See https://bit.ly/2KNwWaJ for more info.\");\n    }\n    var httpMethod = options.httpMethod, authentication = options.authentication, rawResponse = options.rawResponse;\n    var params = __assign({ f: \"json\" }, options.params);\n    var originalAuthError = null;\n    var fetchOptions = {\n        method: httpMethod,\n        /* ensures behavior mimics XMLHttpRequest.\n        needed to support sending IWA cookies */\n        credentials: options.credentials || \"same-origin\",\n    };\n    // the /oauth2/platformSelf route will add X-Esri-Auth-Client-Id header\n    // and that request needs to send cookies cross domain\n    // so we need to set the credentials to \"include\"\n    if (options.headers &&\n        options.headers[\"X-Esri-Auth-Client-Id\"] &&\n        url.indexOf(\"/oauth2/platformSelf\") > -1) {\n        fetchOptions.credentials = \"include\";\n    }\n    return (authentication\n        ? authentication.getToken(url, { fetch: options.fetch }).catch(function (err) {\n            /**\n             * append original request url and requestOptions\n             * to the error thrown by getToken()\n             * to assist with retrying\n             */\n            err.url = url;\n            err.options = options;\n            /**\n             * if an attempt is made to talk to an unfederated server\n             * first try the request anonymously. if a 'token required'\n             * error is thrown, throw the UNFEDERATED error then.\n             */\n            originalAuthError = err;\n            return Promise.resolve(\"\");\n        })\n        : Promise.resolve(\"\"))\n        .then(function (token) {\n        if (token.length) {\n            params.token = token;\n        }\n        if (authentication && authentication.getDomainCredentials) {\n            fetchOptions.credentials = authentication.getDomainCredentials(url);\n        }\n        // Custom headers to add to request. IRequestOptions.headers with merge over requestHeaders.\n        var requestHeaders = {};\n        if (fetchOptions.method === \"GET\") {\n            // Prevents token from being passed in query params when hideToken option is used.\n            /* istanbul ignore if - window is always defined in a browser. Test case is covered by Jasmine in node test */\n            if (params.token &&\n                options.hideToken &&\n                // Sharing API does not support preflight check required by modern browsers https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\n                typeof window === \"undefined\") {\n                requestHeaders[\"X-Esri-Authorization\"] = \"Bearer \" + params.token;\n                delete params.token;\n            }\n            // encode the parameters into the query string\n            var queryParams = encodeQueryString(params);\n            // dont append a '?' unless parameters are actually present\n            var urlWithQueryString = queryParams === \"\" ? url : url + \"?\" + encodeQueryString(params);\n            if (\n            // This would exceed the maximum length for URLs specified by the consumer and requires POST\n            (options.maxUrlLength &&\n                urlWithQueryString.length > options.maxUrlLength) ||\n                // Or if the customer requires the token to be hidden and it has not already been hidden in the header (for browsers)\n                (params.token && options.hideToken)) {\n                // the consumer specified a maximum length for URLs\n                // and this would exceed it, so use post instead\n                fetchOptions.method = \"POST\";\n                // If the token was already added as a Auth header, add the token back to body with other params instead of header\n                if (token.length && options.hideToken) {\n                    params.token = token;\n                    // Remove existing header that was added before url query length was checked\n                    delete requestHeaders[\"X-Esri-Authorization\"];\n                }\n            }\n            else {\n                // just use GET\n                url = urlWithQueryString;\n            }\n        }\n        /* updateResources currently requires FormData even when the input parameters dont warrant it.\n    https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm\n        see https://github.com/Esri/arcgis-rest-js/pull/500 for more info. */\n        var forceFormData = new RegExp(\"/items/.+/updateResources\").test(url);\n        if (fetchOptions.method === \"POST\") {\n            fetchOptions.body = encodeFormData(params, forceFormData);\n        }\n        // Mixin headers from request options\n        fetchOptions.headers = __assign(__assign({}, requestHeaders), options.headers);\n        /* istanbul ignore next - karma reports coverage on browser tests only */\n        if (typeof window === \"undefined\" && !fetchOptions.headers.referer) {\n            fetchOptions.headers.referer = NODEJS_DEFAULT_REFERER_HEADER;\n        }\n        /* istanbul ignore else blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */\n        if (!requiresFormData(params) && !forceFormData) {\n            fetchOptions.headers[\"Content-Type\"] =\n                \"application/x-www-form-urlencoded\";\n        }\n        return options.fetch(url, fetchOptions);\n    })\n        .then(function (response) {\n        if (!response.ok) {\n            // server responded w/ an actual error (404, 500, etc)\n            var status_1 = response.status, statusText = response.statusText;\n            throw new ArcGISRequestError(statusText, \"HTTP \" + status_1, response, url, options);\n        }\n        if (rawResponse) {\n            return response;\n        }\n        switch (params.f) {\n            case \"json\":\n                return response.json();\n            case \"geojson\":\n                return response.json();\n            case \"html\":\n                return response.text();\n            case \"text\":\n                return response.text();\n            /* istanbul ignore next blob responses are difficult to make cross platform we will just have to trust that isomorphic fetch will do its job */\n            default:\n                return response.blob();\n        }\n    })\n        .then(function (data) {\n        if ((params.f === \"json\" || params.f === \"geojson\") && !rawResponse) {\n            var response = checkForErrors(data, url, params, options, originalAuthError);\n            if (originalAuthError) {\n                /* If the request was made to an unfederated service that\n                didn't require authentication, add the base url and a dummy token\n                to the list of trusted servers to avoid another federation check\n                in the event of a repeat request */\n                var truncatedUrl = url\n                    .toLowerCase()\n                    .split(/\\/rest(\\/admin)?\\/services\\//)[0];\n                options.authentication.federatedServers[truncatedUrl] = {\n                    token: [],\n                    // default to 24 hours\n                    expires: new Date(Date.now() + 86400 * 1000),\n                };\n                originalAuthError = null;\n            }\n            return response;\n        }\n        else {\n            return data;\n        }\n    });\n}\n//# sourceMappingURL=request.js.map","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { __assign } from \"tslib\";\n/**\n * Helper for methods with lots of first order request options to pass through as request parameters.\n */\nexport function appendCustomParams(customOptions, keys, baseOptions) {\n    var requestOptionsKeys = [\n        \"params\",\n        \"httpMethod\",\n        \"rawResponse\",\n        \"authentication\",\n        \"portal\",\n        \"fetch\",\n        \"maxUrlLength\",\n        \"headers\"\n    ];\n    var options = __assign(__assign({ params: {} }, baseOptions), customOptions);\n    // merge all keys in customOptions into options.params\n    options.params = keys.reduce(function (value, key) {\n        if (customOptions[key] || typeof customOptions[key] === \"boolean\") {\n            value[key] = customOptions[key];\n        }\n        return value;\n    }, options.params);\n    // now remove all properties in options that don't exist in IRequestOptions\n    return requestOptionsKeys.reduce(function (value, key) {\n        if (options[key]) {\n            value[key] = options[key];\n        }\n        return value;\n    }, {});\n}\n//# sourceMappingURL=append-custom-params.js.map","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Helper method to ensure that user supplied urls don't include whitespace or a trailing slash.\n */\nexport function cleanUrl(url) {\n    // Guard so we don't try to trim something that's not a string\n    if (typeof url !== \"string\") {\n        return url;\n    }\n    // trim leading and trailing spaces, but not spaces inside the url\n    url = url.trim();\n    // remove the trailing slash to the url if one was included\n    if (url[url.length - 1] === \"/\") {\n        url = url.slice(0, -1);\n    }\n    return url;\n}\n//# sourceMappingURL=clean-url.js.map","/* Copyright (c) 2017-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nexport function decodeParam(param) {\n    var _a = param.split(\"=\"), key = _a[0], value = _a[1];\n    return { key: decodeURIComponent(key), value: decodeURIComponent(value) };\n}\n/**\n * Decodes the passed query string as an object.\n *\n * @param query A string to be decoded.\n * @returns A decoded query param object.\n */\nexport function decodeQueryString(query) {\n    return query\n        .replace(/^#/, \"\")\n        .split(\"&\")\n        .reduce(function (acc, entry) {\n        var _a = decodeParam(entry), key = _a.key, value = _a.value;\n        acc[key] = value;\n        return acc;\n    }, {});\n}\n//# sourceMappingURL=decode-query-string.js.map","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { request } from \"@esri/arcgis-rest-request\";\nexport function fetchToken(url, requestOptions) {\n    var options = requestOptions;\n    // we generate a response, so we can't return the raw response\n    options.rawResponse = false;\n    return request(url, options).then(function (response) {\n        var r = {\n            token: response.access_token,\n            username: response.username,\n            expires: new Date(\n            // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n            Date.now() + (response.expires_in * 1000 - 1000)),\n            ssl: response.ssl === true\n        };\n        if (response.refresh_token) {\n            r.refreshToken = response.refresh_token;\n        }\n        return r;\n    });\n}\n//# sourceMappingURL=fetch-token.js.map","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { request, NODEJS_DEFAULT_REFERER_HEADER, } from \"@esri/arcgis-rest-request\";\nexport function generateToken(url, requestOptions) {\n    var options = requestOptions;\n    /* istanbul ignore else */\n    if (typeof window !== \"undefined\" &&\n        window.location &&\n        window.location.host) {\n        options.params.referer = window.location.host;\n    }\n    else {\n        options.params.referer = NODEJS_DEFAULT_REFERER_HEADER;\n    }\n    return request(url, options);\n}\n//# sourceMappingURL=generate-token.js.map","import { cleanUrl } from \"@esri/arcgis-rest-request\";\n/**\n * Used to test if a URL is an ArcGIS Online URL\n */\nvar arcgisOnlineUrlRegex = /^https?:\\/\\/(\\S+)\\.arcgis\\.com.+/;\n/**\n * Used to test if a URL is production ArcGIS Online Portal\n */\nvar arcgisOnlinePortalRegex = /^https?:\\/\\/(dev|devext|qa|qaext|www)\\.arcgis\\.com\\/sharing\\/rest+/;\n/**\n * Used to test if a URL is an ArcGIS Online Organization Portal\n */\nvar arcgisOnlineOrgPortalRegex = /^https?:\\/\\/(?:[a-z0-9-]+\\.maps(dev|devext|qa|qaext)?)?.arcgis\\.com\\/sharing\\/rest/;\nexport function isOnline(url) {\n    return arcgisOnlineUrlRegex.test(url);\n}\nexport function normalizeOnlinePortalUrl(portalUrl) {\n    if (!arcgisOnlineUrlRegex.test(portalUrl)) {\n        return portalUrl;\n    }\n    switch (getOnlineEnvironment(portalUrl)) {\n        case \"dev\":\n            return \"https://devext.arcgis.com/sharing/rest\";\n        case \"qa\":\n            return \"https://qaext.arcgis.com/sharing/rest\";\n        default:\n            return \"https://www.arcgis.com/sharing/rest\";\n    }\n}\nexport function getOnlineEnvironment(url) {\n    if (!arcgisOnlineUrlRegex.test(url)) {\n        return null;\n    }\n    var match = url.match(arcgisOnlineUrlRegex);\n    var subdomain = match[1].split(\".\").pop();\n    if (subdomain.includes(\"dev\")) {\n        return \"dev\";\n    }\n    if (subdomain.includes(\"qa\")) {\n        return \"qa\";\n    }\n    return \"production\";\n}\nexport function isFederated(owningSystemUrl, portalUrl) {\n    var normalizedPortalUrl = cleanUrl(normalizeOnlinePortalUrl(portalUrl)).replace(/https?:\\/\\//, \"\");\n    var normalizedOwningSystemUrl = cleanUrl(owningSystemUrl).replace(/https?:\\/\\//, \"\");\n    return new RegExp(normalizedOwningSystemUrl, \"i\").test(normalizedPortalUrl);\n}\nexport function canUseOnlineToken(portalUrl, requestUrl) {\n    var portalIsOnline = isOnline(portalUrl);\n    var requestIsOnline = isOnline(requestUrl);\n    var portalEnv = getOnlineEnvironment(portalUrl);\n    var requestEnv = getOnlineEnvironment(requestUrl);\n    if (portalIsOnline && requestIsOnline && portalEnv === requestEnv) {\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=federation-utils.js.map","/* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { request } from \"@esri/arcgis-rest-request\";\n/**\n * Validates that the user has access to the application\n * and if they user should be presented a \"View Only\" mode\n *\n * This is only needed/valid for Esri applications that are \"licensed\"\n * and shipped in ArcGIS Online or ArcGIS Enterprise. Most custom applications\n * should not need or use this.\n *\n * ```js\n * import { validateAppAccess } from '@esri/arcgis-rest-auth';\n *\n * return validateAppAccess('your-token', 'theClientId')\n * .then((result) => {\n *    if (!result.value) {\n *      // redirect or show some other ui\n *    } else {\n *      if (result.viewOnlyUserTypeApp) {\n *        // use this to inform your app to show a \"View Only\" mode\n *      }\n *    }\n * })\n * .catch((err) => {\n *  // two possible errors\n *  // invalid clientId: {\"error\":{\"code\":400,\"messageCode\":\"GWM_0007\",\"message\":\"Invalid request\",\"details\":[]}}\n *  // invalid token: {\"error\":{\"code\":498,\"message\":\"Invalid token.\",\"details\":[]}}\n * })\n * ```\n *\n * Note: This is only usable by Esri applications hosted on *arcgis.com, *esri.com or within\n * an ArcGIS Enterprise installation. Custom applications can not use this.\n *\n * @param token platform token\n * @param clientId application client id\n * @param portal Optional\n */\nexport function validateAppAccess(token, clientId, portal) {\n    if (portal === void 0) { portal = \"https://www.arcgis.com/sharing/rest\"; }\n    var url = portal + \"/oauth2/validateAppAccess\";\n    var ro = {\n        method: \"POST\",\n        params: {\n            f: \"json\",\n            client_id: clientId,\n            token: token,\n        },\n    };\n    return request(url, ro);\n}\n//# sourceMappingURL=validate-app-access.js.map","/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { __assign } from \"tslib\";\nimport { request, ArcGISAuthError, cleanUrl, encodeQueryString, decodeQueryString, } from \"@esri/arcgis-rest-request\";\nimport { generateToken } from \"./generate-token\";\nimport { fetchToken } from \"./fetch-token\";\nimport { canUseOnlineToken, isFederated } from \"./federation-utils\";\nimport { validateAppAccess } from \"./validate-app-access\";\nfunction defer() {\n    var deferred = {\n        promise: null,\n        resolve: null,\n        reject: null,\n    };\n    deferred.promise = new Promise(function (resolve, reject) {\n        deferred.resolve = resolve;\n        deferred.reject = reject;\n    });\n    return deferred;\n}\n/**\n * ```js\n * import { UserSession } from '@esri/arcgis-rest-auth';\n * UserSession.beginOAuth2({\n *   // register an app of your own to create a unique clientId\n *   clientId: \"abc123\",\n *   redirectUri: 'https://yourapp.com/authenticate.html'\n * })\n *   .then(session)\n * // or\n * new UserSession({\n *   username: \"jsmith\",\n *   password: \"123456\"\n * })\n * // or\n * UserSession.deserialize(cache)\n * ```\n * Used to authenticate both ArcGIS Online and ArcGIS Enterprise users. `UserSession` includes helper methods for [OAuth 2.0](/arcgis-rest-js/guides/browser-authentication/) in both browser and server applications.\n */\nvar UserSession = /** @class */ (function () {\n    function UserSession(options) {\n        this.clientId = options.clientId;\n        this._refreshToken = options.refreshToken;\n        this._refreshTokenExpires = options.refreshTokenExpires;\n        this.username = options.username;\n        this.password = options.password;\n        this._token = options.token;\n        this._tokenExpires = options.tokenExpires;\n        this.portal = options.portal\n            ? cleanUrl(options.portal)\n            : \"https://www.arcgis.com/sharing/rest\";\n        this.ssl = options.ssl;\n        this.provider = options.provider || \"arcgis\";\n        this.tokenDuration = options.tokenDuration || 20160;\n        this.redirectUri = options.redirectUri;\n        this.refreshTokenTTL = options.refreshTokenTTL || 20160;\n        this.server = options.server;\n        this.federatedServers = {};\n        this.trustedDomains = [];\n        // if a non-federated server was passed explicitly, it should be trusted.\n        if (options.server) {\n            // if the url includes more than '/arcgis/', trim the rest\n            var root = this.getServerRootUrl(options.server);\n            this.federatedServers[root] = {\n                token: options.token,\n                expires: options.tokenExpires,\n            };\n        }\n        this._pendingTokenRequests = {};\n    }\n    Object.defineProperty(UserSession.prototype, \"token\", {\n        /**\n         * The current ArcGIS Online or ArcGIS Enterprise `token`.\n         */\n        get: function () {\n            return this._token;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(UserSession.prototype, \"tokenExpires\", {\n        /**\n         * The expiration time of the current `token`.\n         */\n        get: function () {\n            return this._tokenExpires;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(UserSession.prototype, \"refreshToken\", {\n        /**\n         * The current token to ArcGIS Online or ArcGIS Enterprise.\n         */\n        get: function () {\n            return this._refreshToken;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(UserSession.prototype, \"refreshTokenExpires\", {\n        /**\n         * The expiration time of the current `refreshToken`.\n         */\n        get: function () {\n            return this._refreshTokenExpires;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(UserSession.prototype, \"trustedServers\", {\n        /**\n         * Deprecated, use `federatedServers` instead.\n         *\n         * @deprecated\n         */\n        get: function () {\n            console.log(\"DEPRECATED: use federatedServers instead\");\n            return this.federatedServers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Begins a new browser-based OAuth 2.0 sign in. If `options.popup` is `true` the\n     * authentication window will open in a new tab/window and the function will return\n     * Promise&lt;UserSession&gt;. Otherwise, the user will be redirected to the\n     * authorization page in their current tab/window and the function will return `undefined`.\n     *\n     * @browserOnly\n     */\n    /* istanbul ignore next */\n    UserSession.beginOAuth2 = function (options, win) {\n        if (win === void 0) { win = window; }\n        if (options.duration) {\n            console.log(\"DEPRECATED: 'duration' is deprecated - use 'expiration' instead\");\n        }\n        var _a = __assign({\n            portal: \"https://www.arcgis.com/sharing/rest\",\n            provider: \"arcgis\",\n            expiration: 20160,\n            popup: true,\n            popupWindowFeatures: \"height=400,width=600,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes\",\n            state: options.clientId,\n            locale: \"\",\n        }, options), portal = _a.portal, provider = _a.provider, clientId = _a.clientId, expiration = _a.expiration, redirectUri = _a.redirectUri, popup = _a.popup, popupWindowFeatures = _a.popupWindowFeatures, state = _a.state, locale = _a.locale, params = _a.params;\n        var url;\n        if (provider === \"arcgis\") {\n            url = portal + \"/oauth2/authorize?client_id=\" + clientId + \"&response_type=token&expiration=\" + (options.duration || expiration) + \"&redirect_uri=\" + encodeURIComponent(redirectUri) + \"&state=\" + state + \"&locale=\" + locale;\n        }\n        else {\n            url = portal + \"/oauth2/social/authorize?client_id=\" + clientId + \"&socialLoginProviderName=\" + provider + \"&autoAccountCreateForSocial=true&response_type=token&expiration=\" + (options.duration || expiration) + \"&redirect_uri=\" + encodeURIComponent(redirectUri) + \"&state=\" + state + \"&locale=\" + locale;\n        }\n        // append additional params\n        if (params) {\n            url = url + \"&\" + encodeQueryString(params);\n        }\n        if (!popup) {\n            win.location.href = url;\n            return undefined;\n        }\n        var session = defer();\n        win[\"__ESRI_REST_AUTH_HANDLER_\" + clientId] = function (errorString, oauthInfoString) {\n            if (errorString) {\n                var error = JSON.parse(errorString);\n                session.reject(new ArcGISAuthError(error.errorMessage, error.error));\n                return;\n            }\n            if (oauthInfoString) {\n                var oauthInfo = JSON.parse(oauthInfoString);\n                session.resolve(new UserSession({\n                    clientId: clientId,\n                    portal: portal,\n                    ssl: oauthInfo.ssl,\n                    token: oauthInfo.token,\n                    tokenExpires: new Date(oauthInfo.expires),\n                    username: oauthInfo.username,\n                }));\n            }\n        };\n        win.open(url, \"oauth-window\", popupWindowFeatures);\n        return session.promise;\n    };\n    /**\n     * Completes a browser-based OAuth 2.0 sign in. If `options.popup` is `true` the user\n     * will be returned to the previous window. Otherwise a new `UserSession`\n     * will be returned. You must pass the same values for `options.popup` and\n     * `options.portal` as you used in `beginOAuth2()`.\n     *\n     * @browserOnly\n     */\n    /* istanbul ignore next */\n    UserSession.completeOAuth2 = function (options, win) {\n        if (win === void 0) { win = window; }\n        var _a = __assign({ portal: \"https://www.arcgis.com/sharing/rest\", popup: true }, options), portal = _a.portal, clientId = _a.clientId, popup = _a.popup;\n        function completeSignIn(error, oauthInfo) {\n            try {\n                var handlerFn = void 0;\n                var handlerFnName = \"__ESRI_REST_AUTH_HANDLER_\" + clientId;\n                if (popup) {\n                    // Guard b/c IE does not support window.opener\n                    if (win.opener) {\n                        if (win.opener.parent && win.opener.parent[handlerFnName]) {\n                            handlerFn = win.opener.parent[handlerFnName];\n                        }\n                        else if (win.opener && win.opener[handlerFnName]) {\n                            // support pop-out oauth from within an iframe\n                            handlerFn = win.opener[handlerFnName];\n                        }\n                    }\n                    else {\n                        // IE\n                        if (win !== win.parent && win.parent && win.parent[handlerFnName]) {\n                            handlerFn = win.parent[handlerFnName];\n                        }\n                    }\n                    // if we have a handler fn, call it and close the window\n                    if (handlerFn) {\n                        handlerFn(error ? JSON.stringify(error) : undefined, JSON.stringify(oauthInfo));\n                        win.close();\n                        return undefined;\n                    }\n                }\n            }\n            catch (e) {\n                throw new ArcGISAuthError(\"Unable to complete authentication. It's possible you specified popup based oAuth2 but no handler from \\\"beginOAuth2()\\\" present. This generally happens because the \\\"popup\\\" option differs between \\\"beginOAuth2()\\\" and \\\"completeOAuth2()\\\".\");\n            }\n            if (error) {\n                throw new ArcGISAuthError(error.errorMessage, error.error);\n            }\n            return new UserSession({\n                clientId: clientId,\n                portal: portal,\n                ssl: oauthInfo.ssl,\n                token: oauthInfo.token,\n                tokenExpires: oauthInfo.expires,\n                username: oauthInfo.username,\n            });\n        }\n        var params = decodeQueryString(win.location.hash);\n        if (!params.access_token) {\n            var error = void 0;\n            var errorMessage = \"Unknown error\";\n            if (params.error) {\n                error = params.error;\n                errorMessage = params.error_description;\n            }\n            return completeSignIn({ error: error, errorMessage: errorMessage });\n        }\n        var token = params.access_token;\n        var expires = new Date(Date.now() + parseInt(params.expires_in, 10) * 1000 - 60 * 1000);\n        var username = params.username;\n        var ssl = params.ssl === \"true\";\n        return completeSignIn(undefined, {\n            token: token,\n            expires: expires,\n            ssl: ssl,\n            username: username,\n        });\n    };\n    /**\n     * Request session information from the parent application\n     *\n     * When an application is embedded into another application via an IFrame, the embedded app can\n     * use `window.postMessage` to request credentials from the host application. This function wraps\n     * that behavior.\n     *\n     * The ArcGIS API for Javascript has this built into the Identity Manager as of the 4.19 release.\n     *\n     * Note: The parent application will not respond if the embedded app's origin is not:\n     * - the same origin as the parent or *.arcgis.com (JSAPI)\n     * - in the list of valid child origins (REST-JS)\n     *\n     *\n     * @param parentOrigin origin of the parent frame. Passed into the embedded application as `parentOrigin` query param\n     * @browserOnly\n     */\n    UserSession.fromParent = function (parentOrigin, win) {\n        /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n        if (!win && window) {\n            win = window;\n        }\n        // Declare handler outside of promise scope so we can detach it\n        var handler;\n        // return a promise that will resolve when the handler receives\n        // session information from the correct origin\n        return new Promise(function (resolve, reject) {\n            // create an event handler that just wraps the parentMessageHandler\n            handler = function (event) {\n                // ensure we only listen to events from the parent\n                if (event.source === win.parent && event.data) {\n                    try {\n                        return resolve(UserSession.parentMessageHandler(event));\n                    }\n                    catch (err) {\n                        return reject(err);\n                    }\n                }\n            };\n            // add listener\n            win.addEventListener(\"message\", handler, false);\n            win.parent.postMessage({ type: \"arcgis:auth:requestCredential\" }, parentOrigin);\n        }).then(function (session) {\n            win.removeEventListener(\"message\", handler, false);\n            return session;\n        });\n    };\n    /**\n     * Begins a new server-based OAuth 2.0 sign in. This will redirect the user to\n     * the ArcGIS Online or ArcGIS Enterprise authorization page.\n     *\n     * @nodeOnly\n     */\n    UserSession.authorize = function (options, response) {\n        if (options.duration) {\n            console.log(\"DEPRECATED: 'duration' is deprecated - use 'expiration' instead\");\n        }\n        var _a = __assign({ portal: \"https://arcgis.com/sharing/rest\", expiration: 20160 }, options), portal = _a.portal, clientId = _a.clientId, expiration = _a.expiration, redirectUri = _a.redirectUri;\n        response.writeHead(301, {\n            Location: portal + \"/oauth2/authorize?client_id=\" + clientId + \"&expiration=\" + (options.duration || expiration) + \"&response_type=code&redirect_uri=\" + encodeURIComponent(redirectUri),\n        });\n        response.end();\n    };\n    /**\n     * Completes the server-based OAuth 2.0 sign in process by exchanging the `authorizationCode`\n     * for a `access_token`.\n     *\n     * @nodeOnly\n     */\n    UserSession.exchangeAuthorizationCode = function (options, authorizationCode) {\n        var _a = __assign({\n            portal: \"https://www.arcgis.com/sharing/rest\",\n            refreshTokenTTL: 20160,\n        }, options), portal = _a.portal, clientId = _a.clientId, redirectUri = _a.redirectUri, refreshTokenTTL = _a.refreshTokenTTL;\n        return fetchToken(portal + \"/oauth2/token\", {\n            params: {\n                grant_type: \"authorization_code\",\n                client_id: clientId,\n                redirect_uri: redirectUri,\n                code: authorizationCode,\n            },\n        }).then(function (response) {\n            return new UserSession({\n                clientId: clientId,\n                portal: portal,\n                ssl: response.ssl,\n                redirectUri: redirectUri,\n                refreshToken: response.refreshToken,\n                refreshTokenTTL: refreshTokenTTL,\n                refreshTokenExpires: new Date(Date.now() + (refreshTokenTTL - 1) * 60 * 1000),\n                token: response.token,\n                tokenExpires: response.expires,\n                username: response.username,\n            });\n        });\n    };\n    UserSession.deserialize = function (str) {\n        var options = JSON.parse(str);\n        return new UserSession({\n            clientId: options.clientId,\n            refreshToken: options.refreshToken,\n            refreshTokenExpires: new Date(options.refreshTokenExpires),\n            username: options.username,\n            password: options.password,\n            token: options.token,\n            tokenExpires: new Date(options.tokenExpires),\n            portal: options.portal,\n            ssl: options.ssl,\n            tokenDuration: options.tokenDuration,\n            redirectUri: options.redirectUri,\n            refreshTokenTTL: options.refreshTokenTTL,\n        });\n    };\n    /**\n     * Translates authentication from the format used in the [ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/).\n     *\n     * ```js\n     * UserSession.fromCredential({\n     *   userId: \"jsmith\",\n     *   token: \"secret\"\n     * });\n     * ```\n     *\n     * @returns UserSession\n     */\n    UserSession.fromCredential = function (credential) {\n        // At ArcGIS Online 9.1, credentials no longer include the ssl and expires properties\n        // Here, we provide default values for them to cover this condition\n        var ssl = typeof credential.ssl !== \"undefined\" ? credential.ssl : true;\n        var expires = credential.expires || Date.now() + 7200000; /* 2 hours */\n        return new UserSession({\n            portal: credential.server.includes(\"sharing/rest\")\n                ? credential.server\n                : credential.server + \"/sharing/rest\",\n            ssl: ssl,\n            token: credential.token,\n            username: credential.userId,\n            tokenExpires: new Date(expires),\n        });\n    };\n    /**\n     * Handle the response from the parent\n     * @param event DOM Event\n     */\n    UserSession.parentMessageHandler = function (event) {\n        if (event.data.type === \"arcgis:auth:credential\") {\n            return UserSession.fromCredential(event.data.credential);\n        }\n        if (event.data.type === \"arcgis:auth:error\") {\n            var err = new Error(event.data.error.message);\n            err.name = event.data.error.name;\n            throw err;\n        }\n        else {\n            throw new Error(\"Unknown message type.\");\n        }\n    };\n    /**\n     * Returns authentication in a format useable in the [ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/).\n     *\n     * ```js\n     * esriId.registerToken(session.toCredential());\n     * ```\n     *\n     * @returns ICredential\n     */\n    UserSession.prototype.toCredential = function () {\n        return {\n            expires: this.tokenExpires.getTime(),\n            server: this.portal,\n            ssl: this.ssl,\n            token: this.token,\n            userId: this.username,\n        };\n    };\n    /**\n     * Returns information about the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic.\n     *\n     * ```js\n     * session.getUser()\n     *   .then(response => {\n     *     console.log(response.role); // \"org_admin\"\n     *   })\n     * ```\n     *\n     * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n     * @returns A Promise that will resolve with the data from the response.\n     */\n    UserSession.prototype.getUser = function (requestOptions) {\n        var _this = this;\n        if (this._pendingUserRequest) {\n            return this._pendingUserRequest;\n        }\n        else if (this._user) {\n            return Promise.resolve(this._user);\n        }\n        else {\n            var url = this.portal + \"/community/self\";\n            var options = __assign(__assign({ httpMethod: \"GET\", authentication: this }, requestOptions), { rawResponse: false });\n            this._pendingUserRequest = request(url, options).then(function (response) {\n                _this._user = response;\n                _this._pendingUserRequest = null;\n                return response;\n            });\n            return this._pendingUserRequest;\n        }\n    };\n    /**\n     * Returns information about the currently logged in user's [portal](https://developers.arcgis.com/rest/users-groups-and-items/portal-self.htm). Subsequent calls will *not* result in additional web traffic.\n     *\n     * ```js\n     * session.getPortal()\n     *   .then(response => {\n     *     console.log(portal.name); // \"City of ...\"\n     *   })\n     * ```\n     *\n     * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n     * @returns A Promise that will resolve with the data from the response.\n     */\n    UserSession.prototype.getPortal = function (requestOptions) {\n        var _this = this;\n        if (this._pendingPortalRequest) {\n            return this._pendingPortalRequest;\n        }\n        else if (this._portalInfo) {\n            return Promise.resolve(this._portalInfo);\n        }\n        else {\n            var url = this.portal + \"/portals/self\";\n            var options = __assign(__assign({ httpMethod: \"GET\", authentication: this }, requestOptions), { rawResponse: false });\n            this._pendingPortalRequest = request(url, options).then(function (response) {\n                _this._portalInfo = response;\n                _this._pendingPortalRequest = null;\n                return response;\n            });\n            return this._pendingPortalRequest;\n        }\n    };\n    /**\n     * Returns the username for the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic. This is also used internally when a username is required for some requests but is not present in the options.\n     *\n     *    * ```js\n     * session.getUsername()\n     *   .then(response => {\n     *     console.log(response); // \"casey_jones\"\n     *   })\n     * ```\n     */\n    UserSession.prototype.getUsername = function () {\n        if (this.username) {\n            return Promise.resolve(this.username);\n        }\n        else if (this._user) {\n            return Promise.resolve(this._user.username);\n        }\n        else {\n            return this.getUser().then(function (user) {\n                return user.username;\n            });\n        }\n    };\n    /**\n     * Gets an appropriate token for the given URL. If `portal` is ArcGIS Online and\n     * the request is to an ArcGIS Online domain `token` will be used. If the request\n     * is to the current `portal` the current `token` will also be used. However if\n     * the request is to an unknown server we will validate the server with a request\n     * to our current `portal`.\n     */\n    UserSession.prototype.getToken = function (url, requestOptions) {\n        if (canUseOnlineToken(this.portal, url)) {\n            return this.getFreshToken(requestOptions);\n        }\n        else if (new RegExp(this.portal, \"i\").test(url)) {\n            return this.getFreshToken(requestOptions);\n        }\n        else {\n            return this.getTokenForServer(url, requestOptions);\n        }\n    };\n    /**\n     * Get application access information for the current user\n     * see `validateAppAccess` function for details\n     *\n     * @param clientId application client id\n     */\n    UserSession.prototype.validateAppAccess = function (clientId) {\n        return this.getToken(this.portal).then(function (token) {\n            return validateAppAccess(token, clientId);\n        });\n    };\n    UserSession.prototype.toJSON = function () {\n        return {\n            clientId: this.clientId,\n            refreshToken: this.refreshToken,\n            refreshTokenExpires: this.refreshTokenExpires,\n            username: this.username,\n            password: this.password,\n            token: this.token,\n            tokenExpires: this.tokenExpires,\n            portal: this.portal,\n            ssl: this.ssl,\n            tokenDuration: this.tokenDuration,\n            redirectUri: this.redirectUri,\n            refreshTokenTTL: this.refreshTokenTTL,\n        };\n    };\n    UserSession.prototype.serialize = function () {\n        return JSON.stringify(this);\n    };\n    /**\n     * For a \"Host\" app that embeds other platform apps via iframes, after authenticating the user\n     * and creating a UserSession, the app can then enable \"post message\" style authentication by calling\n     * this method.\n     *\n     * Internally this adds an event listener on window for the `message` event\n     *\n     * @param validChildOrigins Array of origins that are allowed to request authentication from the host app\n     */\n    UserSession.prototype.enablePostMessageAuth = function (validChildOrigins, win) {\n        /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n        if (!win && window) {\n            win = window;\n        }\n        this._hostHandler = this.createPostMessageHandler(validChildOrigins);\n        win.addEventListener(\"message\", this._hostHandler, false);\n    };\n    /**\n     * For a \"Host\" app that has embedded other platform apps via iframes, when the host needs\n     * to transition routes, it should call `UserSession.disablePostMessageAuth()` to remove\n     * the event listener and prevent memory leaks\n     */\n    UserSession.prototype.disablePostMessageAuth = function (win) {\n        /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n        if (!win && window) {\n            win = window;\n        }\n        win.removeEventListener(\"message\", this._hostHandler, false);\n    };\n    /**\n     * Manually refreshes the current `token` and `tokenExpires`.\n     */\n    UserSession.prototype.refreshSession = function (requestOptions) {\n        // make sure subsequent calls to getUser() don't returned cached metadata\n        this._user = null;\n        if (this.username && this.password) {\n            return this.refreshWithUsernameAndPassword(requestOptions);\n        }\n        if (this.clientId && this.refreshToken) {\n            return this.refreshWithRefreshToken();\n        }\n        return Promise.reject(new ArcGISAuthError(\"Unable to refresh token.\"));\n    };\n    /**\n     * Determines the root of the ArcGIS Server or Portal for a given URL.\n     *\n     * @param url the URl to determine the root url for.\n     */\n    UserSession.prototype.getServerRootUrl = function (url) {\n        var root = cleanUrl(url).split(/\\/rest(\\/admin)?\\/services(?:\\/|#|\\?|$)/)[0];\n        var _a = root.match(/(https?:\\/\\/)(.+)/), match = _a[0], protocol = _a[1], domainAndPath = _a[2];\n        var _b = domainAndPath.split(\"/\"), domain = _b[0], path = _b.slice(1);\n        // only the domain is lowercased because in some cases an org id might be\n        // in the path which cannot be lowercased.\n        return \"\" + protocol + domain.toLowerCase() + \"/\" + path.join(\"/\");\n    };\n    /**\n     * Returns the proper [`credentials`] option for `fetch` for a given domain.\n     * See [trusted server](https://enterprise.arcgis.com/en/portal/latest/administer/windows/configure-security.htm#ESRI_SECTION1_70CC159B3540440AB325BE5D89DBE94A).\n     * Used internally by underlying request methods to add support for specific security considerations.\n     *\n     * @param url The url of the request\n     * @returns \"include\" or \"same-origin\"\n     */\n    UserSession.prototype.getDomainCredentials = function (url) {\n        if (!this.trustedDomains || !this.trustedDomains.length) {\n            return \"same-origin\";\n        }\n        return this.trustedDomains.some(function (domainWithProtocol) {\n            return url.startsWith(domainWithProtocol);\n        })\n            ? \"include\"\n            : \"same-origin\";\n    };\n    /**\n     * Return a function that closes over the validOrigins array and\n     * can be used as an event handler for the `message` event\n     *\n     * @param validOrigins Array of valid origins\n     */\n    UserSession.prototype.createPostMessageHandler = function (validOrigins) {\n        var _this = this;\n        // return a function that closes over the validOrigins and\n        // has access to the credential\n        return function (event) {\n            // Verify that the origin is valid\n            // Note: do not use regex's here. validOrigins is an array so we're checking that the event's origin\n            // is in the array via exact match. More info about avoiding postMessage xss issues here\n            // https://jlajara.gitlab.io/web/2020/07/17/Dom_XSS_PostMessage_2.html#tipsbypasses-in-postmessage-vulnerabilities\n            var isValidOrigin = validOrigins.indexOf(event.origin) > -1;\n            // JSAPI handles this slightly differently - instead of checking a list, it will respond if\n            // event.origin === window.location.origin || event.origin.endsWith('.arcgis.com')\n            // For Hub, and to enable cross domain debugging with port's in urls, we are opting to\n            // use a list of valid origins\n            // Ensure the message type is something we want to handle\n            var isValidType = event.data.type === \"arcgis:auth:requestCredential\";\n            var isTokenValid = _this.tokenExpires.getTime() > Date.now();\n            if (isValidOrigin && isValidType) {\n                var msg = {};\n                if (isTokenValid) {\n                    var credential = _this.toCredential();\n                    // arcgis:auth:error with {name: \"\", message: \"\"}\n                    // the following line allows us to conform to our spec without changing other depended-on functionality\n                    // https://github.com/Esri/arcgis-rest-js/blob/master/packages/arcgis-rest-auth/post-message-auth-spec.md#arcgisauthcredential\n                    credential.server = credential.server.replace(\"/sharing/rest\", \"\");\n                    msg = { type: \"arcgis:auth:credential\", credential: credential };\n                }\n                else {\n                    // Return an error\n                    msg = {\n                        type: \"arcgis:auth:error\",\n                        error: {\n                            name: \"tokenExpiredError\",\n                            message: \"Session token was expired, and not returned to the child application\",\n                        },\n                    };\n                }\n                event.source.postMessage(msg, event.origin);\n            }\n        };\n    };\n    /**\n     * Validates that a given URL is properly federated with our current `portal`.\n     * Attempts to use the internal `federatedServers` cache first.\n     */\n    UserSession.prototype.getTokenForServer = function (url, requestOptions) {\n        var _this = this;\n        // requests to /rest/services/ and /rest/admin/services/ are both valid\n        // Federated servers may have inconsistent casing, so lowerCase it\n        var root = this.getServerRootUrl(url);\n        var existingToken = this.federatedServers[root];\n        if (existingToken &&\n            existingToken.expires &&\n            existingToken.expires.getTime() > Date.now()) {\n            return Promise.resolve(existingToken.token);\n        }\n        if (this._pendingTokenRequests[root]) {\n            return this._pendingTokenRequests[root];\n        }\n        this._pendingTokenRequests[root] = this.fetchAuthorizedDomains().then(function () {\n            return request(root + \"/rest/info\", {\n                credentials: _this.getDomainCredentials(url),\n            })\n                .then(function (response) {\n                if (response.owningSystemUrl) {\n                    /**\n                     * if this server is not owned by this portal\n                     * bail out with an error since we know we wont\n                     * be able to generate a token\n                     */\n                    if (!isFederated(response.owningSystemUrl, _this.portal)) {\n                        throw new ArcGISAuthError(url + \" is not federated with \" + _this.portal + \".\", \"NOT_FEDERATED\");\n                    }\n                    else {\n                        /**\n                         * if the server is federated, use the relevant token endpoint.\n                         */\n                        return request(response.owningSystemUrl + \"/sharing/rest/info\", requestOptions);\n                    }\n                }\n                else if (response.authInfo &&\n                    _this.federatedServers[root] !== undefined) {\n                    /**\n                     * if its a stand-alone instance of ArcGIS Server that doesn't advertise\n                     * federation, but the root server url is recognized, use its built in token endpoint.\n                     */\n                    return Promise.resolve({\n                        authInfo: response.authInfo,\n                    });\n                }\n                else {\n                    throw new ArcGISAuthError(url + \" is not federated with any portal and is not explicitly trusted.\", \"NOT_FEDERATED\");\n                }\n            })\n                .then(function (response) {\n                return response.authInfo.tokenServicesUrl;\n            })\n                .then(function (tokenServicesUrl) {\n                // an expired token cant be used to generate a new token\n                if (_this.token && _this.tokenExpires.getTime() > Date.now()) {\n                    return generateToken(tokenServicesUrl, {\n                        params: {\n                            token: _this.token,\n                            serverUrl: url,\n                            expiration: _this.tokenDuration,\n                            client: \"referer\",\n                        },\n                    });\n                    // generate an entirely fresh token if necessary\n                }\n                else {\n                    return generateToken(tokenServicesUrl, {\n                        params: {\n                            username: _this.username,\n                            password: _this.password,\n                            expiration: _this.tokenDuration,\n                            client: \"referer\",\n                        },\n                    }).then(function (response) {\n                        _this._token = response.token;\n                        _this._tokenExpires = new Date(response.expires);\n                        return response;\n                    });\n                }\n            })\n                .then(function (response) {\n                _this.federatedServers[root] = {\n                    expires: new Date(response.expires),\n                    token: response.token,\n                };\n                delete _this._pendingTokenRequests[root];\n                return response.token;\n            });\n        });\n        return this._pendingTokenRequests[root];\n    };\n    /**\n     * Returns an unexpired token for the current `portal`.\n     */\n    UserSession.prototype.getFreshToken = function (requestOptions) {\n        var _this = this;\n        if (this.token && !this.tokenExpires) {\n            return Promise.resolve(this.token);\n        }\n        if (this.token &&\n            this.tokenExpires &&\n            this.tokenExpires.getTime() > Date.now()) {\n            return Promise.resolve(this.token);\n        }\n        if (!this._pendingTokenRequests[this.portal]) {\n            this._pendingTokenRequests[this.portal] = this.refreshSession(requestOptions).then(function (session) {\n                _this._pendingTokenRequests[_this.portal] = null;\n                return session.token;\n            });\n        }\n        return this._pendingTokenRequests[this.portal];\n    };\n    /**\n     * Refreshes the current `token` and `tokenExpires` with `username` and\n     * `password`.\n     */\n    UserSession.prototype.refreshWithUsernameAndPassword = function (requestOptions) {\n        var _this = this;\n        var options = __assign({ params: {\n                username: this.username,\n                password: this.password,\n                expiration: this.tokenDuration,\n            } }, requestOptions);\n        return generateToken(this.portal + \"/generateToken\", options).then(function (response) {\n            _this._token = response.token;\n            _this._tokenExpires = new Date(response.expires);\n            return _this;\n        });\n    };\n    /**\n     * Refreshes the current `token` and `tokenExpires` with `refreshToken`.\n     */\n    UserSession.prototype.refreshWithRefreshToken = function (requestOptions) {\n        var _this = this;\n        if (this.refreshToken &&\n            this.refreshTokenExpires &&\n            this.refreshTokenExpires.getTime() < Date.now()) {\n            return this.refreshRefreshToken(requestOptions);\n        }\n        var options = __assign({ params: {\n                client_id: this.clientId,\n                refresh_token: this.refreshToken,\n                grant_type: \"refresh_token\",\n            } }, requestOptions);\n        return fetchToken(this.portal + \"/oauth2/token\", options).then(function (response) {\n            _this._token = response.token;\n            _this._tokenExpires = response.expires;\n            return _this;\n        });\n    };\n    /**\n     * Exchanges an unexpired `refreshToken` for a new one, also updates `token` and\n     * `tokenExpires`.\n     */\n    UserSession.prototype.refreshRefreshToken = function (requestOptions) {\n        var _this = this;\n        var options = __assign({ params: {\n                client_id: this.clientId,\n                refresh_token: this.refreshToken,\n                redirect_uri: this.redirectUri,\n                grant_type: \"exchange_refresh_token\",\n            } }, requestOptions);\n        return fetchToken(this.portal + \"/oauth2/token\", options).then(function (response) {\n            _this._token = response.token;\n            _this._tokenExpires = response.expires;\n            _this._refreshToken = response.refreshToken;\n            _this._refreshTokenExpires = new Date(Date.now() + (_this.refreshTokenTTL - 1) * 60 * 1000);\n            return _this;\n        });\n    };\n    /**\n     * ensures that the authorizedCrossOriginDomains are obtained from the portal and cached\n     * so we can check them later.\n     *\n     * @returns this\n     */\n    UserSession.prototype.fetchAuthorizedDomains = function () {\n        var _this = this;\n        // if this token is for a specific server or we don't have a portal\n        // don't get the portal info because we cant get the authorizedCrossOriginDomains\n        if (this.server || !this.portal) {\n            return Promise.resolve(this);\n        }\n        return this.getPortal().then(function (portalInfo) {\n            /**\n             * Specific domains can be configured as secure.esri.com or https://secure.esri.com this\n             * normalizes to https://secure.esri.com so we can use startsWith later.\n             */\n            if (portalInfo.authorizedCrossOriginDomains &&\n                portalInfo.authorizedCrossOriginDomains.length) {\n                _this.trustedDomains = portalInfo.authorizedCrossOriginDomains\n                    .filter(function (d) { return !d.startsWith(\"http://\"); })\n                    .map(function (d) {\n                    if (d.startsWith(\"https://\")) {\n                        return d;\n                    }\n                    else {\n                        return \"https://\" + d;\n                    }\n                });\n            }\n            return _this;\n        });\n    };\n    return UserSession;\n}());\nexport { UserSession };\n//# sourceMappingURL=UserSession.js.map","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { cleanUrl } from \"@esri/arcgis-rest-request\";\n/**\n * Helper that returns the appropriate portal url for a given request. `requestOptions.portal` is given\n * precedence over `authentication.portal`. If neither `portal` nor `authentication` is present,\n * `www.arcgis.com/sharing/rest` is returned.\n *\n * @param requestOptions - Request options that may have authentication manager\n * @returns Portal url to be used in API requests\n */\nexport function getPortalUrl(requestOptions) {\n    if (requestOptions === void 0) { requestOptions = {}; }\n    // use portal in options if specified\n    if (requestOptions.portal) {\n        return cleanUrl(requestOptions.portal);\n    }\n    // if auth was passed, use that portal\n    if (requestOptions.authentication) {\n        // the portal url is already scrubbed in the auth package\n        return requestOptions.authentication.portal;\n    }\n    // default to arcgis.com\n    return \"https://www.arcgis.com/sharing/rest\";\n}\n//# sourceMappingURL=get-portal-url.js.map","// eslint-disable-next-line no-control-regex\nvar CONTROL_CHAR_MATCHER = /[\\x00-\\x1F\\x7F-\\x9F\\xA0]/g;\n/**\n * Returns a new string with all control characters removed.\n *\n * Doesn't remove characters from input string.\n *\n * @param str - the string to scrub\n */\nexport function scrubControlChars(str) {\n    return str.replace(CONTROL_CHAR_MATCHER, \"\");\n}\n//# sourceMappingURL=scrub-control-chars.js.map","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { __assign } from \"tslib\";\nimport { request, appendCustomParams } from \"@esri/arcgis-rest-request\";\nimport { getPortalUrl } from \"../util/get-portal-url\";\nimport { scrubControlChars } from '../util/scrub-control-chars';\nimport { determineOwner } from \"./helpers\";\n/**\n * ```\n * import { getItem } from \"@esri/arcgis-rest-portal\";\n * //\n * getItem(\"ae7\")\n *   .then(response);\n * // or\n * getItem(\"ae7\", { authentication })\n *   .then(response)\n * ```\n * Get an item by id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item.htm) for more information.\n *\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function getItem(id, requestOptions) {\n    var url = getItemBaseUrl(id, requestOptions);\n    // default to a GET request\n    var options = __assign({ httpMethod: \"GET\" }, requestOptions);\n    return request(url, options);\n}\n/**\n * Get the fully qualified base URL to the REST end point for an item.\n * @param id Item Id\n * @param portalUrlOrRequestOptions a portal URL or request options\n * @returns URL to the item's REST end point, defaults to `https://www.arcgis.com/sharing/rest/content/items/{id}`\n */\nexport var getItemBaseUrl = function (id, portalUrlOrRequestOptions) {\n    var portalUrl = typeof portalUrlOrRequestOptions === \"string\"\n        ? portalUrlOrRequestOptions\n        : getPortalUrl(portalUrlOrRequestOptions);\n    return portalUrl + \"/content/items/\" + id;\n};\n/**\n * ```\n * import { getItemData } from \"@esri/arcgis-rest-portal\";\n * //\n * getItemData(\"ae7\")\n *   .then(response)\n * // or\n * getItemData(\"ae7\", { authentication })\n *   .then(response)\n * ```\n * Get the /data for an item. If no data exists, returns `undefined`. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item-data.htm) for more information.\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the json data for the item.\n */\nexport function getItemData(id, requestOptions) {\n    var url = getItemBaseUrl(id, requestOptions) + \"/data\";\n    // default to a GET request\n    var options = __assign({ httpMethod: \"GET\", params: {} }, requestOptions);\n    if (options.file) {\n        options.params.f = null;\n    }\n    return request(url, options).catch(function (err) {\n        /* if the item doesn't include data, the response will be empty\n           and the internal call to response.json() will fail */\n        var emptyResponseErr = RegExp(/The string did not match the expected pattern|(Unexpected end of (JSON input|data at line 1 column 1))/i);\n        /* istanbul ignore else */\n        if (emptyResponseErr.test(err.message)) {\n            return;\n        }\n        else\n            throw err;\n    });\n}\n/**\n * ```\n * import { getRelatedItems } from \"@esri/arcgis-rest-portal\";\n * //\n * getRelatedItems({\n *   id: \"ae7\",\n *   relationshipType: \"Service2Layer\" // or several [\"Service2Layer\", \"Map2Area\"]\n * })\n *   .then(response)\n * ```\n * Get the related items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/related-items.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item resources.\n */\nexport function getRelatedItems(requestOptions) {\n    var url = getItemBaseUrl(requestOptions.id, requestOptions) + \"/relatedItems\";\n    var options = __assign({ httpMethod: \"GET\", params: {\n            direction: requestOptions.direction\n        } }, requestOptions);\n    if (typeof requestOptions.relationshipType === \"string\") {\n        options.params.relationshipType = requestOptions.relationshipType;\n    }\n    else {\n        options.params.relationshipTypes = requestOptions.relationshipType;\n    }\n    delete options.direction;\n    delete options.relationshipType;\n    return request(url, options);\n}\n/**\n * Get the resources associated with an item\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item resources.\n */\nexport function getItemResources(id, requestOptions) {\n    var url = getItemBaseUrl(id, requestOptions) + \"/resources\";\n    // Mix in num:1000 with any user supplied params\n    // Key thing - we don't want to mutate the passed in requestOptions\n    // as that may be used in other (subsequent) calls in the course\n    // of a long promise chains\n    var options = __assign({}, requestOptions);\n    options.params = __assign({ num: 1000 }, options.params);\n    return request(url, options);\n}\n/**\n * ```js\n * import { getItemResource } from \"@esri/arcgis-rest-portal\";\n *\n * // Parses contents as blob by default\n * getItemResource(\"3ef\", { fileName: \"resource.jpg\", ...})\n *  .then(resourceContents => {});\n *\n * // Can override parse method\n * getItemResource(\"3ef\", { fileName: \"resource.json\", readAs: 'json', ...})\n *  .then(resourceContents => {});\n *\n * // Get the response object instead\n * getItemResource(\"3ef\",{ rawResponse: true, fileName: \"resource.json\" })\n *  .then(response => {})\n * ```\n * Fetches an item resource and optionally parses it to the correct format.\n *\n * Note: provides JSON parse error protection by sanitizing out any unescaped control\n * characters before parsing that would otherwise cause an error to be thrown\n *\n * @param {string} itemId\n * @param {IGetItemResourceOptions} requestOptions\n */\nexport function getItemResource(itemId, requestOptions) {\n    var readAs = requestOptions.readAs || 'blob';\n    return getItemFile(itemId, \"/resources/\" + requestOptions.fileName, readAs, requestOptions);\n}\n/**\n * ```js\n * import { getItemGroups } from \"@esri/arcgis-rest-portal\";\n * //\n * getItemGroups(\"30e5fe3149c34df1ba922e6f5bbf808f\")\n *   .then(response)\n * ```\n * Lists the groups of which the item is a part, only showing the groups that the calling user can access. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/groups.htm) for more information.\n *\n * @param id - The Id of the item to query group association for.\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item groups.\n */\nexport function getItemGroups(id, requestOptions) {\n    var url = getItemBaseUrl(id, requestOptions) + \"/groups\";\n    return request(url, requestOptions);\n}\n/**\n * ```js\n * import { getItemStatus } from \"@esri/arcgis-rest-portal\";\n * //\n * getItemStatus({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   authentication\n * })\n *   .then(response)\n * ```\n * Inquire about status when publishing an item, adding an item in async mode, or adding with a multipart upload. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/status.htm) for more information.\n *\n * @param id - The Id of the item to get status for.\n * @param requestOptions - Options for the request\n * @returns A Promise to get the item status.\n */\nexport function getItemStatus(requestOptions) {\n    return determineOwner(requestOptions).then(function (owner) {\n        var url = getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.id + \"/status\";\n        var options = appendCustomParams(requestOptions, [\"jobId\", \"jobType\"], { params: __assign({}, requestOptions.params) });\n        return request(url, options);\n    });\n}\n/**\n * ```js\n * import { getItemParts } from \"@esri/arcgis-rest-portal\";\n * //\n * getItemParts({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   authentication\n * })\n *   .then(response)\n * ```\n * Lists the part numbers of the file parts that have already been uploaded in a multipart file upload. This method can be used to verify the parts that have been received as well as those parts that were not received by the server. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/parts.htm) for more information.\n *\n * @param id - The Id of the item to get part list.\n * @param requestOptions - Options for the request\n * @returns A Promise to get the item part list.\n */\nexport function getItemParts(requestOptions) {\n    return determineOwner(requestOptions).then(function (owner) {\n        var url = getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.id + \"/parts\";\n        return request(url, requestOptions);\n    });\n}\n/**\n * ```\n * import { getItemInfo } from \"@esri/arcgis-rest-portal\";\n * // get the \"Info Card\" for the item\n * getItemInfo(\"ae7\")\n *   .then(itemInfoXml) // XML document as a string\n * // or get the contents of a specific file\n * getItemInfo(\"ae7\", { fileName: \"form.json\", readAs: \"json\", authentication })\n *   .then(formJson) // JSON document as JSON\n * ```\n * Get an info file for an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item-info-file.htm) for more information.\n * @param id - Item Id\n * @param requestOptions - Options for the request, including the file name which defaults to `iteminfo.xml`.\n * If the file is not a text file (XML, HTML, etc) you will need to specify the `readAs` parameter\n * @returns A Promise that will resolve with the contents of the info file for the item.\n */\nexport function getItemInfo(id, requestOptions) {\n    var _a = requestOptions || {}, _b = _a.fileName, fileName = _b === void 0 ? \"iteminfo.xml\" : _b, _c = _a.readAs, readAs = _c === void 0 ? \"text\" : _c;\n    var options = __assign({ httpMethod: \"GET\" }, requestOptions);\n    return getItemFile(id, \"/info/\" + fileName, readAs, options);\n}\n/**\n * ```\n * import { getItemMetadata } from \"@esri/arcgis-rest-portal\";\n * // get the metadata for the item\n * getItemMetadata(\"ae7\")\n *   .then(itemMetadataXml) // XML document as a string\n * // or with additional request options\n * getItemMetadata(\"ae7\", { authentication })\n *   .then(itemMetadataXml) // XML document as a string\n * ```\n * Get the standard formal metadata XML file for an item (`/info/metadata/metadata.xml`)\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the contents of the metadata file for the item as a string.\n */\nexport function getItemMetadata(id, requestOptions) {\n    var options = __assign(__assign({}, requestOptions), { fileName: \"metadata/metadata.xml\" });\n    return getItemInfo(id, options);\n}\n// overrides request()'s default behavior for reading the response\n// which is based on `params.f` and defaults to JSON\n// Also adds JSON parse error protection by sanitizing out any unescaped control characters before parsing\nfunction getItemFile(id, \n// NOTE: fileName should include any folder/subfolders\nfileName, readMethod, requestOptions) {\n    var url = \"\" + getItemBaseUrl(id, requestOptions) + fileName;\n    // preserve escape hatch to let the consumer read the response\n    // and ensure the f param is not appended to the query string\n    var options = __assign({ params: {} }, requestOptions);\n    var justReturnResponse = options.rawResponse;\n    options.rawResponse = true;\n    options.params.f = null;\n    return request(url, options).then(function (response) {\n        if (justReturnResponse) {\n            return response;\n        }\n        return readMethod !== 'json'\n            ? response[readMethod]()\n            : response.text().then(function (text) { return JSON.parse(scrubControlChars(text)); });\n    });\n}\n//# sourceMappingURL=get.js.map","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { __assign } from \"tslib\";\nimport { request, appendCustomParams } from \"@esri/arcgis-rest-request\";\nimport { getPortalUrl } from \"../util/get-portal-url\";\n/**\n * ```js\n * import { getGroup } from \"@esri/arcgis-rest-portal\";\n * //\n * getGroup(\"fxb988\") // id\n *   .then(response)\n * ```\n * Fetch a group using its id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/group.htm) for more information.\n *\n * @param id - Group Id\n * @param requestOptions  - Options for the request\n * @returns  A Promise that will resolve with the data from the response.\n */\nexport function getGroup(id, requestOptions) {\n    var url = getPortalUrl(requestOptions) + \"/community/groups/\" + id;\n    // default to a GET request\n    var options = __assign({ httpMethod: \"GET\" }, requestOptions);\n    return request(url, options);\n}\n/**\n * Gets the category schema set on a group\n *\n * @param id - Group Id\n * @param requestOptions  - Options for the request\n * @returns A promise that will resolve with JSON of group's category schema\n * @see https://developers.arcgis.com/rest/users-groups-and-items/group-category-schema.htm\n */\nexport function getGroupCategorySchema(id, requestOptions) {\n    var url = getPortalUrl(requestOptions) + \"/community/groups/\" + id + \"/categorySchema\";\n    // default to a GET request\n    var options = __assign({ httpMethod: \"GET\" }, requestOptions);\n    return request(url, options);\n}\n/**\n * Returns the content of a Group. Since the group may contain 1000s of items\n * the requestParams allow for paging.\n * @param id - Group Id\n * @param requestOptions  - Options for the request, including paging parameters.\n * @returns  A Promise that will resolve with the content of the group.\n */\nexport function getGroupContent(id, requestOptions) {\n    var url = getPortalUrl(requestOptions) + \"/content/groups/\" + id;\n    // default to a GET request\n    var options = __assign(__assign({ httpMethod: \"GET\" }, { params: { start: 1, num: 100 } }), requestOptions);\n    // is this the most concise way to mixin with the defaults above?\n    if (requestOptions && requestOptions.paging) {\n        options.params = __assign({}, requestOptions.paging);\n    }\n    return request(url, options);\n}\n/**\n * Get the usernames of the admins and members. Does not return actual 'User' objects. Those must be\n * retrieved via separate calls to the User's API.\n * @param id - Group Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with arrays of the group admin usernames and the member usernames\n */\nexport function getGroupUsers(id, requestOptions) {\n    var url = getPortalUrl(requestOptions) + \"/community/groups/\" + id + \"/users\";\n    // default to a GET request\n    var options = __assign({ httpMethod: \"GET\" }, requestOptions);\n    return request(url, options);\n}\n/**\n * ```js\n * import { searchGroupUsers } from \"@esri/arcgis-rest-portal\";\n * //\n * searchGroupUsers('abc123')\n *   .then(response)\n * ```\n * Search the users in a group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/group-users-list.htm) for more information.\n *\n * @param id - The group id\n * @param searchOptions - Options for the request, including paging parameters.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function searchGroupUsers(id, searchOptions) {\n    var url = getPortalUrl(searchOptions) + \"/community/groups/\" + id + \"/userlist\";\n    var options = appendCustomParams(searchOptions || {}, [\"name\", \"num\", \"start\", \"sortField\", \"sortOrder\", \"joined\", \"memberType\"], {\n        httpMethod: \"GET\"\n    });\n    return request(url, options);\n}\n//# sourceMappingURL=get.js.map","/* Copyright (c) 2018-2021 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { warn } from \"@esri/arcgis-rest-request\";\n/**\n * `SearchQueryBuilder` can be used to construct the `q` param for\n * [`searchItems`](/arcgis-rest-js/api/portal/searchItems#searchItems-search) or\n * [`searchGroups`](/arcgis-rest-js/api/portal/searchGroups#searchGroups-search).\n * By chaining methods, it helps build complex search queries.\n *\n * ```js\n * const startDate = new Date(\"2020-01-01\");\n * const endDate = new Date(\"2020-09-01\");\n * const query = new SearchQueryBuilder()\n *  .match(\"Patrick\")\n *  .in(\"owner\")\n *  .and()\n *  .from(startDate)\n *  .to(endDate)\n *  .in(\"created\")\n *  .and()\n *  .startGroup()\n *    .match(\"Web Mapping Application\")\n *    .in(\"type\")\n *    .or()\n *    .match(\"Mobile Application\")\n *    .in(\"type\")\n *    .or()\n *    .match(\"Application\")\n *    .in(\"type\")\n *  .endGroup()\n *  .and()\n *  .match(\"Demo App\");\n *\n * searchItems(query).then((res) => {\n *   console.log(res.results);\n * });\n * ```\n *\n * Will search for items matching\n * ```\n * \"owner: Patrick AND created:[1577836800000 TO 1598918400000] AND (type:\"Web Mapping Application\" OR type:\"Mobile Application\" OR type:Application) AND Demo App\"\n * ```\n */\nvar SearchQueryBuilder = /** @class */ (function () {\n    /**\n     * @param q An existing query string to start building from.\n     */\n    function SearchQueryBuilder(q) {\n        if (q === void 0) { q = \"\"; }\n        this.termStack = [];\n        this.rangeStack = [];\n        this.openGroups = 0;\n        this.q = q;\n    }\n    /**\n     * Defines strings to search for.\n     *\n     * ```js\n     * const query = new SearchQueryBuilder()\n     *   .match(\"My Layer\")\n     * ```\n     *\n     * @param terms strings to search for.\n     */\n    SearchQueryBuilder.prototype.match = function () {\n        var terms = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            terms[_i] = arguments[_i];\n        }\n        this.termStack = this.termStack.concat(terms);\n        return this;\n    };\n    /**\n     * Defines fields to search in. You can pass `\"*\"` or call this method without arguments to search a default set of fields\n     *\n     * ```js\n     * const query = new SearchQueryBuilder()\n     *   .match(\"My Layer\")\n     *   .in(\"title\")\n     * ```\n     *\n     * @param field The field to search for the previous match in.\n     */\n    SearchQueryBuilder.prototype.in = function (field) {\n        var fn = \"`in(\" + (field ? \"\\\"\" + field + \"\\\"\" : \"\") + \")`\";\n        if (!this.hasRange && !this.hasTerms) {\n            warn(\n            // apparently-p-rettier-ignore causes some\n            fn + \" was called with no call to `match(...)` or `from(...)`/`to(...)`. Your query was not modified.\");\n            return this;\n        }\n        if (field && field !== \"*\") {\n            this.q += field + \":\";\n        }\n        return this.commit();\n    };\n    /**\n     * Starts a new search group.\n     *\n     * ```js\n     * const query = new SearchQueryBuilder()\n     *   .startGroup()\n     *     .match(\"Lakes\")\n     *     .in(\"title\")\n     *   .endGroup()\n     *   .or()\n     *   .startGroup()\n     *     .match(\"Rivers\")\n     *     .in(\"title\")\n     *   .endGroup()\n     * ```\n     */\n    SearchQueryBuilder.prototype.startGroup = function () {\n        this.commit();\n        if (this.openGroups > 0) {\n            this.q += \" \";\n        }\n        this.openGroups++;\n        this.q += \"(\";\n        return this;\n    };\n    /**\n     * Ends a search group.\n     *\n     * ```js\n     * const query = new SearchQueryBuilder()\n     *   .startGroup()\n     *     .match(\"Lakes\")\n     *     .in(\"title\")\n     *   .endGroup()\n     *   .or()\n     *   .startGroup()\n     *     .match(\"Rivers\")\n     *     .in(\"title\")\n     *   .endGroup()\n     * ```\n     */\n    SearchQueryBuilder.prototype.endGroup = function () {\n        if (this.openGroups <= 0) {\n            warn(\"`endGroup(...)` was called without calling `startGroup(...)` first. Your query was not modified.\");\n            return this;\n        }\n        this.commit();\n        this.openGroups--;\n        this.q += \")\";\n        return this;\n    };\n    /**\n     * Joins two sets of queries with an `AND` clause.\n     *\n     * ```js\n     * const query = new SearchQueryBuilder()\n     *   .match(\"Lakes\")\n     *   .in(\"title\")\n     *   .and()\n     *   .match(\"Rivers\")\n     *   .in(\"title\")\n     * ```\n     */\n    SearchQueryBuilder.prototype.and = function () {\n        return this.addModifier(\"and\");\n    };\n    /**\n     * Joins two sets of queries with an `OR` clause.\n     *\n     * ```js\n     * const query = new SearchQueryBuilder()\n     *   .match(\"Lakes\")\n     *   .in(\"title\")\n     *   .or()\n     *   .match(\"Rivers\")\n     *   .in(\"title\")\n     * ```\n     */\n    SearchQueryBuilder.prototype.or = function () {\n        return this.addModifier(\"or\");\n    };\n    /**\n     * Joins two sets of queries with a `NOT` clause. Another option for filtering results is the [prohibit operator '-'](https://developers.arcgis.com/rest/users-groups-and-items/search-reference.htm#ESRI_SECTION1_5C6C35DB9E4A4F4492C5B937BDA2BF67).\n     *\n     * ```js\n     * // omit results with \"Rivers\" in their title\n     * const query = new SearchQueryBuilder()\n     *   .not()\n     *   .match(\"Rivers\")\n     *   .in(\"title\")\n     *\n     * // equivalent\n     * const query = new SearchQueryBuilder()\n     *   .match(\"Rivers\")\n     *   .in(\"-title\")\n     * ```\n     */\n    SearchQueryBuilder.prototype.not = function () {\n        return this.addModifier(\"not\");\n    };\n    /**\n     * Begins a new range query.\n     *\n     * ```js\n     *\n     * const NEWYEARS = new Date(\"2020-01-01\")\n     * const TODAY = new Date()\n     *\n     * const query = new SearchQueryBuilder()\n     *   .from(NEWYEARS)\n     *   .to(TODAY)\n     *   .in(\"created\")\n     * ```\n     */\n    SearchQueryBuilder.prototype.from = function (term) {\n        if (this.hasTerms) {\n            warn(\n            // apparently-p*rettier-ignore causes prettier to strip *all* comments O_o\n            \"`from(...)` is not allowed after `match(...)` try using `.from(...).to(...).in(...)`. Optionally, you may see this because dates are incorrectly formatted. Dates should be a primative Date value, aka a number in milliseconds or Date object, ie new Date(\\\"2020-01-01\\\").  Your query was not modified.\");\n            return this;\n        }\n        this.rangeStack[0] = term;\n        return this;\n    };\n    /**\n     * Ends a range query.\n     *\n     * ```js\n     * const query = new SearchQueryBuilder()\n     *   .from(yesterdaysDate)\n     *   .to(todaysDate)\n     *   .in(\"created\")\n     * ```\n     */\n    SearchQueryBuilder.prototype.to = function (term) {\n        if (this.hasTerms) {\n            warn(\n            // apparently-p*rettier-ignore causes prettier to strip *all* comments O_o\n            \"`to(...)` is not allowed after `match(...)` try using `.from(...).to(...).in(...)`. Optionally, you may see this because dates are incorrectly formatted. Dates should be a primative Date value, aka a number in milliseconds or Date object, ie new Date(\\\"2020-01-01\\\"). Your query was not modified.\");\n            return this;\n        }\n        this.rangeStack[1] = term;\n        return this;\n    };\n    /**\n     * Boosts the previous term to increase its rank in the results.\n     *\n     * ```js\n     * const query = new SearchQueryBuilder()\n     *   .match(\"Lakes\")\n     *   .in(\"title\")\n     *   .or()\n     *   .match(\"Rivers\")\n     *   .in(\"title\")\n     *   .boost(3)\n     * ```\n     */\n    SearchQueryBuilder.prototype.boost = function (num) {\n        this.commit();\n        this.q += \"^\" + num;\n        return this;\n    };\n    /**\n     * Returns the current query string. Called internally when the request is made.\n     */\n    SearchQueryBuilder.prototype.toParam = function () {\n        this.commit();\n        this.cleanup();\n        return this.q;\n    };\n    /**\n     * Returns a new instance of `SearchQueryBuilder` based on the current instance.\n     */\n    SearchQueryBuilder.prototype.clone = function () {\n        this.commit();\n        this.cleanup();\n        return new SearchQueryBuilder(this.q + \"\");\n    };\n    SearchQueryBuilder.prototype.addModifier = function (modifier) {\n        if (this.currentModifer) {\n            warn(\n            // apparently-p*rettier-ignore causes prettier to strip *all* comments O_o\n            \"You have called `\" + this.currentModifer + \"()` after `\" + modifier + \"()`. Your current query was not modified.\");\n            return this;\n        }\n        this.commit();\n        if (this.q === \"\" && modifier !== \"not\") {\n            warn(\"You have called `\" + modifier + \"()` without calling another method to modify your query first. Try calling `match()` first.\");\n            return this;\n        }\n        this.currentModifer = modifier;\n        this.q += this.q === \"\" ? \"\" : \" \";\n        this.q += modifier.toUpperCase() + \" \";\n        return this;\n    };\n    SearchQueryBuilder.prototype.needsQuotes = function (s) {\n        return /\\s|:/g.test(s);\n    };\n    SearchQueryBuilder.prototype.formatTerm = function (term) {\n        if (term instanceof Date) {\n            return term.getTime();\n        }\n        if (typeof term === \"string\" && this.needsQuotes(term)) {\n            return \"\\\"\" + term + \"\\\"\";\n        }\n        return term;\n    };\n    SearchQueryBuilder.prototype.commit = function () {\n        var _this = this;\n        this.currentModifer = undefined;\n        if (this.hasRange) {\n            this.q += \"[\" + this.formatTerm(this.rangeStack[0]) + \" TO \" + this.formatTerm(this.rangeStack[1]) + \"]\";\n            this.rangeStack = [undefined, undefined];\n        }\n        if (this.hasTerms) {\n            this.q += this.termStack\n                .map(function (term) {\n                return _this.formatTerm(term);\n            })\n                .join(\" \");\n            this.termStack = [];\n        }\n        return this;\n    };\n    Object.defineProperty(SearchQueryBuilder.prototype, \"hasTerms\", {\n        get: function () {\n            return this.termStack.length > 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SearchQueryBuilder.prototype, \"hasRange\", {\n        get: function () {\n            return this.rangeStack.length && this.rangeStack[0] && this.rangeStack[1];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    SearchQueryBuilder.prototype.cleanup = function () {\n        // end a group if we have started one\n        if (this.openGroups > 0) {\n            warn(\n            // apparently-p*rettier-ignore causes prettier to strip *all* comments O_o\n            \"Automatically closing \" + this.openGroups + \" group(s). You can use `endGroup(...)` to remove this warning.\");\n            while (this.openGroups > 0) {\n                this.q += \")\";\n                this.openGroups--;\n            }\n        }\n        var oldQ = this.q;\n        this.q = oldQ.replace(/( AND ?| NOT ?| OR ?)*$/, \"\");\n        if (oldQ !== this.q) {\n            warn(\"`startGroup(...)` was called without calling `endGroup(...)` first. Your query was not modified.\");\n        }\n        // clear empty groups\n        this.q = this.q.replace(/(\\(\\))*/, \"\");\n    };\n    return SearchQueryBuilder;\n}());\nexport { SearchQueryBuilder };\n//# sourceMappingURL=SearchQueryBuilder.js.map","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { request, appendCustomParams, } from \"@esri/arcgis-rest-request\";\nimport { SearchQueryBuilder } from \"./SearchQueryBuilder\";\nimport { getPortalUrl } from \"../util/get-portal-url\";\nexport function genericSearch(search, searchType) {\n    var options;\n    if (typeof search === \"string\" || search instanceof SearchQueryBuilder) {\n        options = {\n            httpMethod: \"GET\",\n            params: {\n                q: search,\n            },\n        };\n    }\n    else {\n        // searchUserAccess has one (knonw) valid value: \"groupMember\"\n        options = appendCustomParams(search, [\n            \"q\",\n            \"num\",\n            \"start\",\n            \"sortField\",\n            \"sortOrder\",\n            \"searchUserAccess\",\n            \"searchUserName\",\n            \"filter\",\n            \"countFields\",\n            \"countSize\",\n            \"categories\",\n            \"categoryFilters\",\n        ], {\n            httpMethod: \"GET\",\n        });\n    }\n    var path;\n    switch (searchType) {\n        case \"item\":\n            path = \"/search\";\n            break;\n        case \"group\":\n            path = \"/community/groups\";\n            break;\n        case \"groupContent\":\n            // Need to have groupId property to do group contents search,\n            // cso filter out all but ISearchGroupContentOptions\n            if (typeof search !== \"string\" &&\n                !(search instanceof SearchQueryBuilder) &&\n                search.groupId) {\n                path = \"/content/groups/\" + search.groupId + \"/search\";\n            }\n            else {\n                return Promise.reject(new Error(\"you must pass a `groupId` option to `searchGroupContent`\"));\n            }\n            break;\n        default:\n            // \"users\"\n            path = \"/portals/self/users/search\";\n            break;\n    }\n    var url = getPortalUrl(options) + path;\n    // send the request\n    return request(url, options).then(function (r) {\n        if (r.nextStart && r.nextStart !== -1) {\n            r.nextPage = function () {\n                var newOptions;\n                if (typeof search === \"string\" ||\n                    search instanceof SearchQueryBuilder) {\n                    newOptions = {\n                        q: search,\n                        start: r.nextStart,\n                    };\n                }\n                else {\n                    newOptions = search;\n                    newOptions.start = r.nextStart;\n                }\n                return genericSearch(newOptions, searchType);\n            };\n        }\n        return r;\n    });\n}\n//# sourceMappingURL=generic-search.js.map","/* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { genericSearch } from \"../util/generic-search\";\n/**\n * ```js\n * import { searchItems } from \"@esri/arcgis-rest-portal\";\n * //\n * searchItems('water')\n *   .then(response) // response.total => 355\n * ```\n * Search a portal for items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/search.htm) for more information.\n *\n * @param search - A string or RequestOptions object to pass through to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function searchItems(search) {\n    return genericSearch(search, \"item\");\n}\n//# sourceMappingURL=search.js.map","/* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { genericSearch } from \"../util/generic-search\";\n/**\n * ```js\n * import { searchGroups } from \"@esri/arcgis-rest-portal\";\n * //\n * searchGroups('water')\n *   .then(response) // response.total => 355\n * ```\n * Search a portal for groups. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/group-search.htm) for more information.\n *\n * @param search - A string or RequestOptions object to pass through to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function searchGroups(search) {\n    return genericSearch(search, \"group\");\n}\n/**\n * ```js\n * import { searchGroupContent } from \"@esri/arcgis-rest-portal\";\n * //\n * searchGroupContent('water')\n *   .then(response) // response.total => 355\n * ```\n * Search a portal for items in a group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/group-content-search.htm) for more information.\n *\n * @param options - RequestOptions object amended with search parameters.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function searchGroupContent(options) {\n    return genericSearch(options, \"groupContent\");\n}\n//# sourceMappingURL=search.js.map","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { __assign } from \"tslib\";\nimport { request } from \"@esri/arcgis-rest-request\";\nimport { getPortalUrl } from \"../util/get-portal-url\";\n/**\n * ```js\n * import { getUser } from '@esri/arcgis-rest-portal';\n * //\n * getUser(\"jsmith\")\n *   .then(response)\n * // => { firstName: \"John\", lastName: \"Smith\",tags: [\"GIS Analyst\", \"City of Redlands\"] }\n * ```\n * Get information about a user. This method has proven so generically useful that you can also call [`UserSession.getUser()`](/arcgis-rest-js/api/auth/UserSession#getUser-summary).\n *\n * @param requestOptions - options to pass through in the request\n * @returns A Promise that will resolve with metadata about the user\n */\nexport function getUser(requestOptions) {\n    var url;\n    var options = { httpMethod: \"GET\" };\n    // if a username is passed, assume ArcGIS Online\n    if (typeof requestOptions === \"string\") {\n        url = \"https://www.arcgis.com/sharing/rest/community/users/\" + requestOptions;\n    }\n    else {\n        // if an authenticated session is passed, default to that user/portal unless another username is provided manually\n        var username = requestOptions.username || requestOptions.authentication.username;\n        url = getPortalUrl(requestOptions) + \"/community/users/\" + encodeURIComponent(username);\n        options = __assign(__assign({}, requestOptions), options);\n    }\n    // send the request\n    return request(url, options);\n}\n//# sourceMappingURL=get-user.js.map","import { genericSearch } from \"../util/generic-search\";\n/**\n * ```js\n * import { searchItems } from \"@esri/arcgis-rest-portal\";\n * //\n * searchUsers({ q: 'tommy', authentication })\n *   .then(response) // response.total => 355\n * ```\n * Search a portal for users.\n *\n * @param search - A RequestOptions object to pass through to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function searchUsers(search) {\n    return genericSearch(search, \"user\");\n}\n//# sourceMappingURL=search-users.js.map","/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { __assign } from \"tslib\";\nimport { request } from \"@esri/arcgis-rest-request\";\nimport { getPortalUrl } from \"./get-portal-url\";\n/**\n * Get the portal\n * @param requestOptions\n */\nexport function getSelf(requestOptions) {\n    // just delegate to getPortal w/o an id\n    return getPortal(null, requestOptions);\n}\n/**\n * ```js\n * import { getPortal } from \"@esri/arcgis-rest-request\";\n * //\n * getPortal()\n * getPortal(\"fe8\")\n * getPortal(null, { portal: \"https://custom.maps.arcgis.com/sharing/rest/\" })\n * ```\n * Fetch information about the specified portal by id. If no id is passed, portals/self will be called.\n * Note that if you intend to request a portal by id and it is different from the portal specified by options.authentication, you must also pass options.portal.\n * @param id\n * @param requestOptions\n */\nexport function getPortal(id, requestOptions) {\n    // construct the search url\n    var idOrSelf = id ? id : \"self\";\n    var url = getPortalUrl(requestOptions) + \"/portals/\" + idOrSelf;\n    // default to a GET request\n    var options = __assign({ httpMethod: \"GET\" }, requestOptions);\n    // send the request\n    return request(url, options);\n}\n//# sourceMappingURL=get-portal.js.map","import { getPortalUrl as getPortalApiUrl, } from \"@esri/arcgis-rest-portal\";\n/**\n * ```js\n * import { getPortalUrl } from \"@esri/hub-common\";\n * // from a portal API URL\n * let portalUrl = getPortalUrl(\"https://org.maps.arcgis.com/sharing/rest\"); // https://org.maps.arcgis.com\n * // from an enterprise portal self response (IPortal)\n * let portalSelf = { isPortal: true, portalHostname: \"server.example.org\" };\n * portalUrl = getPortalUrl(portalSelf); // https://server.example.org\n * // from an online portal self response (IPortal)\n * portalSelf = { isPortal: false, urlKey: \"org\", customBaseUrl: \"maps.arcgis.com\" };\n * portalUrl = getPortalUrl(portalSelf); // https://org.maps.arcgis.com\n * // from hub request options (IHubRequestOptions) with a portal self (IPortal)\n * let requestOptions = { isPortal: false, portalSelf };\n * portalUrl = getPortalUrl(requestOptions); // https://org.maps.arcgis.com\n * // from request options (IRequestOptions) with a portal (string)\n * requestOptions = { portal: \"https://org.maps.arcgis.com/sharing/rest\" };\n * portalUrl = getPortalUrl(requestOptions); // https://org.maps.arcgis.com\n * ```\n * Derive a portal's base URL from the portal's API URL, a portal object, or request options\n * @param urlOrObject a portal API URL, a portal object, or request options containing either of those\n * @returns The portal base URL, defaults to `https://www.arcgis.com`\n */\nexport function getPortalUrl(urlOrObject) {\n    if (typeof urlOrObject === \"string\") {\n        // assume this is the URL of the portal API\n        // and strip the `/sharing/rest`\n        return urlOrObject.replace(/\\/sharing\\/rest\\/?$/, \"\");\n    }\n    if (typeof urlOrObject === \"object\") {\n        // build URL from portal self object, which could be\n        // either a property of the object (request options) or the object itself\n        const portalSelf = urlOrObject.portalSelf;\n        const portal = portalSelf || urlOrObject;\n        const { portalHostname, urlKey, customBaseUrl } = portal;\n        if (portalHostname || (urlKey && customBaseUrl)) {\n            // user passed in a portal object, we'll use that to build the URL\n            if (portal.isPortal) {\n                return `https://${portal.portalHostname}`;\n            }\n            else {\n                return `https://${portal.urlKey}.${portal.customBaseUrl}`;\n            }\n        }\n    }\n    // urlOrObj is either undefined, or a request options w/o portal self\n    // get portal API URL and parse portal URL from that\n    return getPortalUrl(getPortalApiUrl(urlOrObject));\n}\n//# sourceMappingURL=get-portal-url.js.map","import { getPortalUrl } from \"./get-portal-url\";\n/**\n * ```js\n * import { getPortalApiUrl } from \"@esri/hub-common\";\n * // from a portal base URL\n * let portalApiUrl = getPortalApiUrl(\"https://org.maps.arcgis.com\"); // https://org.maps.arcgis.com/sharing/rest\n * // from an enterprise portal self response (IPortal)\n * let portalSelf = { isPortal: true, portalHostname: \"server.example.org\" };\n * portalApiUrl = getPortalApiUrl(portalSelf); // https://server.example.org/sharing/rest\n * // from an online portal self response (IPortal)\n * portalSelf = { isPortal: false, urlKey: \"org\", customBaseUrl: \"maps.arcgis.com\" };\n * portalApiUrl = getPortalApiUrl(portalSelf); // https://org.maps.arcgis.com/sharing/rest\n * // from hub request options (IHubRequestOptions) with a portal self (IPortal)\n * let requestOptions = { isPortal: false, portalSelf };\n * portalApiUrl = getPortalApiUrl(requestOptions); // https://org.maps.arcgis.com/sharing/rest\n * // from request options (IRequestOptions) with a portal (string)\n * requestOptions = { portal: \"https://org.maps.arcgis.com/sharing/rest\" };\n * portalApiUrl = getPortalApiUrl(requestOptions); // https://org.maps.arcgis.com/sharing/rest\n * ```\n * Derive a portal's API URL from the portal's base URL, a portal object, or request options\n * @param urlOrObject a portal base URL, a portal object, or request options containing either of those\n * @returns The portal API URL, defaults to `https://www.arcgis.com/sharing/rest`\n */\nexport function getPortalApiUrl(urlOrObject) {\n    return `${getPortalUrl(urlOrObject)}/sharing/rest`;\n}\n//# sourceMappingURL=get-portal-api-url.js.map","import { getPortalUrl } from \"./get-portal-url\";\n/**\n * Return the URL of the item's page in the Portal Home application\n * @param itemId The item's ID\n * @param portalUrlOrObject a portal base or API URL, a portal object, or request options containing either of those\n * @returns URL to the item's data REST end point, defaults to `https://www.arcgis.com/home/item.html?id={item.id}`\n */\nexport function getItemHomeUrl(itemId, portalUrlOrObject) {\n    const portalUrl = getPortalUrl(portalUrlOrObject);\n    return `${portalUrl}/home/item.html?id=${itemId}`;\n}\n//# sourceMappingURL=get-item-home-url.js.map","import { getPortalApiUrl } from \"./get-portal-api-url\";\n// NOTE: this fn is tested via getItemDataUrl tests\n/**\n * Get the fully qualified URL to the REST end point for an item.\n * @param item w/ id and access\n * @param portalUrlOrObject a portal base or API URL, a portal object, or request options containing either of those\n * @param token token for the current user's session; will only be appended as a query parameter if the item's access is **not** `public`\n * @returns URL to the item's REST end point, defaults to `https://www.arcgis.com/sharing/rest/content/items/{item.id}?f=json`\n */\nexport const getItemApiUrl = (item, portalUrlOrObject, token) => {\n    const { id, access } = item;\n    const url = `${getPortalApiUrl(portalUrlOrObject)}/content/items/${id}`;\n    const params = new URLSearchParams({ f: \"json\" });\n    if (access !== \"public\" && token) {\n        params.append(\"token\", token);\n    }\n    return `${url}?${params.toString()}`;\n};\n//# sourceMappingURL=get-item-api-url.js.map","/**\n * Given an org url, get the portal base url\n *\n * i.e. https://myorg.maps.arcgis.com will return https://www.arcgis.com\n *\n * @param orgUrl\n * @returns\n */\nexport function getPortalBaseFromOrgUrl(orgUrl) {\n    let result = orgUrl;\n    if (orgUrl.match(/(qaext|\\.mapsqa)\\.arcgis.com/)) {\n        result = \"https://qaext.arcgis.com\";\n    }\n    else if (orgUrl.match(/(devext|\\.mapsdevext)\\.arcgis.com/)) {\n        result = \"https://devext.arcgis.com\";\n    }\n    else {\n        /* istanbul ignore else */\n        if (orgUrl.match(/(www|\\.maps)\\.arcgis.com/)) {\n            result = \"https://www.arcgis.com\";\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=getPortalBaseFromOrgUrl.js.map","import { getPortalUrl } from \"./get-portal-url\";\n/**\n * Return the URL of the group's page in the Portal Home application\n * @param groupId The group's ID\n * @param portalUrlOrObject a portal base or API URL, a portal object, or request options containing either of those\n * @returns URL to the groups's url, defaults to `https://www.arcgis.com/home/group.html?id={group.id}`\n */\nexport function getGroupHomeUrl(groupId, portalUrlOrObject) {\n    const portalUrl = getPortalUrl(portalUrlOrObject);\n    return `${portalUrl}/home/group.html?id=${groupId}`;\n}\n//# sourceMappingURL=getGroupHomeUrl.js.map","import { getPortalUrl } from \"./get-portal-url\";\n/**\n * Return the URL of the user's page in the Portal Home application\n * @param username The username\n * @param portalUrlOrObject a portal base or API URL, a portal object, or request options containing either of those\n * @returns URL to the user's profile, defaults to `https://www.arcgis.com/home/user.html?user={username}`\n */\nexport function getUserHomeUrl(username, portalUrlOrObject) {\n    const portalUrl = getPortalUrl(portalUrlOrObject);\n    return `${portalUrl}/home/user.html?user=${username}`;\n}\n//# sourceMappingURL=getUserHomeUrl.js.map","const app = [\n    \"Application\",\n    \"City Engine Web Scene\",\n    \"CityEngine Web Scene\",\n    \"Dashboard\",\n    \"Insights Page\",\n    \"Insights Workbook\",\n    \"Operation View\",\n    \"Web Mapping Application\",\n    \"StoryMap\",\n    \"Web Experience\",\n    \"Urban Model\",\n];\nconst dataset = [\n    \"CSV Collection\",\n    \"CSV\",\n    \"Feature Collection Template\",\n    \"Feature Collection\",\n    \"Feature Layer\",\n    \"Feature Service\",\n    \"File Geodatabase\",\n    \"GeoJSON\",\n    \"GeoJson\",\n    \"KML Collection\",\n    \"KML\",\n    \"Microsoft Excel\",\n    \"Raster Layer\",\n    \"Shapefile\",\n    \"Stream Service\",\n    \"Table\",\n];\nconst document = [\n    \"CAD Drawing\",\n    \"Document Link\",\n    \"Hub Page\",\n    \"Site Page\",\n    \"Image\",\n    \"iWork Keynote\",\n    \"iWork Numbers\",\n    \"iWork Pages\",\n    \"Microsoft Powerpoint\",\n    \"Microsoft Visio\",\n    \"Microsoft Word\",\n    \"Notebook\",\n    \"PDF\",\n    \"Pro Map\",\n    \"Report Template\",\n];\nconst event = [\"Hub Event\"];\nconst feedback = [\"Form\", \"Quick Capture Project\"];\nconst initiative = [\"Hub Initiative\"];\nconst solution = [\"Solution\"];\nconst template = [\"Hub Initiative Template\"];\nconst map = [\n    \"Image Collection\",\n    \"Image Service\",\n    \"Map Service Layer\",\n    \"Map Service\",\n    \"Scene Service\",\n    \"Scene Layer\",\n    \"Vector Tile Service\",\n    \"Web Map Service\",\n    \"Web Map Tile Service\",\n    \"Web Map\",\n    \"Web Scene\",\n    \"WFS\",\n    \"WMS\",\n    \"WMTS\",\n];\nconst other = [\n    \"360 VR Experience\",\n    \"AppBuilder Widget Package\",\n    \"Application Configuration\",\n    \"ArcPad Package\",\n    \"Code Attachment\",\n    \"Code Sample\",\n    \"Desktop Add In\",\n    \"Desktop Application Template\",\n    \"Desktop Application\",\n    \"Desktop Style\",\n    \"Explorer Add In\",\n    \"Explorer Layer\",\n    \"Geocoding Service\",\n    \"Geometry Service\",\n    \"Geoprocessing Package\",\n    \"Geoprocessing Sample\",\n    \"Geoprocessing Service\",\n    \"Layer File\",\n    \"Layer Package\",\n    \"Layer Template\",\n    \"Layer\",\n    \"Layout\",\n    \"Locator Package\",\n    \"Map Area\",\n    \"Map Document\",\n    \"Map Package\",\n    \"Map Service Definition\",\n    \"Map Template\",\n    \"Mobile Application\",\n    \"Mobile Map Package\",\n    \"Native Application\",\n    \"Network Analysis Service\",\n    \"Operations Dashboard Add In\",\n    \"Project Package\",\n    \"Project Template\",\n    \"Raster Function Template\",\n    \"Rule Package\",\n    \"Scene Package\",\n    \"Service Definition\",\n    \"SQLite Geodatabase\",\n    \"Style\",\n    \"Tile Package\",\n    \"Vector Tile Package\",\n    \"Workflow Manager Package\",\n];\nconst site = [\"Hub Site Application\", \"Site Application\"];\n/**\n * Get the Hub collection for a given item type\n * @param itemType The ArcGIS [item type](https://developers.arcgis.com/rest/users-groups-and-items/items-and-item-types.htm).\n * @returns the Hub collection of a given item type.\n * @private\n */\nexport const getCollection = (type) => {\n    if (!type) {\n        return;\n    }\n    const lowerCaseType = type.toLocaleLowerCase();\n    return Object.keys(collections).find((key) => {\n        const collectionTypes = collections[key];\n        return collectionTypes.some((t) => t.toLocaleLowerCase() === lowerCaseType);\n    });\n};\n/**\n * The converse of getCollection, returns associated types of provided collection\n * @param collection The Hub collection\n * @returns An array of types or undefined if collection is not found\n * @private\n */\nexport const getCollectionTypes = (collection) => {\n    if (!collection) {\n        return;\n    }\n    const lowerCaseCollection = collection.toLocaleLowerCase();\n    return collections[lowerCaseCollection];\n};\n// TODO: remove this when we remove the deprecated categories\n// and then move the above arrays and getCollection() logic to get-family\nexport const collections = {\n    app,\n    dataset,\n    document,\n    event,\n    feedback,\n    initiative,\n    template,\n    solution,\n    map,\n    other,\n    site,\n};\n//# sourceMappingURL=collections.js.map","/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { cleanUrl } from \"@esri/arcgis-rest-request\";\nvar serviceRegex = new RegExp(/.+(?:map|feature|image)server/i);\n/**\n * Return the service url. If not matched, returns what was passed in\n */\nexport function parseServiceUrl(url) {\n    var match = url.match(serviceRegex);\n    if (match) {\n        return match[0];\n    }\n    else {\n        return stripQueryString(url);\n    }\n}\nfunction stripQueryString(url) {\n    var stripped = url.split('?')[0];\n    return cleanUrl(stripped);\n}\n//# sourceMappingURL=helpers.js.map","import { __rest } from \"tslib\";\nimport { parseServiceUrl } from \"./helpers\";\nimport { request } from '@esri/arcgis-rest-request';\n/**\n * ```js\n * import { getAllLayersAndTables } from '@esri/arcgis-rest-feature-layer';\n * getAllLayersAndTables({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\"\n * })\n *   .then(response) // { layers: [...], tables: [...] }\n * ```\n * Fetches all the layers and tables associated with a given layer service.\n * Wrapper for https://developers.arcgis.com/rest/services-reference/all-layers-and-tables.htm\n *\n * @param options - Request options, including the url for the layer service\n * @returns A Promise that will resolve with the layers and tables for the given service\n */\n// TODO: should we expand this to support other valid params of the endpoint?\nexport function getAllLayersAndTables(options) {\n    var url = options.url, requestOptions = __rest(options, [\"url\"]);\n    var layersUrl = parseServiceUrl(url) + \"/layers\";\n    return request(layersUrl, requestOptions);\n}\n//# sourceMappingURL=getAllLayersAndTables.js.map","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\n/**\n * ```js\n * import { getService } from '@esri/arcgis-rest-feature-layer';\n * //\n * getService({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer\"\n * })\n *   .then(response) // { name: \"311\", id: 0, ... }\n * ```\n * Feature Service request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/feature-service.htm) for more information.\n *\n * @param options - Options for the request.\n * @returns A Promise that will resolve with the getService response.\n */\nexport function getService(options) {\n    return request(cleanUrl(options.url), options);\n}\n//# sourceMappingURL=getService.js.map","import { getItemApiUrl } from \"../urls/get-item-api-url\";\n/**\n * Get the fully qualified URL for an item's thumbnail\n * @param item w/ id, thumbnail, and access\n * @param portalUrlOrObject a portal base or API URL, a portal object, or request options containing either of those\n * @param optionsOrToken options including width and/or token for the current user's session; will only be appended as a query parameter if the item's access is **not** `public`\n * @returns URL to the item's thumbnail, defaults to `https://www.arcgis.com/sharing/rest/content/items/{item.id}/info/{item.thumbnail}`. Returns `null` if the item does not have a thumbnail assigned.\n */\nexport function getItemThumbnailUrl(item, portalUrlOrObject, optionsOrToken) {\n    if (!item || !item.thumbnail) {\n        // TODO: handle image types by returning the image (item data) itself?\n        return null;\n    }\n    // tslint:disable-next-line prefer-const\n    let { token, width } = optionsOrToken || {};\n    // TODO: at the next breaking change drop support for passing token as string\n    if (!token && typeof optionsOrToken === \"string\") {\n        token = optionsOrToken;\n    }\n    const itemApiUrl = getItemApiUrl(item, portalUrlOrObject, token);\n    const [baseUrl, search] = itemApiUrl.split(\"?\");\n    const searchParams = new URLSearchParams(search);\n    searchParams.delete(\"f\");\n    if (width) {\n        searchParams.append(\"w\", width + \"\");\n    }\n    const newSearch = searchParams.toString();\n    const url = `${baseUrl}/info/${item.thumbnail}`;\n    return newSearch ? `${url}?${newSearch}` : url;\n}\n//# sourceMappingURL=get-item-thumbnail-url.js.map","import { getWithDefault } from \"./objects/get-with-default\";\nimport OperationError from \"./OperationError\";\n/**\n * Generic Hub Error with an Error stack as well\n * as an optional serialized OperationStack.\n *\n * Also accepts a `rootCause` Error object\n */\nexport default class HubError extends OperationError {\n    /**\n     * Creates an instance of HubError.\n     * @param {string} operation\n     * @param {string} [message]\n     * @param {Error} [rootCause]\n     * @memberof HubError\n     */\n    constructor(operation, message, rootCause) {\n        message = message || \"UNKNOWN_ERROR\";\n        // if the rootCause has a .rootCause, use that so we don't deeply nest\n        rootCause = getWithDefault(rootCause, \"rootCause\", rootCause);\n        /* Skip coverage on super(...) as per:\n           https://github.com/Microsoft/TypeScript/issues/13029\n           https://github.com/SitePen/remap-istanbul/issues/106\n        */\n        /* istanbul ignore next */\n        super(operation, message, rootCause);\n        this.name = \"HubError\";\n        // if the original error has a stack use it, otherwise create a new\n        // stack. Note: a new Stack will make it look like the error origninated\n        // in the HubError constructor. This is only an issue in tests but\n        // it can be confusing to debug\n        this.stack = getWithDefault(rootCause, \"stack\", new Error().stack);\n    }\n}\n//# sourceMappingURL=HubError.js.map","// TODO: work out how to unify content slug fns\n// https: github.com/Esri/hub.js/blob/master/packages/common/src/content/index.ts#L301-L348\n/**\n * Uri slugs have `::` as a separator, but we need to use `|` in the typeKeywords. This function\n * converts a uri slug to a typeKeyword slug.\n * @param slug\n * @returns\n */\nexport function uriSlugToKeywordSlug(slug) {\n    if (slug.indexOf(\"::\") > -1) {\n        slug = slug.replace(\"::\", \"|\");\n    }\n    return slug;\n}\n/**\n * Convert a typeKeyword slug to a uri slug. This is the reverse of uriSlugToKeywordSlug\n * @param slug\n * @returns\n */\nexport function keywordSlugToUriSlug(slug) {\n    if (slug.indexOf(\"|\") > -1) {\n        slug = slug.replace(\"|\", \"::\");\n    }\n    return slug;\n}\n//# sourceMappingURL=slugConverters.js.map","import { parseServiceUrl } from \"@esri/arcgis-rest-feature-layer\";\nimport { getItem } from \"@esri/arcgis-rest-portal\";\n/**\n * Checks if a server's services directory is disabled. Consider hoisting this to RESTJS\n * @param idOrItem A feature service ID or item\n * @param requestOptions Request options\n * @returns Promise that resolves boolean\n */\nexport const isServicesDirectoryDisabled = async (idOrItem, requestOptions) => {\n    let disabled;\n    try {\n        const item = typeof idOrItem === \"string\"\n            ? await getItem(idOrItem, requestOptions)\n            : idOrItem;\n        if (item.url) {\n            let url = parseServiceUrl(item.url);\n            if (item.access !== \"public\" && requestOptions.authentication) {\n                const token = await requestOptions.authentication.getToken(item.url, requestOptions);\n                if (token) {\n                    url = `${url}?token=${token}`;\n                }\n            }\n            const { status } = await fetch(url);\n            disabled = status !== 200;\n        }\n        else {\n            disabled = true;\n        }\n    }\n    catch (e) {\n        disabled = true;\n    }\n    return disabled;\n};\n//# sourceMappingURL=is-services-directory-disabled.js.map","import { keywordSlugToUriSlug } from \"./_internal/slugConverters\";\n/**\n * Consistent means to get an item's identifier - either the slug or the id\n * @param item\n * @returns\n */\nexport function getItemIdentifier(item) {\n    var _a;\n    const slug = (_a = item.properties) === null || _a === void 0 ? void 0 : _a.slug;\n    return slug ? keywordSlugToUriSlug(slug) : item.id;\n}\n//# sourceMappingURL=getItemIdentifier.js.map","import { getCollection, getCollectionTypes } from \"../collections\";\n// private helper functions\nfunction collectionToFamily(collection) {\n    const overrides = {\n        other: \"content\",\n        solution: \"template\",\n    };\n    return overrides[collection] || collection;\n}\n/**\n * return the Hub family given an item's type\n * @param type item type\n * @returns Hub family\n */\nexport function getFamily(type) {\n    let family;\n    // override default behavior for the rows that are highlighted in yellow here:\n    // https://esriis.sharepoint.com/:x:/r/sites/ArcGISHub/_layouts/15/Doc.aspx?sourcedoc=%7BADA1C9DC-4F6C-4DE4-92C6-693EF9571CFA%7D&file=Hub%20Routes.xlsx&nav=MTBfe0VENEREQzI4LUZFMDctNEI0Ri04NjcyLThCQUE2MTA0MEZGRn1fezIwMTIwMEJFLTA4MEQtNEExRC05QzA4LTE5MTAzOUQwMEE1RH0&action=default&mobileredirect=true&cid=df1c874b-c367-4cea-bc13-7bebfad3f2ac\n    switch (type.toLowerCase()) {\n        // NOTE: we really want to put tiled image services in the maps family\n        // but we would need the typekeywords to differentiate them\n        // for now send them to the maps route here:\n        // https://github.com/ArcGIS/opendata-ui/blob/cdc0dac6b7e8c43afaa60ae219393a7d3aaa7433/packages/ember-arcgis-hub-components/addon/utils/content-routes.js#L39-L44\n        case \"image service\":\n            family = \"dataset\";\n            break;\n        case \"feature service\":\n        case \"raster layer\":\n            // TODO: check if feature service has > 1 layer first?\n            family = \"map\";\n            break;\n        case \"microsoft excel\":\n            family = \"document\";\n            break;\n        case \"cad drawing\":\n        case \"feature collection template\":\n        case \"report template\":\n            family = \"content\";\n            break;\n        case \"hub project\":\n            family = \"project\";\n            break;\n        default:\n            // by default derive from collection\n            family = collectionToFamily(getCollection(type));\n    }\n    return family;\n}\n/**\n * return the types associated with a provided Hub Family\n * Overrides are provided to match getFamily implementation\n * @param type item type\n * @returns Hub family\n */\nexport function getFamilyTypes(family) {\n    let types;\n    // override default behavior for the rows that are highlighted in yellow here:\n    // https://esriis.sharepoint.com/:x:/r/sites/ArcGISHub/_layouts/15/Doc.aspx?sourcedoc=%7BADA1C9DC-4F6C-4DE4-92C6-693EF9571CFA%7D&file=Hub%20Routes.xlsx&nav=MTBfe0VENEREQzI4LUZFMDctNEI0Ri04NjcyLThCQUE2MTA0MEZGRn1fezIwMTIwMEJFLTA4MEQtNEExRC05QzA4LTE5MTAzOUQwMEE1RH0&action=default&mobileredirect=true&cid=df1c874b-c367-4cea-bc13-7bebfad3f2ac\n    switch (family.toLowerCase()) {\n        case \"content\":\n            types = getCollectionTypes(\"other\");\n            types = types.concat([\n                \"CAD Drawing\",\n                \"Feature Collection Template\",\n                \"Report Template\",\n            ]);\n            break;\n        case \"template\":\n            types = [\n                ...getCollectionTypes(\"template\"),\n                ...getCollectionTypes(\"solution\"),\n            ];\n            break;\n        case \"dataset\":\n            types = getCollectionTypes(family.toLowerCase()).filter((type) => type !== \"Feature Collection Template\" &&\n                // Changed as part of https://confluencewikidev.esri.com/x/KYJuDg\n                // Remove when reclassification has been completed\n                // type !== \"Feature Service\" &&\n                type !== \"Raster Layer\" &&\n                type !== \"Microsoft Excel\");\n            types = types.concat(\"Image Service\");\n            break;\n        case \"map\":\n            types = getCollectionTypes(family.toLowerCase()).filter((type) => type !== \"Image Service\");\n            types = types.concat([\n                // Changed as part of https://confluencewikidev.esri.com/x/KYJuDg\n                // Remove when reclassification has been completed\n                // \"Feature Service\",\n                \"Raster Layer\",\n            ]);\n            break;\n        case \"document\":\n            types = getCollectionTypes(family.toLowerCase()).filter((type) => type !== \"CAD Drawing\" && type !== \"Report Template\");\n            types = types.concat(\"Microsoft Excel\");\n            break;\n        case \"project\":\n            types = [\"Hub Project\"];\n            break;\n        default:\n            types = getCollectionTypes(family.toLowerCase());\n    }\n    return types;\n}\n//# sourceMappingURL=get-family.js.map","/* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { cloneObject, createId } from \"./util\";\nimport { getWithDefault } from \"./objects/get-with-default\";\n/**\n * Allows an application to track a series of operations, storing information\n * about the arguments passes in and the results returned\n *\n * ```js\n * import { OperationStack } from '@esri/solution-common';\n *\n * const stack = new OperationStack();\n *\n * // start an operation by type\n * const id = stack.start('getItem');\n * //.. work happens...\n * stack.finish(id);\n *\n * // start an operation with an Operation object\n * stack.start({\n *   id: 'createItem_1',\n *   type: 'createItem',\n *   inputs: {\n *    item: {...truncated...},\n *    portal: 'https://www.arcgis.com',\n *    username: 'jsmith'\n *   },\n * });\n * // make the call\n * stack.finish('createItem_1', {newItemId: '00cf213'});\n *\n * // later you can get that information back out of the stack\n * const prevOp = stack.getOperation('createItem_1);\n *\n * // and if you need to roll back you can use the\n * // .cleanup and .output properties to help orchestrate\n *\n * ```\n *\n *\n * Can be used to implement \"atomic\" operations in an environment that does not\n * have this as a core feature\n */\nexport default class OperationStack {\n    /**\n     * Creates an instance of OperationStack.\n     * @memberof OperationStack\n     */\n    constructor() {\n        this.operations = [];\n    }\n    /**\n     * Start an Operation\n     *\n     * ```js\n     * const stack = new OperationStack();\n     * stack.startOperation({\n     *  id: 'get-bc3',\n     *  type: 'getItem',\n     *  cleanup: 'n/a',\n     *  inputs: {\n     *    id: 'bc3',\n     *    owner: 'vader'\n     *  }\n     * });\n     * // do work\n     * stack.finish('get-bc3');\n     * ```\n     *\n     *\n     * @param {IOperation} operation\n     * @memberof OperationStack\n     */\n    startOperation(operation) {\n        const op = cloneObject(operation);\n        op.startedAt = new Date().getTime();\n        op.state = \"working\";\n        this.operations.push(op);\n    }\n    /**\n     * Start an operation without requiring a full operation\n     *\n     * ```js\n     * const opId = stack.start('getItems');\n     * //...work happens\n     * stack.finish(opId);\n     * ```\n     *\n     * @param {string} type Type of the operation. i.e. getItem\n     * @param {Record<string, unknown>} [params] optionally pass in id, inputs, cleanup\n     * @returns {string} Identifier of the new stack entry\n     * @memberof OperationStack\n     */\n    start(type, params) {\n        const op = {\n            type,\n            id: getWithDefault(params, \"id\", createId(`${type}_`)),\n            inputs: getWithDefault(params, \"inputs\", {}),\n            cleanup: getWithDefault(params, \"cleanup\", \"n/a\"),\n            startedAt: new Date().getTime(),\n            state: \"working\"\n        };\n        this.operations.push(op);\n        return op.id;\n    }\n    /**\n     * Returns a reference to an Operation\n     *\n     * @param {string} id Unique Identifier\n     * @returns {Operation}\n     * @memberof OperationStack\n     */\n    getOperation(id) {\n        return this.operations.find(o => o.id === id);\n    }\n    /**\n     * Returns reference to the operations array\n     *\n     * @returns {Operation[]}\n     * @memberof OperationStack\n     */\n    getOperations() {\n        return this.operations;\n    }\n    /**\n     * Inform the stack that an operation has finished.\n     *\n     * This will append in a duration property, and mark\n     * the state as 'completed'.\n     *\n     * @param {string} id Unique identifier of the Operation\n     * @param {Record<string, unknown>} [options] outputs\n     * @memberof OperationStack\n     */\n    finish(id, options) {\n        const op = this.getOperation(id);\n        if (op) {\n            op.duration = new Date().getTime() - op.startedAt;\n            op.state = \"completed\";\n            if (options) {\n                op.output = cloneObject(options);\n            }\n        }\n        else {\n            throw new Error(`No operation with id ${id} present in stack`);\n        }\n    }\n    /**\n     * Merge a serialized operation stack into\n     * a stack instance\n     *\n     * ```js\n     *    import { OperationStack } from '@esri/solution-common';\n     *    function someFunction() {\n     *      const stack = new OperationStack();\n     *      stack.start('getItem', {id: 'get-bc3'});\n     *      // do some work...\n     *      stack.finish('get-bc3');\n     *\n     *      const itm = {title: 'Fake Item', type: 'Web Map'};\n     *      // create an entry for the function we are about to call...\n     *      stack.start('createItem', {id: 'createItem_01', inputs: {item: itm}});\n     *      // call a function that does work, and has it's own stack\n     *      // and returns a serialized version as part of it's results\n     *      return createItem(itm)\n     *      .then((result) => {\n     *        // tell the stack the last operation finished...\n     *        stack.finish('createItem_01');\n     *        // merge in the stack from the function we called\n     *        stack.merge(result.stack);\n     *        // > stack.getCompleted().length === 3\n     *      });\n     *    }\n     *\n     *    function createItem (itm) {\n     *      const otherStack = new OperationStack();\n     *      const id = otherStack.start('createItem');\n     *      // make calls to create item etc\n     *      otherStack.finish(id, {itemId: newItem.id});\n     *      otherStack.start('protectItem', {id: 'protect-00c'});\n     *      // make call to protect item...\n     *      otherStack.finish('protect-00c');\n     *      // all done... return a result with a stack\n     *      return Promise.resolve({\n     *        success:true,\n     *        stack: otherStack.serialize()\n     *      });\n     *    }\n     * ```\n     *\n     *  Typically used to create a comprehensive list of operations\n     *  when a function returns a `SerializedOperationStack` as part of\n     *  it's response\n     *\n     *\n     * @param {ISerializedOperationStack} stack\n     * @memberof OperationStack\n     */\n    merge(stack) {\n        this.operations = [...this.operations, ...stack.operations];\n    }\n    /**\n     * Get a list of the completed operations\n     *\n     * @returns {IOperation[]}\n     * @memberof OperationStack\n     */\n    getCompleted() {\n        return cloneObject(this.operations.filter(e => e.state === \"completed\"));\n    }\n    /**\n     *  Return an array of working operations\n     *\n     * @returns {IOperation[]}\n     * @memberof OperationStack\n     */\n    getWorking() {\n        return cloneObject(this.operations.filter(e => e.state === \"working\"));\n    }\n    /**\n     * Serialize the completed operations into a set of\n     * human readable messages, sorted by the startedAt timestamp\n     *\n     *\n     * @returns {string}\n     * @memberof IOperationStack\n     */\n    toString() {\n        // sort the operations by StartedAt\n        const allOps = this.operations.sort((a, b) => {\n            if (a.startedAt < b.startedAt) {\n                return -1;\n            }\n            if (b.startedAt < a.startedAt) {\n                return 1;\n            }\n            return 0;\n        });\n        return allOps.map(getOperationMessage).join(\"\\n\");\n    }\n    /**\n     * Serialize the stack into simple objects\n     *\n     * @returns {ISerializedOperationStack}\n     * @memberof OperationStack\n     */\n    serialize() {\n        return {\n            operations: cloneObject(this.getOperations())\n        };\n    }\n}\nfunction getOperationMessage(op) {\n    let msg = `${op.startedAt} : Operation ${op.id} started with inputs ${JSON.stringify(op.inputs)} but was not completed`;\n    if (op.state === \"completed\") {\n        msg = `${op.startedAt} : Operation ${op.id} took ${op.duration} ms with inputs ${JSON.stringify(op.inputs)} and output ${op.output ? JSON.stringify(op.output) : \"n/a\"}`;\n    }\n    return msg;\n}\n//# sourceMappingURL=OperationStack.js.map","import { getProp } from \"../objects/get-prop\";\nimport { getPortalBaseFromOrgUrl } from \"../urls/getPortalBaseFromOrgUrl\";\nimport { getPortal } from \"@esri/arcgis-rest-portal\";\n/**\n * Fetches the portal for a given org.\n *\n * @param orgId\n * @param options request options\n * @returns\n */\nexport function fetchOrg(orgId, options) {\n    const orgPortalUrl = getProp(options, \"portal\") ||\n        getProp(options, \"authentication.portal\") ||\n        \"www.arcgis.com\";\n    // In order to get the correct response, we must pass options.portal\n    // as a base portal url (e.g., www.arcgis.com, qaext.arcgis.com, etc)\n    // **not** an org portal (i.e. org.maps.arcgis.com).\n    const basePortalUrl = `${getPortalBaseFromOrgUrl(orgPortalUrl)}/sharing/rest`;\n    return getPortal(orgId, Object.assign(Object.assign({}, options), { portal: basePortalUrl }));\n}\n//# sourceMappingURL=fetch-org.js.map","import { getItemData, getItemGroups, getUser, } from \"@esri/arcgis-rest-portal\";\nimport { getAllLayersAndTables, getService, parseServiceUrl, } from \"@esri/arcgis-rest-feature-layer\";\nimport { createOperationPipeline } from \"../utils\";\nimport OperationStack from \"../OperationStack\";\n// TODO: move these functions here under /items\nimport { getItemMetadata } from \"@esri/arcgis-rest-portal\";\nimport { getItemOrgId } from \"../content/_internal/internalContentUtils\";\nimport { fetchOrg } from \"../org\";\nimport { isServicesDirectoryDisabled } from \"./is-services-directory-disabled\";\n/**\n * Lazy load XML parsing library and parse metadata XML into JSON\n * @param metadataXml\n * @returns\n */\nasync function parseMetadataXml(metadataXml) {\n    // lazy load xml parsing library\n    const { parse } = await import(\"fast-xml-parser\");\n    // return XML parsed as JSON\n    const opts = {\n        // options for fastXmlParser to read tag attrs\n        ignoreAttributes: false,\n        attributeNamePrefix: \"@_\",\n        textNodeName: \"#value\",\n    };\n    return parse(metadataXml, opts);\n}\n/**\n * Fetch an [item's metadata](https://doc.arcgis.com/en/arcgis-online/manage-data/metadata.htm) from a portal\n * and parse and return it as JSON\n * @param id item id\n * @param requestOptions\n */\nasync function fetchContentMetadata(id, requestOptions) {\n    try {\n        const metadataXml = await getItemMetadata(id, requestOptions);\n        return await parseMetadataXml(metadataXml);\n    }\n    catch (_) {\n        // many items don't have metadata and the request will 404\n        // in these cases we don't want to treat it as an error\n        // content.metadata === null signals to consumers that\n        // we attempted to fetch the metadata, but it doesn't exist\n        // TODO: we should probably still throw the error if it's not a 404\n        return null;\n    }\n}\nconst enrichGroupIds = (input) => {\n    const { data, stack, requestOptions } = input;\n    const opId = stack.start(\"enrichGroupIds\");\n    return getItemGroups(data.item.id, requestOptions)\n        .then((response) => {\n        const { admin, member, other } = response;\n        const groupIds = [...admin, ...member, ...other].map((group) => group.id);\n        stack.finish(opId);\n        return {\n            data: Object.assign(Object.assign({}, data), { groupIds }),\n            stack,\n            requestOptions,\n        };\n    })\n        .catch((error) => handleEnrichmentError(error, input, opId));\n};\nconst enrichMetadata = (input) => {\n    const { data, stack, requestOptions } = input;\n    const opId = stack.start(\"enrichMetadata\");\n    return fetchContentMetadata(data.item.id, requestOptions).then((metadata) => {\n        stack.finish(opId);\n        return {\n            data: Object.assign(Object.assign({}, data), { metadata }),\n            stack,\n            requestOptions,\n        };\n    });\n    // TODO: currently fetchContentMetadata will never throw, but\n    // if we update it to throw for non-404 errors, need to uncomment this:\n    // .catch((error) => handleEnrichmentError(error, input, opId));\n};\nconst enrichOwnerUser = (input) => {\n    const { data, stack, requestOptions } = input;\n    const opId = stack.start(\"enrichOwner\");\n    // w/o the : any here, I get a compile error about\n    // .authentication being incompatible w/ UserSession\n    const options = Object.assign({ username: data.item.owner }, requestOptions);\n    return getUser(options)\n        .then((ownerUser) => {\n        stack.finish(opId);\n        return {\n            data: Object.assign(Object.assign({}, data), { ownerUser }),\n            stack,\n            requestOptions,\n        };\n    })\n        .catch((error) => handleEnrichmentError(error, input, opId));\n};\n// Note, this MUST be run after `enrichOwnerUser` to access the correct orgId during processing.\n// `item.orgId` is only SOMETIMES returned by Portal, so we need the ownerUser's orgId as a backup.\n//\n// If an orgId isn't present on either the item or the ownerUser, this operation will be skipped.\nconst enrichOrg = (input) => {\n    const { data, stack, requestOptions } = input;\n    const opId = stack.start(\"enrichOrg\");\n    const orgId = getItemOrgId(data.item, data.ownerUser);\n    // Only fetch the org if an explicit orgId is present\n    const orgPromise = orgId\n        ? fetchOrg(orgId, requestOptions)\n        : Promise.resolve(undefined);\n    return orgPromise\n        .then((org) => {\n        stack.finish(opId);\n        return {\n            data: Object.assign(Object.assign({}, data), { org }),\n            stack,\n            requestOptions,\n        };\n    })\n        .catch((error) => handleEnrichmentError(error, input, opId));\n};\nconst enrichData = (input) => {\n    const { data, stack, requestOptions } = input;\n    const opId = stack.start(\"enrichData\");\n    return getItemData(data.item.id, requestOptions)\n        .then((itemData) => {\n        stack.finish(opId);\n        return { data: Object.assign(Object.assign({}, data), { data: itemData }), stack, requestOptions };\n    })\n        .catch((error) => handleEnrichmentError(error, input, opId));\n};\nconst enrichServer = (input) => {\n    const { data, stack, requestOptions } = input;\n    const opId = stack.start(\"enrichServer\");\n    const url = parseServiceUrl(data.item.url);\n    const options = Object.assign(Object.assign({}, requestOptions), { url });\n    return Promise.all([\n        getService(options),\n        isServicesDirectoryDisabled(data.item, requestOptions),\n    ])\n        .then(([server, servicesDirectoryDisabled]) => {\n        stack.finish(opId);\n        return {\n            data: Object.assign(Object.assign({}, data), { server: Object.assign(Object.assign({}, server), { servicesDirectoryDisabled }) }),\n            stack,\n            requestOptions,\n        };\n    })\n        .catch((error) => handleEnrichmentError(error, input, opId));\n};\nconst enrichLayers = (input) => {\n    const { data, stack, requestOptions } = input;\n    const opId = stack.start(\"enrichLayers\");\n    const url = data.item.url;\n    const options = Object.assign(Object.assign({}, requestOptions), { url });\n    return (getAllLayersAndTables(options)\n        // merge layers and tables into a single array\n        // and filter out any group layers\n        .then((response) => {\n        const merged = [...response.layers, ...response.tables];\n        return merged.filter((layer) => layer.type !== \"Group Layer\");\n    })\n        .then((layers) => {\n        stack.finish(opId);\n        return { data: Object.assign(Object.assign({}, data), { layers }), stack, requestOptions };\n    })\n        .catch((error) => handleEnrichmentError(error, input, opId)));\n};\n// add the error to the content.errors,\n// log current stack operation as finished with an error\n// and return output that can be piped into the next operation\nconst handleEnrichmentError = (error, input, opId) => {\n    const { data, stack, requestOptions } = input;\n    stack.finish(opId, { error });\n    return {\n        data: Object.assign(Object.assign({}, data), { errors: getEnrichmentErrors(error, data.errors) }),\n        stack,\n        requestOptions,\n    };\n};\nconst enrichmentOperations = {\n    groupIds: enrichGroupIds,\n    metadata: enrichMetadata,\n    ownerUser: enrichOwnerUser,\n    org: enrichOrg,\n    data: enrichData,\n    server: enrichServer,\n    layers: enrichLayers,\n};\n/**\n * convert an error to an enrichment error info format\n * and optionally append it to an existing array of those\n * @param error\n * @param errors an array of existing enrichment error info\n * @returns a new array of enrichment error info\n * @private\n */\nexport const getEnrichmentErrors = (error, errors = []) => {\n    const message = typeof error === \"string\"\n        ? /* istanbul ignore next our tests only throw Error objects */\n            error\n        : error.message;\n    return [\n        ...errors,\n        {\n            // NOTE: for now we just return the message and type \"Other\"\n            // but we could later introspect for HTTP or AGO errors\n            // and/or return the status code if available\n            type: \"Other\",\n            message,\n        },\n    ];\n};\n/**\n * Fetch enrichments for an item\n * @param item\n * @param enrichments the list of enrichments to fetch\n * @param requestOptions\n * @returns an object with the item and enrichments\n * @private\n */\nexport const fetchItemEnrichments = (item, enrichments, requestOptions) => {\n    // create a pipeline of enrichment operations\n    const operations = enrichments.reduce((ops, enrichment) => {\n        const operation = enrichmentOperations[enrichment];\n        // only include the enrichments that we know how to fetch\n        operation && ops.push(operation);\n        return ops;\n    }, []);\n    const pipeline = createOperationPipeline(operations);\n    // execute pipeline and return the item and enrichments\n    return pipeline({\n        data: { item },\n        stack: new OperationStack(),\n        requestOptions,\n    }).then((output) => {\n        // TODO: send telemetry so we have info on what enrichments are requested and possible errors\n        return output.data;\n    });\n};\n//# sourceMappingURL=_enrichments.js.map","import { getHubApiUrl } from \"./api\";\nimport { buildUrl } from \"./urls/build-url\";\n/**\n * remote server error\n */\nexport class RemoteServerError extends Error {\n    constructor(message, url, status) {\n        super(message);\n        this.status = status;\n        this.url = url;\n    }\n}\n/**\n * ```js\n * import { hubApiRequest } from \"@esri/hub-common\";\n * //\n * hubApiRequest(\n *   \"/datasets\",\n *   requestOptions\n * })\n *   .then(response);\n * ```\n * make a request to the Hub API\n * @param route API route\n * @param requestOptions request options\n */\nexport function hubApiRequest(route, requestOptions) {\n    // merge in default request options\n    const options = Object.assign({ \n        // why do we default to GET w/ our API?\n        httpMethod: \"GET\" }, requestOptions);\n    // use fetch override if any\n    const _fetch = options.fetch || fetch;\n    // merge in default headers\n    const headers = Object.assign({ \"Content-Type\": \"application/json\" }, options.headers);\n    // build query params/body based on requestOptions.params\n    let query;\n    let body;\n    if (options.httpMethod === \"GET\") {\n        // pass params in query string\n        query = options.params;\n    }\n    else {\n        // pass params in request body\n        body = JSON.stringify(options.params);\n    }\n    // build Hub API URL\n    const url = buildUrl({\n        host: getHubApiUrl(options),\n        path: `/api/v3/${route}`.replace(/\\/\\//g, \"/\"),\n        query,\n    });\n    return _fetch(url, {\n        method: options.httpMethod,\n        headers,\n        body,\n    }).then((resp) => {\n        if (resp.ok) {\n            return resp.json();\n        }\n        else {\n            throw new RemoteServerError(resp.statusText, url, resp.status);\n        }\n    });\n}\n//# sourceMappingURL=request.js.map","/**\n * Parse an IncludeSpec from the include string\n * Include String structure:\n * - `enrichment{.deep.path} AS propertyName`\n *\n * Examples\n * - `server.layers.0.name as layerName` -> use the `server` enrichment, extract the name of the first layer and attach that as `layerName`\n * - `server.layers` ->  use the `server` enrichment, attach the `layers` array as `layers`\n * @param include\n * @returns\n */\nexport function parseInclude(include) {\n    // TODO: Validate enrichment? Not clear how we'd do that other than a manully maintained string list\n    const parts = include.split(\" AS \");\n    const path = parts[0];\n    const prop = parts[1] || path.split(\".\").reverse()[0];\n    const enrichment = path.split(\".\")[0];\n    // We need the actual list of string values so we can verify\n    // what we get in, is infact a valid enrichment.\n    const spec = {\n        enrichment,\n        path,\n        prop,\n    };\n    return spec;\n}\n//# sourceMappingURL=parseInclude.js.map","import { getItem } from \"@esri/arcgis-rest-portal\";\nimport { getFamily } from \"../content/get-family\";\nimport { getHubRelativeUrl } from \"../content/_internal/internalContentUtils\";\nimport { PropertyMapper } from \"../core/_internal/PropertyMapper\";\nimport { getItemBySlug } from \"../items/slugs\";\nimport { fetchItemEnrichments } from \"../items/_enrichments\";\nimport { fetchModelFromItem } from \"../models\";\nimport { parseInclude } from \"../search/_internal/parseInclude\";\nimport { isGuid, mapBy } from \"../utils\";\nimport { computeProps } from \"./_internal/computeProps\";\nimport { getPropertyMap } from \"./_internal/getPropertyMap\";\nimport { unique } from \"../util\";\nimport { getProp } from \"../objects/get-prop\";\nimport { getItemThumbnailUrl } from \"../resources/get-item-thumbnail-url\";\nimport { getItemHomeUrl } from \"../urls/get-item-home-url\";\nimport { getItemIdentifier } from \"../items\";\n/**\n * @private\n * Get a Hub Project by id or slug\n * @param identifier item id or slug\n * @param requestOptions\n */\nexport async function fetchProject(identifier, requestOptions) {\n    let getPrms;\n    if (isGuid(identifier)) {\n        // get item by id\n        getPrms = getItem(identifier, requestOptions);\n    }\n    else {\n        getPrms = getItemBySlug(identifier, requestOptions);\n    }\n    return getPrms.then((item) => {\n        if (!item)\n            return null;\n        return convertItemToProject(item, requestOptions);\n    });\n}\n/**\n * @private\n * Convert an Hub Project Item into a Hub Project, fetching any additional\n * information that may be required\n * @param item\n * @param auth\n * @returns\n */\nexport async function convertItemToProject(item, requestOptions) {\n    const model = await fetchModelFromItem(item, requestOptions);\n    // TODO: In the future we will handle the boundary fetching from resource\n    const mapper = new PropertyMapper(getPropertyMap());\n    const prj = mapper.modelToObject(model, {});\n    return computeProps(model, prj, requestOptions);\n}\n/**\n * @private\n * Fetch project specific enrichments\n * @param item\n * @param include\n * @param requestOptions\n * @returns\n */\nexport async function enrichProjectSearchResult(item, include, requestOptions) {\n    // Create the basic structure\n    const result = {\n        access: item.access,\n        id: item.id,\n        type: item.type,\n        name: item.title,\n        owner: item.owner,\n        typeKeywords: item.typeKeywords,\n        tags: item.tags,\n        categories: item.categories,\n        summary: item.snippet || item.description,\n        createdDate: new Date(item.created),\n        createdDateSource: \"item.created\",\n        updatedDate: new Date(item.modified),\n        updatedDateSource: \"item.modified\",\n        family: getFamily(item.type),\n        links: {\n            self: \"not-implemented\",\n            siteRelative: \"not-implemented\",\n            thumbnail: \"not-implemented\",\n        },\n    };\n    // default includes\n    const DEFAULTS = [];\n    // merge includes\n    include = [...DEFAULTS, ...include].filter(unique);\n    // Parse the includes into a valid set of enrichments\n    const specs = include.map(parseInclude);\n    // Extract out the low-level enrichments needed\n    const enrichments = mapBy(\"enrichment\", specs).filter(unique);\n    // fetch the enrichments\n    let enriched = {};\n    if (enrichments.length) {\n        // TODO: Look into caching for the requests in fetchItemEnrichments\n        enriched = await fetchItemEnrichments(item, enrichments, requestOptions);\n    }\n    // map the enriched props onto the result\n    specs.forEach((spec) => {\n        result[spec.prop] = getProp(enriched, spec.path);\n    });\n    // Handle links\n    // TODO: Link handling should be an enrichment\n    result.links.thumbnail = getItemThumbnailUrl(item, requestOptions);\n    result.links.self = getItemHomeUrl(result.id, requestOptions);\n    const identifier = getItemIdentifier(item);\n    result.links.siteRelative = getHubRelativeUrl(result.type, identifier, item.typeKeywords);\n    return result;\n}\n//# sourceMappingURL=fetch.js.map","import { removeItem } from \"@esri/arcgis-rest-portal\";\nimport { getFamily } from \"../content/get-family\";\nimport { fetchSiteModel } from \"./fetchSiteModel\";\nimport { PropertyMapper } from \"../core/_internal/PropertyMapper\";\nimport { handleDomainChanges } from \"./_internal\";\nimport { fetchItemEnrichments } from \"../items/_enrichments\";\nimport { parseInclude } from \"../search/_internal/parseInclude\";\nimport { getHubRelativeUrl } from \"../content/_internal/internalContentUtils\";\nimport { applyPermissionMigration } from \"./_internal/applyPermissionMigration\";\nimport { computeProps } from \"./_internal/computeProps\";\nimport { getPropertyMap } from \"./_internal/getPropertyMap\";\nimport { constructSlug, setSlugKeyword } from \"../items/slugs\";\nimport { slugify } from \"../utils/slugify\";\nimport { ensureUniqueDomainName } from \"./domains/ensure-unique-domain-name\";\nimport { stripProtocol } from \"../urls/strip-protocol\";\nimport { getHubApiUrl } from \"../api\";\nimport { getOrgDefaultTheme } from \"./themes\";\nimport { cloneObject, unique } from \"../util\";\nimport { createModel, fetchModelFromItem, getModel, updateModel, } from \"../models\";\nimport { addSiteDomains } from \"./domains/addSiteDomains\";\nimport { removeDomainsBySiteId } from \"./domains/remove-domains-by-site-id\";\nimport { mapBy } from \"../utils\";\nimport { getProp, setProp } from \"../objects\";\nimport { getItemThumbnailUrl } from \"../resources/get-item-thumbnail-url\";\nimport { catalogMigration } from \"./_internal/catalogMigration\";\nimport { setDiscussableKeyword } from \"../discussions\";\nexport const HUB_SITE_ITEM_TYPE = \"Hub Site Application\";\nexport const ENTERPRISE_SITE_ITEM_TYPE = \"Site Application\";\n/**\n * Default values of a IHubSite\n */\nconst DEFAULT_SITE = {\n    name: \"No title provided\",\n    tags: [],\n    typeKeywords: [\"Hub Site\", \"hubSite\", \"DELETEMESITE\"],\n    legacyCapabilities: [\n        \"api_explorer\",\n        \"pages\",\n        \"my_data\",\n        \"social_logins\",\n        \"json_chart_card\",\n        \"document_iframes\",\n        \"items_view\",\n        \"app_page\",\n        \"underlinedLinks\",\n        \"globalNav\",\n        \"socialSharing\",\n    ],\n    catalog: {\n        schemaVersion: 1,\n    },\n    subdomain: \"\",\n    defaultHostname: \"\",\n    customHostname: \"\",\n    clientId: \"\",\n    map: null,\n    feeds: {},\n    pages: [],\n    theme: null,\n    contentViews: {\n        sidePanelOpen: {\n            app: true,\n            map: true,\n            dataset: true,\n            document: true,\n            feedback: true,\n        },\n    },\n};\n/**\n * Default values for a new HubSite Model\n */\nconst DEFAULT_SITE_MODEL = {\n    item: {\n        // type: intentionally left out as we need to\n        // set that based on portal/enterprise\n        title: \"No Title Provided\",\n        description: \"No Description Provided\",\n        snippet: \"\",\n        tags: [],\n        typeKeywords: [\"Hub Site\", \"hubSite\", \"DELETEMESITE\"],\n        properties: {\n            slug: \"\",\n            orgUrlKey: \"\",\n            defaultHostname: \"\",\n            customHostname: \"\",\n            clientId: \"\",\n            subdomain: \"\",\n            schemaVersion: 1.5,\n        },\n        url: \"\",\n    },\n    data: {\n        catalog: {\n            groups: [],\n        },\n        feeds: {},\n        values: {\n            title: \"\",\n            defaultHostname: \"\",\n            customHostname: \"\",\n            subdomain: \"\",\n            faviconUrl: \"\",\n            uiVersion: \"2.4\",\n            clientId: \"\",\n            map: {\n                basemaps: {},\n            },\n            defaultExtent: {},\n            pages: [],\n            theme: {},\n            layout: {\n                sections: [],\n                header: {\n                    component: {\n                        name: \"site-header\",\n                        settings: {\n                            fullWidth: false,\n                            iframeHeight: \"150px\",\n                            iframeUrl: \"\",\n                            links: [],\n                            logoUrl: \"\",\n                            title: \"default site\",\n                            markdown: \"\",\n                            headerType: \"default\",\n                            schemaVersion: 3,\n                            showLogo: true,\n                            showTitle: true,\n                            logo: {\n                                display: {},\n                                state: \"valid\",\n                            },\n                            shortTitle: \"\",\n                            menuLinks: [],\n                            socialLinks: {\n                                facebook: {},\n                                twitter: {},\n                                instagram: {},\n                                youtube: {},\n                            },\n                        },\n                    },\n                    showEditor: false,\n                },\n                footer: {\n                    component: {\n                        name: \"site-footer\",\n                        settings: {\n                            footerType: \"none\",\n                            markdown: \"\",\n                            schemaVersion: 2.1,\n                        },\n                    },\n                    showEditor: false,\n                },\n            },\n            contentViews: {\n                sidePanelOpen: {\n                    app: true,\n                    map: true,\n                    dataset: true,\n                    document: true,\n                    feedback: true,\n                },\n            },\n        },\n    },\n};\n// TODO: Add OperationStack & Error Handling\n/**\n * Create a new Hub Site\n *\n * Minimum properties are `name` and `org`\n * @param partialSite\n * @param requestOptions\n */\nexport async function createSite(partialSite, requestOptions) {\n    const site = Object.assign(Object.assign({}, DEFAULT_SITE), partialSite);\n    const portal = requestOptions.portalSelf;\n    // Set the type based on the environment we are working in\n    site.type = requestOptions.isPortal\n        ? ENTERPRISE_SITE_ITEM_TYPE\n        : HUB_SITE_ITEM_TYPE;\n    // Create a slug from the title if one is not passed in\n    if (!site.slug) {\n        site.slug = constructSlug(site.name, site.orgUrlKey);\n    }\n    // Ensure slug is  unique\n    // site.slug = await getUniqueSlug({ slug: site.slug }, requestOptions);\n    // add slug to keywords\n    site.typeKeywords = setSlugKeyword(site.typeKeywords, site.slug);\n    if (!site.subdomain) {\n        site.subdomain = slugify(site.name);\n    }\n    site.subdomain = await ensureUniqueDomainName(site.subdomain, requestOptions);\n    // Domains\n    if (!requestOptions.isPortal) {\n        // now that we know the subdomain is available, set the defaultHostname\n        site.defaultHostname = `${site.subdomain}-${portal.urlKey}.${stripProtocol(getHubApiUrl(requestOptions))}`;\n        // set the url\n        site.url = `https://${site.customHostname ? site.customHostname : site.defaultHostname}`;\n    }\n    else {\n        // Portal Sites use subdomain in hash based router\n        site.typeKeywords.push(`hubsubdomain|${site.subdomain}`.toLowerCase());\n        site.url = `${requestOptions.authentication.portal.replace(`/sharing/rest`, `/apps/sites`)}/#/${site.subdomain}`;\n    }\n    // Note:  We used to use adlib for this, but it's much harder to\n    // use templates with typescript. i.e. you can't assign a string template\n    // to a property defined as `IExtent` without using `as unknown as ...`\n    // which basically removes typechecking\n    site.orgUrlKey = portal.urlKey;\n    // override only if not set...\n    if (!site.theme) {\n        site.theme = getOrgDefaultTheme(portal);\n    }\n    if (!site.defaultExtent) {\n        site.defaultExtent = portal.defaultExtent;\n    }\n    if (!site.culture) {\n        site.culture = portal.culture;\n    }\n    // pull the basemap from portalSelf\n    if (!getProp(site, \"map.basemaps.primary\")) {\n        setProp(\"map.basemaps.primary\", portal.defaultBasemap, site);\n    }\n    // Put the title into the header\n    if (!getProp(site, \"layout.header.component.settings.title\")) {\n        setProp(\"layout.header.component.settings.title\", site.name, site);\n    }\n    site.typeKeywords = setDiscussableKeyword(site.typeKeywords, site.isDiscussable);\n    // Now convert the IHubSite into an IModel\n    const mapper = new PropertyMapper(getPropertyMap());\n    let model = mapper.objectToModel(site, cloneObject(DEFAULT_SITE_MODEL));\n    // create the backing item\n    model = await createModel(model, requestOptions);\n    // Register as an app\n    // NOTE: Site registration needs to happen via the hub api domain api calls\n    // See https://devtopia.esri.com/dc/hub/issues/6390 for info\n    // Register domain and at the same time register the site as an application\n    // for portal, this will return a single entry with just the clientKey\n    const domainResponses = await addSiteDomains(model, requestOptions);\n    model.data.values.clientId = domainResponses[0].clientKey;\n    // update the model\n    const updatedModel = await updateModel(model, requestOptions);\n    // convert the model into a IHubSite and return\n    return mapper.modelToObject(updatedModel, {});\n}\n/**\n * Update a Hub Site\n *\n * This checks for and applies domain changes\n * @param site\n * @param requestOptions\n * @returns\n */\nexport async function updateSite(site, requestOptions) {\n    site.typeKeywords = setDiscussableKeyword(site.typeKeywords, site.isDiscussable);\n    // convert IHubSite to model\n    const siteModel = convertSiteToModel(site, requestOptions);\n    // Fetch backing model from the portal\n    const currentModel = await getModel(site.id, requestOptions);\n    // handle any domain changes\n    await handleDomainChanges(siteModel, currentModel, requestOptions);\n    if (siteModel.item.properties.slug !== currentModel.item.properties.slug) {\n        // ensure slug to keywords\n        siteModel.item.typeKeywords = setSlugKeyword(siteModel.item.typeKeywords, siteModel.item.properties.slug);\n    }\n    // send updates to the Portal API and get back the updated site model\n    const updatedSiteModel = await updateModel(siteModel, requestOptions);\n    // convert that back into a IHubSite and return it\n    const updatedSite = convertModelToSite(updatedSiteModel, requestOptions);\n    return updatedSite;\n}\n/**\n * Remove a Hub Site\n *\n * This simply removes the Site item, and it's associated domain records.\n * This does not remove any Teams/Groups or content associated with the\n * Site\n * @param id\n * @param requestOptions\n * @returns\n */\nexport async function deleteSite(id, requestOptions) {\n    // For AGO we need to remove the domain records for the site\n    if (!requestOptions.isPortal) {\n        await removeDomainsBySiteId(id, requestOptions);\n    }\n    // now we can remove the item\n    const ro = Object.assign(Object.assign({}, requestOptions), { id });\n    await removeItem(ro);\n    return;\n}\n/**\n * Returns site model given various kinds of identifier\n *\n * @param identifier - a site item ID, site hostname, enterprise site slug, or full site URL\n * @param requestOptions\n * @private // remove when we remove existing fetchSite function\n */\nexport async function fetchSite(identifier, requestOptions) {\n    // get the model\n    const model = await fetchSiteModel(identifier, requestOptions);\n    // convert to IHubSite\n    return convertModelToSite(model, requestOptions);\n}\n/**\n * @internal\n * Convert an IModel for a Hub Site Item into an IHubSite\n * @param model\n * @param requestOptions\n * @returns\n */\nexport function convertModelToSite(model, requestOptions) {\n    // Add permissions based on Groups\n    // This may get moved to a formal schema migration in the future but for now\n    // we can do it here as there is no ux for managing permissions yet.\n    let migrated = applyPermissionMigration(model);\n    // Ensure we have a Catalog structure\n    migrated = catalogMigration(migrated);\n    // convert to site\n    const mapper = new PropertyMapper(getPropertyMap());\n    const site = mapper.modelToObject(migrated, {});\n    // compute additional properties\n    return computeProps(model, site, requestOptions);\n}\n/**\n * @internal\n * Convert an IHubSite into an IModel\n * @param site\n * @param requestOptions\n * @returns\n */\nexport function convertSiteToModel(site, requestOptions) {\n    // create the mapper\n    const mapper = new PropertyMapper(getPropertyMap());\n    // applying the site onto the default model ensures that a minimum\n    // set of properties exist, regardless what may have been done to\n    // the IHubSite pojo\n    return mapper.objectToModel(site, cloneObject(DEFAULT_SITE_MODEL));\n}\n/**\n * Convert a Hub Site Application item into a Hub Site, fetching any\n * additional information that may be required\n * @param item\n * @param auth\n * @returns\n */\nexport async function convertItemToSite(item, requestOptions) {\n    const model = await fetchModelFromItem(item, requestOptions);\n    return convertModelToSite(model, requestOptions);\n}\n/**\n * Fetch Site specific enrichments\n * @param item\n * @param include\n * @param requestOptions\n * @returns\n */\nexport async function enrichSiteSearchResult(item, include, requestOptions) {\n    // Create the basic structure\n    const result = {\n        access: item.access,\n        id: item.id,\n        type: item.type,\n        name: item.title,\n        owner: item.owner,\n        typeKeywords: item.typeKeywords,\n        tags: item.tags,\n        categories: item.categories,\n        summary: item.snippet || item.description,\n        createdDate: new Date(item.created),\n        createdDateSource: \"item.created\",\n        updatedDate: new Date(item.modified),\n        updatedDateSource: \"item.modified\",\n        family: getFamily(item.type),\n        links: {\n            self: \"not-implemented\",\n            siteRelative: \"not-implemented\",\n            thumbnail: \"not-implemented\",\n        },\n    };\n    // default includes\n    const DEFAULTS = [];\n    // merge includes\n    include = [...DEFAULTS, ...include].filter(unique);\n    // Parse the includes into a valid set of enrichments\n    const specs = include.map(parseInclude);\n    // Extract out the low-level enrichments needed\n    const enrichments = mapBy(\"enrichment\", specs).filter(unique);\n    // fetch the enrichments\n    let enriched = {};\n    if (enrichments.length) {\n        // TODO: Look into caching for the requests in fetchItemEnrichments\n        enriched = await fetchItemEnrichments(item, enrichments, requestOptions);\n    }\n    // map the enriched props onto the result\n    specs.forEach((spec) => {\n        result[spec.prop] = getProp(enriched, spec.path);\n    });\n    // Handle links\n    result.links.thumbnail = getItemThumbnailUrl(item, requestOptions);\n    result.links.self = item.url;\n    result.links.siteRelative = getHubRelativeUrl(result.type, result.id, item.typeKeywords);\n    return result;\n}\n//# sourceMappingURL=HubSites.js.map","/**\n * Use this module for functions that do not need to be used by consumers (yet),\n * but may be shared between hub.js modules, and/or need to be tested\n * to get 100% coverage w/o writing cumbersome tests of higher level functions.\n *\n * Consuming will not be able to import these functions.\n *\n * It's probably a good pattern to add functions here first and then\n * move them to index.ts only when they are needed by a consumer.\n */\nimport { parseServiceUrl } from \"@esri/arcgis-rest-feature-layer\";\nimport { PublisherSource } from \"../../core\";\nimport { bBoxToExtent, extentToBBox, extentToPolygon, getExtentCenter, isBBox, } from \"../../extent\";\nimport { getFamily } from \"../get-family\";\nimport { getProp } from \"../../objects\";\n/**\n * Create a new content with updated boundary properties\n * @param content original content\n * @param boundary boundary provenance\n * @returns\n * @private\n */\nexport const setContentBoundary = (content, boundary) => {\n    // update content's item and boundary\n    const properties = Object.assign(Object.assign({}, (content.item.properties || {})), { boundary });\n    const item = Object.assign(Object.assign({}, content.item), { properties });\n    const updated = Object.assign(Object.assign({}, content), { item });\n    return Object.assign(Object.assign({}, updated), { boundary: getContentBoundary(item) });\n};\n/**\n * get a content's boundary based on the item's boundary property\n * @param item\n * @returns\n * @private\n */\nexport const getContentBoundary = (item) => {\n    var _a;\n    const bBox = item.extent;\n    const isValidItemExtent = isBBox(bBox);\n    // user specified provenance is stored in item.properties\n    const provenance = ((_a = item.properties) === null || _a === void 0 ? void 0 : _a.boundary) ||\n        // but we default to item if the item has an extent\n        (isValidItemExtent ? \"item\" : undefined);\n    const boundary = {\n        geometry: null,\n        provenance,\n    };\n    if (provenance === \"item\" && isValidItemExtent) {\n        const extent = bBoxToExtent(bBox);\n        const center = getExtentCenter(extent);\n        boundary.center = [center.x, center.y];\n        boundary.geometry = Object.assign(Object.assign({}, extentToPolygon(extent)), { type: \"polygon\" });\n        boundary.spatialReference = boundary.geometry.spatialReference;\n    }\n    return boundary;\n};\n/**\n * Determine if we are in an enterprise environment\n * NOTE: when no request options are provided, the underlying\n * request functions assume that we are online in production\n * so we only want use enterprise logic if isPortal is explicitly defined\n * @param requestOptions\n * @returns\n * @private\n */\nexport const isPortal = (requestOptions) => {\n    return requestOptions && requestOptions.isPortal;\n};\n/**\n * Determine if we can use the Hub API for an item, i.e.\n * the item is public and we are not in an enterprise environment\n * @param item\n * @param requestOptions\n * @returns\n * @private\n */\nexport const canUseHubApiForItem = (item, requestOptions) => {\n    return !!item && item.access === \"public\" && !isPortal(requestOptions);\n};\n/**\n * Returns whether or not an item is a proxied csv\n *\n * @param item\n * @param requestOptions Hub Request Options (including whether we're in portal)\n * @returns\n * @private\n */\nexport const isProxiedCSV = (item, requestOptions) => !isPortal(requestOptions) &&\n    item.access === \"public\" &&\n    item.type === \"CSV\" &&\n    item.size <= 5000000;\n/**\n * Get the relative URL to use for the item in a hub site\n * @param type\n * @param identifier\n * @param typeKeywords\n * @returns\n * @private\n */\nexport const getHubRelativeUrl = (type, identifier, typeKeywords) => {\n    // solution types have their own logic\n    let contentUrl = getSolutionUrl(type, identifier, typeKeywords) ||\n        getInitiativeTemplateUrl(type, identifier, typeKeywords);\n    if (!contentUrl) {\n        const family = getFamily(type);\n        const familiesWithPluralizedRoute = [\n            \"app\",\n            \"dataset\",\n            \"document\",\n            \"map\",\n            \"template\",\n            \"project\",\n        ];\n        // default to the catchall content route\n        let path = \"/content\";\n        if (family === \"feedback\") {\n            // the exception\n            path = \"/feedback/surveys\";\n        }\n        else if (isPageType(type, typeKeywords)) {\n            // pages are in the document family,\n            // but instead of showing the page's metadata on /documents/about\n            // but we render the page on the pages route\n            path = \"/pages\";\n        }\n        else if (familiesWithPluralizedRoute.indexOf(family) > -1) {\n            // the rule: route name is plural of family name\n            path = `/${family}s`;\n        }\n        contentUrl = `${path}/${identifier}`;\n    }\n    return contentUrl;\n};\n/**\n * Is this content type a page?\n * @param type\n * @returns\n * @private\n */\nexport const isPageType = (type, typeKeywords = []) => [\"Hub Page\", \"Site Page\"].includes(type) || typeKeywords.includes(\"hubPage\");\nconst getSolutionUrl = (type, identifier, typeKeywords) => {\n    let hubUrl;\n    if (type === \"Solution\") {\n        // solution types are now in the Template family\n        // we send all except the deployed solution items to the route for initiative templates\n        if ((typeKeywords === null || typeKeywords === void 0 ? void 0 : typeKeywords.indexOf(\"Deployed\")) > -1) {\n            // deployed solutions go to the generic content route\n            hubUrl = `/content/${identifier}/about`;\n        }\n        else {\n            hubUrl = `/templates/${identifier}/about`;\n        }\n    }\n    else if (type === \"Web Mapping Application\" &&\n        (typeKeywords === null || typeKeywords === void 0 ? void 0 : typeKeywords.indexOf(\"hubSolutionTemplate\")) > -1) {\n        hubUrl = `/templates/${identifier}/about`;\n    }\n    return hubUrl;\n};\nconst getInitiativeTemplateUrl = (type, identifier, typeKeywords) => {\n    if ((type === \"Hub Initiative\" &&\n        (typeKeywords === null || typeKeywords === void 0 ? void 0 : typeKeywords.indexOf(\"hubInitiativeTemplate\")) > -1) ||\n        type === \"Hub Initiative Template\") {\n        return `/initiatives/templates/${identifier}/about`;\n    }\n};\n/**\n * Get the path to a well known metadata value\n * @param identifier identifier for well known metadata value\n * @returns path to be used like get(metadata, path)\n * @private\n */\nexport function getMetadataPath(identifier) {\n    // NOTE: i have verified that this will work regardless of the \"Metadata Style\" set on the org\n    const metadataPaths = {\n        updateFrequency: \"metadata.dataIdInfo.resMaint.maintFreq.MaintFreqCd.@_value\",\n        reviseDate: \"metadata.dataIdInfo.idCitation.date.reviseDate\",\n        pubDate: \"metadata.dataIdInfo.idCitation.date.pubDate\",\n        createDate: \"metadata.dataIdInfo.idCitation.date.createDate\",\n        metadataUpdateFrequency: \"metadata.mdMaint.maintFreq.MaintFreqCd.@_value\",\n        metadataUpdatedDate: \"metadata.mdDateSt\",\n    };\n    return metadataPaths[identifier];\n}\n/**\n * Get a well known value from metadata\n * @param metadata\n * @param identifier identifier for well known metadata value\n * @returns\n * @private\n */\nexport function getValueFromMetadata(metadata, identifier) {\n    const path = getMetadataPath(identifier);\n    return path && getProp(metadata, path);\n}\n/**\n * Date precisions\n */\nexport var DatePrecision;\n(function (DatePrecision) {\n    DatePrecision[\"Year\"] = \"year\";\n    DatePrecision[\"Month\"] = \"month\";\n    DatePrecision[\"Day\"] = \"day\";\n    DatePrecision[\"Time\"] = \"time\";\n})(DatePrecision || (DatePrecision = {}));\n/**\n * Parses an ISO8601 date string into a date and a precision.\n * This is because a) if somone entered 2018, we want to respect that and not treat it as the same as 2018-01-01\n * and b) you cannot naively call new Date with an ISO 8601 string that does not include time information\n * For example, when I, here in mountain time, do new Date('2018').getFullYear() I get \"2017\".\n * This is because when you do not provide time or timezone info, UTC is assumed, so new Date('2018') is 2018-01-01T00:00:00 in UTC\n * which is actually 7 hours earlier here in mountain time.\n *\n * @param {string} isoString\n * @return { date: Date, precision: DatePrecision }\n * @private\n */\nexport function parseISODateString(isoString) {\n    isoString = `${isoString}`;\n    let date;\n    let precision;\n    if (/^\\d{4}$/.test(isoString)) {\n        // yyyy\n        date = new Date(+isoString, 0, 1);\n        precision = DatePrecision.Year;\n    }\n    else if (/^\\d{4}-\\d{1,2}$/.test(isoString)) {\n        // yyyy-mm\n        const parts = isoString.split(\"-\");\n        date = new Date(+parts[0], +parts[1] - 1, 1);\n        precision = DatePrecision.Month;\n    }\n    else if (/^\\d{4}-\\d{1,2}-\\d{1,2}$/.test(isoString)) {\n        // yyyy-mm-dd\n        const parts = isoString.split(\"-\");\n        date = new Date(+parts[0], +parts[1] - 1, +parts[2]);\n        precision = DatePrecision.Day;\n    }\n    else if (!Number.isNaN(Date.parse(isoString))) {\n        // any other string parsable to a valid date\n        date = new Date(isoString);\n        precision = isoString.includes(\"T\")\n            ? DatePrecision.Time\n            : DatePrecision.Day;\n    }\n    return date && precision && { date, precision };\n}\n// NOTE: IItem has spatialRefernce: ISpatialReference, but\n// the portal REST API returns spatialReference as as string\n// that is always either WKID like \"102100\" or the name of a\n// WKT like \"NAD_1983_HARN_StatePlane_Hawaii_3_FIPS_5103_Feet\".\n// We only coerce WKIDs into a ISpatialReference objects since we\n// can't easily lookup a complete WKT.\n/**\n * Get the spatial reference as an object for an item\n * @param item\n * @returns spatial reference object\n * @private\n */\nexport const getItemSpatialReference = (item) => {\n    const spatialReference = item.spatialReference;\n    if (!spatialReference || typeof spatialReference === \"object\") {\n        // no need to try and transform this into an ISpatialReference\n        return spatialReference;\n    }\n    // otherwise it _should_ be a string (if coming form the REST API)\n    // but we force it in case it was set to a number somewhere outside of TS\n    const spatialReferenceString = spatialReference + \"\";\n    const wkid = parseInt(spatialReferenceString, 10);\n    return isNaN(wkid)\n        ? // It looks like the portal api returns the name of a WKT, but we'd\n            // need to perform a lookup to get the full WKT. Return null for now.\n            null\n        : //\n            { wkid };\n};\n/**\n * Extracts additional resources from the provided metadata\n * and transforms them into a hub-friendly format.\n *\n * Returns null if no resources are available\n *\n * @param item\n * @param metadata formal metadata\n * @returns\n * @private\n */\nexport const getAdditionalResources = (item, metadata, requestOptions) => {\n    const rawResources = extractRawResources(metadata);\n    return (rawResources &&\n        rawResources.map((resource) => ({\n            name: resource.orName,\n            url: getAdditionalResourceUrl(resource, item, requestOptions),\n            isDataSource: isDataSourceOfItem(resource, item),\n        })));\n};\n/**\n * @private\n *\n * Extracts additional resources from formal item metadata.\n * If none are available, null is returned.\n *\n * @param metadata the formal item metadata\n * @returns an array of all additional resources, or null\n */\nexport const extractRawResources = (metadata) => {\n    const rawResources = [];\n    // The property path to additional resources should be fairly simple.\n    // In many cases, it's just `metadata.metadata.distInfo.distTranOps.onLineSrc`.\n    // However, since `distInfo`, `distTranOps` and `onLineSrc` can be either\n    // Objects OR Arrays, we have to do all this looping.\n    castToArray(getProp(metadata, \"metadata.distInfo\") || []).forEach((distInfo) => {\n        castToArray(distInfo.distTranOps || []).forEach((distTranOps) => {\n            castToArray(distTranOps.onLineSrc || []).forEach((onLineSrc) => {\n                rawResources.push(onLineSrc);\n            });\n        });\n    });\n    return rawResources.length ? rawResources : null;\n};\n/**\n * @private\n *\n * Arrays are returned as-is.\n * Objects are wrapped into a 1 element array.\n *\n * @param objectOrArray\n * @returns the casted array\n */\nconst castToArray = (objectOrArray) => {\n    return Array.isArray(objectOrArray) ? objectOrArray : [objectOrArray];\n};\n/**\n * Determines whether a raw additional resource (i.e. extracted out of formal\n * metadata with no transformation) references the underlying service that backs\n * the item.\n *\n * @param resource raw additional resource of an item\n * @param item\n * @returns\n * @private\n */\nexport const isDataSourceOfItem = (resource, item) => {\n    const serviceUrl = item.url && parseServiceUrl(item.url);\n    return (serviceUrl && resource.linkage && resource.linkage.includes(serviceUrl));\n};\n/**\n * Returns the url for an additional resource.\n *\n * Automatically appends auth token if token is available\n * and resource points to the backing service of an item.\n *\n * @param resource raw additional resource of an item\n * @param item\n * @param requestOptions IHubRequestOptions, including authentication\n * @returns\n * @private\n */\nexport const getAdditionalResourceUrl = (resource, item, requestOptions) => {\n    let result = resource.linkage;\n    const token = getProp(requestOptions, \"authentication.token\");\n    if (token && isDataSourceOfItem(resource, item)) {\n        const resUrl = new URL(resource.linkage);\n        const params = new URLSearchParams(resUrl.search);\n        params.set(\"token\", token);\n        resUrl.search = params.toString();\n        result = resUrl.toString();\n    }\n    return result;\n};\n/**\n * @private\n *\n * Contains fallback logic for determining a content's extent.\n *\n * The fallback priority is as follows:\n * 1) item's extent (if valid bbox)\n * 2) extent enrichment from the hub api (if coordinates are valid bbox)\n * 3) layer's extent (if spatial reference is 4326)\n *\n * If none of these conditions are met, undefined is returned.\n *\n * @param item\n * @param layer\n * @param extentEnrichment\n * @returns the correct extent in a bbox format, or undefined\n */\nexport const determineExtent = (item, extentEnrichment, layer) => {\n    const itemExtent = isBBox(item.extent) ? item.extent : undefined;\n    const extentEnrichmentCoordinates = isBBox(extentEnrichment === null || extentEnrichment === void 0 ? void 0 : extentEnrichment.coordinates)\n        ? extentEnrichment.coordinates\n        : undefined;\n    const layerExtent = getProp(layer, \"extent.spatialReference.wkid\") === 4326\n        ? extentToBBox(layer.extent)\n        : undefined;\n    return itemExtent || extentEnrichmentCoordinates || layerExtent;\n};\n/**\n * @private\n *\n * Extracts the first contact from a given formal item metadata path.\n * This is particularly helpful if the contact path is either an object or an array.\n *\n * Note: the raw contact object must have the following properties:\n * - `rpIndName`: name of the individual\n * - `rpOrgName`: name of the individual's organization\n *\n * @param metadata formal item metadata\n * @param path path to the contact object/array\n * @returns\n */\nexport const extractFirstContact = (metadata, path) => {\n    const rawContacts = getProp(metadata, path) || {};\n    const { rpIndName, rpOrgName } = Array.isArray(rawContacts)\n        ? rawContacts[0]\n        : rawContacts;\n    return { individualName: rpIndName, organizationName: rpOrgName };\n};\n/**\n * Determines the correct orgId for an item.\n * Note: it's undocumented, but the portal API will return orgId for items... sometimes.\n *\n * @param item\n * @param ownerUser item owner's hydrated user object\n */\nexport const getItemOrgId = (item, ownerUser) => item.orgId || (ownerUser === null || ownerUser === void 0 ? void 0 : ownerUser.orgId);\n/**\n * Calculates the Publisher display info for the given item.\n * Utilizes this fallback pattern:\n * 1) Formal Item Metadata > Resource > Citation > Contact\n * 2) Formal Item Metadata > Resource > Contact\n * 3) Item’s Owner and Org Name\n * 4) Undefined (Item Owner / Org are private and we can't access additional info)\n *\n * @param item\n * @param metadata\n * @param org portal info of the item's organization\n * @param ownerUser the item owner's hydrated user\n * @returns\n */\nexport const getPublisherInfo = (item, metadata, org, ownerUser) => {\n    const result = {\n        nameSource: PublisherSource.None,\n        organizationSource: PublisherSource.None,\n    };\n    const citationContact = extractFirstContact(metadata, \"metadata.dataIdInfo.idCitation.citRespParty\");\n    const resourceContact = extractFirstContact(metadata, \"metadata.dataIdInfo.idPoC\");\n    const metadataContact = extractFirstContact(metadata, \"metadata.mdContact\");\n    // Determine publisher name properties\n    const ownerFullName = getProp(ownerUser, \"fullName\");\n    if (citationContact.individualName) {\n        result.name = citationContact.individualName;\n        result.nameSource = PublisherSource.CitationContact;\n    }\n    else if (resourceContact.individualName) {\n        result.name = resourceContact.individualName;\n        result.nameSource = PublisherSource.ResourceContact;\n    }\n    else if (metadataContact.individualName) {\n        result.name = metadataContact.individualName;\n        result.nameSource = PublisherSource.MetadataContact;\n    }\n    else if (ownerFullName) {\n        result.name = ownerFullName;\n        result.username = ownerUser.username;\n        result.nameSource = PublisherSource.ItemOwner;\n    }\n    // Determine publisher org properties\n    const orgName = getProp(org, \"name\");\n    if (citationContact.organizationName) {\n        result.organization = citationContact.organizationName;\n        result.organizationSource = PublisherSource.CitationContact;\n    }\n    else if (resourceContact.organizationName) {\n        result.organization = resourceContact.organizationName;\n        result.organizationSource = PublisherSource.ResourceContact;\n    }\n    else if (metadataContact.organizationName) {\n        result.organization = metadataContact.organizationName;\n        result.organizationSource = PublisherSource.MetadataContact;\n    }\n    else if (orgName) {\n        result.organization = orgName;\n        result.orgId = getItemOrgId(item, ownerUser);\n        result.organizationSource = PublisherSource.ItemOwner;\n    }\n    // We assume the item belongs to external org if no org info is available and the item is private\n    result.isExternal =\n        result.organizationSource === PublisherSource.None &&\n            item.access !== \"public\";\n    return result;\n};\n//# sourceMappingURL=internalContentUtils.js.map","import { fetchItemEnrichments } from \"../items/_enrichments\";\nimport { getProp } from \"../objects\";\nimport { getItemThumbnailUrl } from \"../resources\";\nimport { parseInclude } from \"../search/_internal/parseInclude\";\nimport { getItemHomeUrl } from \"../urls\";\nimport { unique } from \"../util\";\nimport { mapBy } from \"../utils\";\nimport { getFamily } from \"./get-family\";\nimport { getHubRelativeUrl } from \"./_internal/internalContentUtils\";\n/**\n * Enrich a generic search result\n * @param item\n * @param includes\n * @param requestOptions\n * @returns\n */\nexport async function enrichContentSearchResult(item, include, requestOptions) {\n    // Create the basic structure\n    const result = {\n        access: item.access,\n        id: item.id,\n        type: item.type,\n        name: item.title,\n        owner: item.owner,\n        tags: item.tags,\n        typeKeywords: item.typeKeywords,\n        categories: item.categories,\n        summary: item.snippet || item.description,\n        createdDate: new Date(item.created),\n        createdDateSource: \"item.created\",\n        updatedDate: new Date(item.modified),\n        updatedDateSource: \"item.modified\",\n        family: getFamily(item.type),\n        links: {\n            self: \"not-implemented\",\n            siteRelative: \"not-implemented\",\n            thumbnail: \"not-implemented\",\n        },\n    };\n    // default includes\n    const DEFAULTS = [];\n    // Add any type-specific defaults here\n    // if ([\"Map Service\", \"Feature Service\"].includes(item.type)) {\n    //   DEFAULTS = [\"server.layers.length AS layerCount\"];\n    // }\n    // if (item.type === \"Web Map\") {\n    //   DEFAULTS = [\"data.operationalLayers.length AS layerCount\"];\n    // }\n    // merge includes\n    include = [...DEFAULTS, ...include].filter(unique);\n    // Parse the includes into a valid set of enrichments\n    const specs = include.map(parseInclude);\n    // Extract out the low-level enrichments needed\n    const enrichments = mapBy(\"enrichment\", specs).filter(unique);\n    // fetch the enrichments\n    let enriched = {};\n    if (enrichments.length) {\n        enriched = await fetchItemEnrichments(item, enrichments, requestOptions);\n    }\n    // map the enriched props onto the result\n    specs.forEach((spec) => {\n        result[spec.prop] = getProp(enriched, spec.path);\n    });\n    // Handle links\n    // TODO: Link handling should be an enrichment\n    result.links.thumbnail = getItemThumbnailUrl(item, requestOptions);\n    result.links.self = getItemHomeUrl(result.id, requestOptions);\n    result.links.siteRelative = getHubRelativeUrl(result.type, result.id, item.typeKeywords);\n    return result;\n}\n//# sourceMappingURL=search.js.map","import { searchGroupContent, searchGroupUsers, } from \"@esri/arcgis-rest-portal\";\nimport { getEnrichmentErrors } from \"../../items/_enrichments\";\nimport OperationStack from \"../../OperationStack\";\nimport { createOperationPipeline } from \"../../utils\";\n/**\n * Fetch the count of items shared to the group.\n * This is done by searching for content in the group\n * and using the returned `total` value\n * @param input\n * @returns\n */\nconst enrichGroupContentCount = (input) => {\n    const { data, stack, requestOptions } = input;\n    const opId = stack.start(\"enrichGroupContentCount\");\n    // w/o the : any here, I get a compile error about\n    // .authentication being incompatible w/ UserSession\n    const options = Object.assign({ groupId: data.group.id, num: 1 }, requestOptions);\n    return searchGroupContent(options)\n        .then((results) => {\n        stack.finish(opId);\n        return {\n            data: Object.assign(Object.assign({}, data), { contentCount: results.total }),\n            stack,\n            requestOptions,\n        };\n    })\n        .catch((error) => handleEnrichmentError(error, input, opId));\n};\n/**\n * Create a summary of the Group membership by searching for members,\n * limiting to three for a sample, and using the `total`.\n * @param input\n * @returns\n */\nconst enrichGroupMembershipSummary = (input) => {\n    const { data, stack, requestOptions } = input;\n    const opId = stack.start(\"enrichGroupContentCount\");\n    // w/o the `: any` here, I get a compile error about\n    // .authentication being incompatible w/ UserSession\n    const options = Object.assign({ num: 3 }, requestOptions);\n    return searchGroupUsers(data.group.id, options)\n        .then((results) => {\n        stack.finish(opId);\n        return {\n            data: Object.assign(Object.assign({}, data), {\n                membershipSummary: { total: results.total, users: results.users },\n            }),\n            stack,\n            requestOptions,\n        };\n    })\n        .catch((error) => handleEnrichmentError(error, input, opId));\n};\n// add the error to the content.errors,\n// log current stack operation as finished with an error\n// and return output that can be piped into the next operation\nconst handleEnrichmentError = (error, input, opId) => {\n    const { data, stack, requestOptions } = input;\n    stack.finish(opId, { error });\n    return {\n        data: Object.assign(Object.assign({}, data), { errors: getEnrichmentErrors(error, data.errors) }),\n        stack,\n        requestOptions,\n    };\n};\n/**\n * Available enrichments for Groups\n */\nconst groupEnrichementOperations = {\n    membershipSummary: enrichGroupMembershipSummary,\n    contentCount: enrichGroupContentCount,\n};\n/**\n * Fetch enrichments for Groups\n * @param group\n * @param enrichments\n * @param requestOptions\n * @returns\n */\nexport function fetchGroupEnrichments(group, enrichments, requestOptions) {\n    // create a pipeline of enrichment operations\n    const operations = enrichments.reduce((ops, enrichment) => {\n        const operation = groupEnrichementOperations[enrichment];\n        // only include the enrichments that we know how to fetch\n        operation && ops.push(operation);\n        return ops;\n    }, []);\n    const pipeline = createOperationPipeline(operations);\n    // execute pipeline and return the item and enrichments\n    return pipeline({\n        data: { group },\n        stack: new OperationStack(),\n        requestOptions,\n    }).then((output) => {\n        // TODO: send telemetry so we have info on what enrichments are requested and possible errors\n        return output.data;\n    });\n}\n//# sourceMappingURL=enrichments.js.map","/* Copyright (c) 2018-2021 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n// TODO: deprecate all private functions in this file and more them to ./_internal\nimport { UserSession } from \"@esri/arcgis-rest-auth\";\nimport { cloneObject } from \"../util\";\nimport { isLegacySearchCategory, } from \"./_internal/commonHelpers/isLegacySearchCategory\";\nimport { toCollectionKey } from \"./_internal/commonHelpers/toCollectionKey\";\n/**\n * Well known APIs\n * Short-forms for specifying common APIs\n * We will likely deprecate this\n */\nexport const SEARCH_APIS = {\n    arcgis: {\n        label: \"ArcGIS Online\",\n        url: \"https://www.arcgis.com\",\n        type: \"arcgis\",\n    },\n    arcgisQA: {\n        label: \"ArcGIS Online QAEXT\",\n        url: \"https://qaext.arcgis.com\",\n        type: \"arcgis\",\n    },\n    arcgisDEV: {\n        label: \"ArcGIS Online DEVEXT\",\n        url: \"https://devext.arcgis.com\",\n        type: \"arcgis\",\n    },\n    hub: {\n        label: \"ArcGIS Hub\",\n        url: \"https://hub.arcgis.com/api\",\n        type: \"arcgis-hub\",\n    },\n    hubDEV: {\n        label: \"ArcGIS Hub DEV\",\n        url: \"https://hubdev.arcgis.com/api\",\n        type: \"arcgis-hub\",\n    },\n    hubQA: {\n        label: \"ArcGIS Hub QA\",\n        url: \"https://hubqa.arcgis.com/api\",\n        type: \"arcgis-hub\",\n    },\n};\n/**\n * @private\n * Convert array of api \"names\" into full ApiDefinitions\n * @param apis\n * @returns\n */\nexport function expandApis(apis) {\n    return apis.map(expandApi);\n}\n/**\n * @private\n * Convert an api \"name\" into a full ApiDefinition\n * @param api\n * @returns\n */\nexport function expandApi(api) {\n    if (typeof api === \"string\" && api in SEARCH_APIS) {\n        return SEARCH_APIS[api];\n    }\n    else {\n        // it's an object, so we trust that it's well formed\n        return api;\n    }\n}\n/**\n * @private\n * Convert a field value into a MatchOptions if it's not already one\n * @param value\n * @returns\n */\nexport function valueToMatchOptions(value) {\n    let result = {};\n    if (Array.isArray(value)) {\n        result = {\n            any: value,\n        };\n    }\n    else {\n        if (typeof value === \"string\") {\n            result = {\n                any: [value],\n            };\n        }\n        if (typeof value === \"object\") {\n            result = value;\n        }\n    }\n    return result;\n}\n/**\n * @private\n * Convert a RelativeDate to a DateRange<number>\n * @param relative\n * @returns\n */\nexport function relativeDateToDateRange(relative) {\n    // hash of offsets\n    const offsetMs = {\n        min: 1000 * 60,\n        hours: 1000 * 60 * 60,\n        days: 1000 * 60 * 60 * 24,\n        weeks: 1000 * 60 * 60 * 24 * 7,\n    };\n    const now = new Date();\n    // default\n    const result = {\n        type: \"date-range\",\n        from: now.getTime(),\n        to: now.getTime(),\n    };\n    //\n    switch (relative.unit) {\n        case \"hours\":\n        case \"days\":\n        case \"weeks\":\n            result.from = result.to - offsetMs[relative.unit] * relative.num;\n            break;\n        case \"months\":\n            // get the current month and subtract num\n            // NOTE: when the previous month has fewer days than this month\n            // setMonth() will return a date w/in the current month\n            // example: 3/30 -> 3/2 b/c there is no 2/28\n            now.setMonth(now.getMonth() - relative.num);\n            result.from = now.getTime();\n            break;\n        case \"years\":\n            now.setFullYear(now.getFullYear() - relative.num);\n            result.from = now.getTime();\n            break;\n    }\n    return result;\n}\n/**\n * @private\n * Create a `.next()` function for a type\n * @param request\n * @param nextStart\n * @param total\n * @param fn\n * @returns\n */\nexport function getNextFunction(request, nextStart, total, fn) {\n    const clonedRequest = cloneObject(request);\n    // clone will not handle authentication so we do it manually\n    if (request.authentication) {\n        clonedRequest.authentication = UserSession.deserialize(request.authentication.serialize());\n    }\n    // figure out the start\n    clonedRequest.start = nextStart > -1 ? nextStart : total + 1;\n    return (authentication) => {\n        if (authentication) {\n            clonedRequest.authentication = authentication;\n        }\n        return fn(clonedRequest);\n    };\n}\n/**\n * Construct a the full url to a group thumbnail\n *\n * - If the group has a thumbnail, construct the full url\n * - If the group is not public, append on the token (if passed in)\n * @param portalUrl\n * @param group\n * @param token\n * @returns\n */\nexport function getGroupThumbnailUrl(portalUrl, group, token) {\n    let thumbnailUrl = null;\n    if (group.thumbnail) {\n        thumbnailUrl = `${portalUrl}/community/groups/${group.id}/info/${group.thumbnail}`;\n        if (token && group.access !== \"public\") {\n            thumbnailUrl = `${thumbnailUrl}?token=${token}`;\n        }\n    }\n    return thumbnailUrl;\n}\n/**\n * Construct a the full url to a user thumbnail\n *\n * - If the user has a thumbnail, construct the full url\n * - If the user is not public, append on the token\n * @param portalUrl\n * @param user\n * @param token\n * @returns\n */\nexport function getUserThumbnailUrl(portalUrl, user, token) {\n    let thumbnailUrl = null;\n    if (user.thumbnail) {\n        thumbnailUrl = `${portalUrl}/community/users/${user.username}/info/${user.thumbnail}`;\n        if (token && user.access !== \"public\") {\n            thumbnailUrl = `${thumbnailUrl}?token=${token}`;\n        }\n    }\n    return thumbnailUrl;\n}\n/**\n * Function that can migrate a legacy search category to a wellknown\n * collection key. Useful when the caller has an unknown value that\n * could either be a search category or wellknown collection.\n *\n * If the value passed is not a search category, it is returned as-is.\n *\n * @param collectionOrSearchCategory key to be migrated\n * @returns the migrated wellknown collection key\n */\nexport function migrateToCollectionKey(collectionOrSearchCategory) {\n    return isLegacySearchCategory(collectionOrSearchCategory)\n        ? toCollectionKey(collectionOrSearchCategory)\n        : collectionOrSearchCategory;\n}\n//# sourceMappingURL=utils.js.map","/**\n * Searches through a list of filters and finds a specific predicate that should be appended at the top level of a search\n * (i.e., has special requirements for combining with other predicates). Also verifies that the predicate is not combined in any invalid ways.\n *\n * Combination Requirements:\n * - Only ONE filter can have a predicate with the target field\n * - Only ONE predicate with the target field can exist\n * - The predicate can only be ANDed to other predicates\n * - The predicate's field value MUST be a string (not string[] or IMatchOptions)\n *\n * Example: Portal's bbox field cannot be conditionally searched. Any value provided will always be applied as a top-level filter.\n * - Valid: `?bbox=1,2,3,4&filter=type:CSV`\n * - Invalid: `?filter=type:CSV OR (type:PDF AND bbox=1,2,3,4)\n *\n * @param field the field of the desired predicate\n * @param filters filters to be searched / validated\n * @returns the predicate (if present and all requirements are met)\n */\nexport function getTopLevelPredicate(field, filters) {\n    let result = null;\n    const matchingFilters = filters.filter((f) => {\n        return f.predicates.find((p) => !!p[field]);\n    });\n    if (matchingFilters.length > 1) {\n        throw new Error(`Only 1 IFilter can have a '${field}' predicate but ${matchingFilters.length} were detected`);\n    }\n    if (matchingFilters.length) {\n        const matchingFilter = matchingFilters[0];\n        const matchingPredicates = matchingFilter.predicates.filter((p) => !!p[field]);\n        if (matchingPredicates.length > 1) {\n            throw new Error(`Only 1 '${field}' predicate is allowed but ${matchingPredicates.length} were detected`);\n        }\n        if (matchingFilter.operation !== \"AND\" &&\n            matchingFilter.predicates.length > 1) {\n            throw new Error(`'${field}' predicates cannot be OR'd to other predicates`);\n        }\n        const topLevelPredicate = matchingPredicates[0];\n        if (typeof topLevelPredicate[field] !== \"string\") {\n            throw new Error(`'${field}' predicate must have a string value, string[] and IMatchOptions are not allowed.`);\n        }\n        result = topLevelPredicate;\n    }\n    return result;\n}\n//# sourceMappingURL=getTopLevelPredicate.js.map","import { getProp, setProp } from \"../../objects\";\nimport { cloneObject } from \"../../util\";\nimport { relativeDateToDateRange, valueToMatchOptions } from \"../utils\";\n/**\n * @private\n * Expand a predicate\n * @param predicate\n * @returns\n */\nexport function expandPredicate(predicate) {\n    const result = {};\n    const dateProps = [\"created\", \"modified\", \"lastlogin\"];\n    const copyProps = [\n        \"filterType\",\n        \"categoriesAsParam\",\n        \"categoryFilter\",\n        \"term\",\n        \"searchUserAccess\",\n        \"isopendata\",\n        \"searchUserName\",\n        \"bbox\",\n        \"isviewonly\",\n    ];\n    const nonMatchOptionsFields = [...dateProps, ...copyProps];\n    // Do the conversion\n    Object.entries(predicate).forEach(([key, value]) => {\n        // Handle MatchOptions fields\n        if (!nonMatchOptionsFields.includes(key)) {\n            setProp(key, valueToMatchOptions(value), result);\n        }\n        // Handle Date fields\n        if (dateProps.includes(key)) {\n            const dateFieldValue = cloneObject(getProp(predicate, key));\n            if (getProp(predicate, `${key}.type`) === \"relative-date\") {\n                setProp(key, relativeDateToDateRange(dateFieldValue), result);\n            }\n            else {\n                setProp(key, dateFieldValue, result);\n            }\n        }\n        // Handle fields that are just copied forward\n        if (copyProps.includes(key) && predicate.hasOwnProperty(key)) {\n            setProp(key, value, result);\n        }\n    });\n    return result;\n}\n//# sourceMappingURL=expandPredicate.js.map","import { getTopLevelPredicate } from \"./_internal/commonHelpers/getTopLevelPredicate\";\nimport { expandPredicate } from \"./_internal/expandPredicate\";\n/**\n * Serialize IQuery into ISearchOptions for ArcGIS Portal\n * @param query\n * @returns\n */\nexport function serializeQueryForPortal(query) {\n    const filterSearchOptions = query.filters.map(serializeFilter);\n    // remove any empty entries\n    const nonEmptyOptions = filterSearchOptions.filter(removeEmptyEntries);\n    const result = mergeSearchOptions(nonEmptyOptions, \"AND\");\n    const bboxPredicate = getTopLevelPredicate(\"bbox\", query.filters);\n    if (bboxPredicate) {\n        result.params = { bbox: bboxPredicate.bbox };\n    }\n    return result;\n}\n/**\n * Predicate to remove things from array\n * @param e\n * @returns\n */\nfunction removeEmptyEntries(e) {\n    return !(typeof e === \"undefined\" || e === null || e === \"\");\n}\nfunction mergeSearchOptions(options, operation) {\n    const result = options.reduce((acc, entry) => {\n        // walk the props\n        Object.entries(entry).forEach(([key, value]) => {\n            // if prop exists and is not empty string\n            if (acc[key] && value !== \"\") {\n                // combine via operation\n                acc[key] = `${acc[key]} ${operation} ${value}`;\n            }\n            else {\n                // just copy the value if it's not empty string\n                if (value !== \"\") {\n                    acc[key] = value;\n                }\n            }\n        });\n        return acc;\n    }, { q: \"\" });\n    return result;\n}\n/**\n * Serialize the filters in a FitlerGroup into a Portal Query\n * @param filter\n * @returns\n */\nfunction serializeFilter(filter) {\n    const operation = filter.operation || \"AND\";\n    const predicates = filter.predicates.map(expandPredicate);\n    const predicateSearchOptions = predicates\n        .map(serializePredicate)\n        .filter((e) => e !== undefined && e !== null);\n    // combine these searchOptions\n    const searchOptions = mergeSearchOptions(predicateSearchOptions, operation);\n    // wrap in parens if we have more than one predicate\n    if (predicates.length > 1) {\n        searchOptions.q = `(${searchOptions.q})`;\n    }\n    return searchOptions;\n}\n/**\n * Serialize a Filter into a Portal Query\n * @param predicate\n * @returns\n */\nfunction serializePredicate(predicate) {\n    const dateProps = [\"created\", \"modified\"];\n    const boolProps = [\"isopendata\", \"isviewonly\"];\n    const passThroughProps = [\n        \"searchUserAccess\",\n        \"searchUserName\",\n        \"categoriesAsParam\",\n        \"categoryFilter\",\n        \"bbox\",\n    ];\n    const specialProps = [\n        \"filterType\",\n        \"term\",\n        ...dateProps,\n        ...boolProps,\n        ...passThroughProps,\n    ];\n    const portalAllowList = [\n        \"access\",\n        \"capabilities\",\n        \"created\",\n        \"categories\",\n        \"categoriesAsParam\",\n        \"categoryFilter\",\n        \"description\",\n        \"disabled\",\n        \"email\",\n        \"emailstatus\",\n        \"firstname\",\n        \"fullname\",\n        \"group\",\n        \"id\",\n        \"isInvitationOnly\",\n        \"isopendata\",\n        \"joined\",\n        \"lastlogin\",\n        \"lastname\",\n        \"memberType\",\n        \"modified\",\n        \"name\",\n        \"orgid\",\n        \"orgIds\",\n        \"owner\",\n        \"provider\",\n        \"role\",\n        \"searchUserAccess\",\n        \"searchUserName\",\n        \"snippet\",\n        \"tags\",\n        \"term\",\n        \"title\",\n        \"type\",\n        \"typekeywords\",\n        \"userlicensetype\",\n        \"username\",\n        \"isviewonly\",\n    ];\n    // TODO: Look at using reduce vs .map and remove the `.filter`\n    const opts = Object.entries(predicate)\n        .map(([key, value]) => {\n        // When serializing for portal we limit predicate properties to\n        // a list of known properties that the portal api accepts. This will\n        // not attempt to ensure the properties are used in the correct combinations\n        if (portalAllowList.includes(key)) {\n            const so = { q: \"\" };\n            if (!specialProps.includes(key) && key !== \"term\") {\n                so.q = serializeMatchOptions(key, value);\n            }\n            if (dateProps.includes(key)) {\n                so.q = serializeDateRange(key, value);\n            }\n            if (boolProps.includes(key)) {\n                so.q = `${key}:${value}`;\n            }\n            if (passThroughProps.includes(key)) {\n                so[key] = value;\n            }\n            if (key === \"term\") {\n                so.q = value;\n            }\n            return so;\n        }\n    })\n        .filter(removeEmptyEntries);\n    // merge up all the searchOptions\n    if (opts.length) {\n        const searchOptions = mergeSearchOptions(opts, \"AND\");\n        if (searchOptions.q) {\n            searchOptions.q = `(${searchOptions.q})`;\n        }\n        return searchOptions;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Serialize MatchOptions into portal syntax\n * @param key\n * @param value\n * @returns\n */\nfunction serializeMatchOptions(key, value) {\n    let result = \"\";\n    if (value.any) {\n        result = `${serializeStringOrArray(\"OR\", key, value.any)}`;\n    }\n    if (value.all) {\n        result =\n            (result ? result + \" AND \" : \"\") +\n                `${serializeStringOrArray(\"AND\", key, value.all)}`;\n    }\n    if (value.not) {\n        // negate the entries if they are not\n        result =\n            (result ? result + \" AND \" : \"\") +\n                `${serializeStringOrArray(\"OR\", `-${key}`, value.not)}`;\n    }\n    return result;\n}\n/**\n * Serialize a date-range into Portal syntax\n * @param key\n * @param range\n * @returns\n */\nfunction serializeDateRange(key, range) {\n    return `${key}:[${range.from} TO ${range.to}]`;\n}\n/**\n * Serialize a `string` or `string[]` into a string\n * @param join\n * @param key\n * @param value\n * @returns\n */\nfunction serializeStringOrArray(join, key, value) {\n    let q = \"\";\n    if (Array.isArray(value)) {\n        q = `${key}:\"${value.join(`\" ${join} ${key}:\"`)}\"`;\n        if (value.length > 1) {\n            q = `(${q})`;\n        }\n    }\n    else {\n        q = `${key}:\"${value}\"`;\n    }\n    return q;\n}\n//# sourceMappingURL=serializeQueryForPortal.js.map","/**\n * @private\n * Determines whether the OGC API can be targeted with the given search parameters\n * @param targetEntity target entity of the query\n * @param options search options\n */\nexport function shouldUseOgcApi(targetEntity, options) {\n    const { site, requestOptions: { isPortal }, } = options;\n    return targetEntity === \"item\" && !!site && !isPortal;\n}\n//# sourceMappingURL=shouldUseOgcApi.js.map","/**\n * @private\n * Returns information about the current environment's OGC API\n *\n * @param options IHubRequestOptions to derive OGC API info from\n * @returns an IApiDefinition with needed info to target the OGC API\n */\nexport function getOgcApiDefinition(options) {\n    const umbrellaDomain = new URL(options.requestOptions.hubApiUrl).hostname;\n    return {\n        type: \"arcgis-hub\",\n        url: `https://${umbrellaDomain}/api/search/v1`,\n    };\n}\n//# sourceMappingURL=getOgcApiDefinition.js.map","import { expandApi } from \"../../utils\";\nimport { shouldUseOgcApi } from \"./shouldUseOgcApi\";\nimport { getOgcApiDefinition } from \"./getOgcApiDefinition\";\n/**\n * @private\n * Determines Which API should be hit for the given search parameters.\n * Hierarchy:\n * - Target options.api if available\n * - Target the environment-level OGC API if current parameters allow\n * - Target the Portal API based off options.requestOptions.portal\n * @param targetEntity target entity of the query\n * @param options search options\n * @returns an API Definition object describing what should be targeted\n */\nexport function getApi(targetEntity, options) {\n    const { api, requestOptions: { portal }, } = options;\n    let result;\n    if (api) {\n        result = expandApi(api);\n    }\n    else if (shouldUseOgcApi(targetEntity, options)) {\n        result = getOgcApiDefinition(options);\n    }\n    else {\n        result = { type: \"arcgis\", url: portal };\n    }\n    return result;\n}\n//# sourceMappingURL=getApi.js.map","import { getFamily } from \"../content/get-family\";\nimport { getHubRelativeUrl } from \"../content/_internal/internalContentUtils\";\nimport { fetchItemEnrichments } from \"../items/_enrichments\";\nimport { getProp } from \"../objects\";\nimport { getItemThumbnailUrl } from \"../resources\";\nimport { parseInclude } from \"../search/_internal/parseInclude\";\nimport { getItemHomeUrl } from \"../urls\";\nimport { unique } from \"../util\";\nimport { mapBy } from \"../utils\";\n/**\n * Fetch Page specific Enrichments\n * @param item\n * @param include\n * @param requestOptions\n * @returns\n */\nexport async function enrichPageSearchResult(item, include, requestOptions) {\n    // Create the basic structure\n    const result = {\n        access: item.access,\n        id: item.id,\n        type: item.type,\n        name: item.title,\n        owner: item.owner,\n        typeKeywords: item.typeKeywords,\n        tags: item.tags,\n        categories: item.categories,\n        summary: item.snippet || item.description,\n        createdDate: new Date(item.created),\n        createdDateSource: \"item.created\",\n        updatedDate: new Date(item.modified),\n        updatedDateSource: \"item.modified\",\n        family: getFamily(item.type),\n        links: {\n            self: \"not-implemented\",\n            siteRelative: \"not-implemented\",\n            thumbnail: \"not-implemented\",\n        },\n    };\n    // default includes\n    const DEFAULTS = [];\n    // merge includes\n    include = [...DEFAULTS, ...include].filter(unique);\n    // Parse the includes into a valid set of enrichments\n    const specs = include.map(parseInclude);\n    // Extract out the low-level enrichments needed\n    const enrichments = mapBy(\"enrichment\", specs).filter(unique);\n    // fetch the enrichments\n    let enriched = {};\n    if (enrichments.length) {\n        // TODO: Look into caching for the requests in fetchItemEnrichments\n        enriched = await fetchItemEnrichments(item, enrichments, requestOptions);\n    }\n    // map the enriched props onto the result\n    specs.forEach((spec) => {\n        result[spec.prop] = getProp(enriched, spec.path);\n    });\n    // Handle Links\n    result.links.thumbnail = getItemThumbnailUrl(item, requestOptions);\n    result.links.self = getItemHomeUrl(result.id, requestOptions);\n    result.links.siteRelative = getHubRelativeUrl(result.type, result.id, item.typeKeywords);\n    return result;\n}\n//# sourceMappingURL=HubPages.js.map","/**\n * @private\n * Convert a portal aggregation structure into the HubAggregations structure\n * @param searchResults\n * @returns\n */\nexport function convertPortalAggregations(searchResults) {\n    var _a;\n    if ((_a = searchResults.aggregations) === null || _a === void 0 ? void 0 : _a.counts) {\n        return searchResults.aggregations.counts.map((entry) => {\n            return {\n                mode: \"terms\",\n                field: entry.fieldName,\n                values: entry.fieldValues,\n            };\n        });\n    }\n    else {\n        return [];\n    }\n}\n//# sourceMappingURL=portalSearchUtils.js.map","import { getFamilyTypes } from \"../content/get-family\";\n/**\n * Check if i18nScope is defined and not ending with a \".\", if so add a \".\" at the end.\n * e.g. if the i18nScope is 'project.edit', the path is `${i18nScope}catalog.organization`,\n * we will want \"project.edit.catalog.organization\" instead of \"project.editcatalog.organization\"\n * @param i18nScope\n * @returns i18nScope with a \".\" at the end if it is defined\n */\nexport function dotifyString(i18nScope) {\n    return i18nScope && i18nScope.slice(-1) !== \".\" ? `${i18nScope}.` : i18nScope;\n}\n/** Get a single catalog based on the catalog name, entity type and optional requests\n * @param i18nScope Translation scope to be interpolated into the catalog\n * @param name Name of the catalog requested\n * @param entityType\n * @param options An opitional IGetWellKnownCatalogOptions definition JSON object\n * @returns An IHubCatalog definition JSON object\n */\nexport function getWellKnownCatalog(i18nScope, catalogName, entityType, options) {\n    switch (entityType) {\n        case \"item\":\n            return getWellknownItemCatalog(i18nScope, catalogName, options);\n        case \"group\":\n            return getWellknownGroupCatalog(i18nScope, catalogName, options);\n        /* Add other entity handlers here, e.g. getWellknownEventCatalog */\n        default:\n            throw new Error(`Wellknown catalog not implemented for \"${entityType}\"`);\n    }\n}\n/**\n * Build an IHubCatalog definition JSON object based on the\n * catalog name, predicates and collections we want to use for each catalog\n * @param i18nScope\n * @param catalogName\n * @param predicates Predicates for the catalog\n * @param collections Collections to include for the catalog\n * @returns An IHubCatalog definition JSON object\n */\nfunction buildCatalog(i18nScope, catalogName, predicates, collections, entityType) {\n    let scopes;\n    switch (entityType) {\n        case \"item\":\n            scopes = {\n                item: {\n                    targetEntity: \"item\",\n                    filters: [{ predicates }],\n                },\n            };\n            break;\n        case \"group\":\n            scopes = {\n                group: {\n                    targetEntity: \"group\",\n                    filters: [{ predicates }],\n                },\n            };\n            break;\n    }\n    return {\n        schemaVersion: 1,\n        title: `{{${i18nScope}catalog.${catalogName}:translate}}`,\n        scopes,\n        collections,\n    };\n}\n/**\n * Check if user is available in the passed options, throw an error if not\n * @param catalogName\n * @param options Options that contains user\n */\nfunction validateUserExistence(catalogName, options) {\n    if (!options || !options.user) {\n        throw new Error(`User needed to get \"${catalogName}\" catalog`);\n    }\n}\n/**\n * Get an ITEM catalog based on the name and optional requests\n * @param i18nScope Translation scope to be interpolated into the catalog\n * @param catalogName Name of the catalog requested\n * @param options An opitional IGetWellKnownCatalogOptions definition JSON object\n * @returns An ITEM IHubCatalog definition JSON object\n */\nfunction getWellknownItemCatalog(i18nScope, catalogName, options) {\n    i18nScope = dotifyString(i18nScope);\n    let catalog;\n    const collections = getWellknownCollections(i18nScope, \"item\", options === null || options === void 0 ? void 0 : options.collectionNames);\n    switch (catalogName) {\n        case \"myContent\":\n            validateUserExistence(catalogName, options);\n            catalog = buildCatalog(i18nScope, catalogName, [{ owner: options.user.username }], collections, \"item\");\n            break;\n        case \"favorites\":\n            validateUserExistence(catalogName, options);\n            catalog = buildCatalog(i18nScope, catalogName, [{ group: options.user.favGroupId }], collections, \"item\");\n            break;\n        case \"organization\":\n            validateUserExistence(catalogName, options);\n            catalog = buildCatalog(i18nScope, catalogName, [{ orgid: options.user.orgId }], collections, \"item\");\n            break;\n        case \"world\":\n            catalog = buildCatalog(i18nScope, catalogName, [{ type: { not: [\"code attachment\"] } }], collections, \"item\");\n            break;\n    }\n    return catalog;\n}\n/**\n * Get a group catalog based on the name and optional requests\n * @param i18nScope Translation scope to be interpolated into the catalog\n * @param catalogName Name of the catalog requested\n * @param options An opitional IGetWellKnownCatalogOptions definition JSON object\n * @returns A group IHubCatalog definition JSON object\n */\nfunction getWellknownGroupCatalog(i18nScope, catalogName, options) {\n    i18nScope = dotifyString(i18nScope);\n    let catalog;\n    // because collections are needed in arcgis-hub-catalog and\n    // \"searchGroups\" allows 'q: \"*\"', we use this as the collection\n    const collections = [\n        {\n            targetEntity: \"group\",\n            key: catalogName,\n            label: catalogName,\n            scope: {\n                targetEntity: \"group\",\n                filters: [\n                    {\n                        predicates: [{ q: \"*\" }],\n                    },\n                ],\n            },\n        },\n    ];\n    switch (catalogName) {\n        case \"editGroups\":\n            validateUserExistence(catalogName, options);\n            catalog = buildCatalog(i18nScope, catalogName, [{ capabilities: [\"updateitemcontrol\"] }], collections, \"group\");\n            break;\n        case \"viewGroups\":\n            validateUserExistence(catalogName, options);\n            catalog = buildCatalog(i18nScope, catalogName, [{ capabilities: { not: [\"updateitemcontrol\"] } }], collections, \"group\");\n            break;\n        case \"allGroups\":\n            validateUserExistence(catalogName, options);\n            catalog = buildCatalog(i18nScope, catalogName, [{ capabilities: [\"\"] }], collections, \"group\");\n            break;\n    }\n    return catalog;\n}\n/**\n * Get a complete collections map to use to build a collections list\n * @param i18nScope\n * @param entityType\n * @returns an object that contains properties of all the collections\n */\nfunction getAllCollectionsMap(i18nScope, entityType) {\n    return {\n        appAndMap: {\n            key: \"appAndMap\",\n            label: `{{${i18nScope}collection.appsAndMaps:translate}}`,\n            targetEntity: entityType,\n            include: [],\n            scope: {\n                targetEntity: entityType,\n                filters: [\n                    {\n                        predicates: [\n                            {\n                                type: [...getFamilyTypes(\"app\"), ...getFamilyTypes(\"map\")],\n                            },\n                        ],\n                    },\n                ],\n            },\n        },\n        dataset: {\n            key: \"dataset\",\n            label: `{{${i18nScope}collection.dataset:translate}}`,\n            targetEntity: entityType,\n            include: [],\n            scope: {\n                targetEntity: entityType,\n                filters: [{ predicates: [{ type: getFamilyTypes(\"dataset\") }] }],\n            },\n        },\n        document: {\n            key: \"document\",\n            label: `{{${i18nScope}collection.documents:translate}}`,\n            targetEntity: entityType,\n            include: [],\n            scope: {\n                targetEntity: entityType,\n                filters: [{ predicates: [{ type: getFamilyTypes(\"document\") }] }],\n            },\n        },\n        feedback: {\n            key: \"feedback\",\n            label: `{{${i18nScope}collection.feedback:translate}}`,\n            targetEntity: entityType,\n            include: [],\n            scope: {\n                targetEntity: entityType,\n                filters: [{ predicates: [{ type: getFamilyTypes(\"feedback\") }] }],\n            },\n        },\n        site: {\n            key: \"site\",\n            label: `{{${i18nScope}collection.sites:translate}}`,\n            targetEntity: entityType,\n            include: [],\n            scope: {\n                targetEntity: entityType,\n                filters: [\n                    {\n                        predicates: [\n                            {\n                                type: getFamilyTypes(\"site\"),\n                            },\n                        ],\n                    },\n                ],\n            },\n        },\n        template: {\n            key: \"template\",\n            label: `{{${i18nScope}collection.templates:translate}}`,\n            targetEntity: entityType,\n            include: [],\n            scope: {\n                targetEntity: entityType,\n                filters: [\n                    {\n                        predicates: [\n                            {\n                                type: getFamilyTypes(\"template\"),\n                            },\n                        ],\n                    },\n                ],\n            },\n        },\n    };\n}\n/**\n * Get a list of collection names we want to use to build the default collections if no specific collection names are passed\n * @returns a list of WellKnownCollection definition strings\n */\nfunction getDefaultCollectionNames() {\n    return [\"appAndMap\", \"dataset\", \"document\", \"feedback\", \"site\"];\n}\n/**\n * Get a list of collections based on the entity type and an optional\n * list of collection names, will return a list of default collections if none passed\n * @param i18nScope Translation scope to be interpolated into the collections\n * @param entityType\n * @param collectionNames List of names of the requested collections, optional, if passed in,\n * only those collections will be returned\n * @returns A list of IHubCollection definition JSON objects\n */\nexport function getWellknownCollections(i18nScope, entityType, collectionNames) {\n    i18nScope = dotifyString(i18nScope);\n    const allCollectionsMap = getAllCollectionsMap(i18nScope, entityType);\n    const defaultCollectionNames = getDefaultCollectionNames();\n    // Return a list of collections from the passed collection names or\n    // return the default ones if not passed\n    const names = (collectionNames === null || collectionNames === void 0 ? void 0 : collectionNames.length) ? collectionNames\n        : defaultCollectionNames;\n    return names.reduce((accum, name) => {\n        if (allCollectionsMap[name]) {\n            accum.push(allCollectionsMap[name]);\n        }\n        return accum;\n    }, []);\n}\n/**\n * Get a single collection based on the collection name and entity type\n * @param i18nScope\n * @param entityType\n * @param collectionName Name of the collection requested\n * @returns An IHubCollection definition JSON object\n */\nexport function getWellknownCollection(i18nScope, entityType, collectionName) {\n    i18nScope = dotifyString(i18nScope);\n    return getAllCollectionsMap(i18nScope, entityType)[collectionName];\n}\n//# sourceMappingURL=wellKnownCatalog.js.map","import { searchItems } from \"@esri/arcgis-rest-portal\";\nimport { serializeQueryForPortal } from \"../serializeQueryForPortal\";\nimport { enrichPageSearchResult } from \"../../pages/HubPages\";\nimport { enrichProjectSearchResult } from \"../../projects\";\nimport { enrichSiteSearchResult } from \"../../sites\";\nimport { getNextFunction } from \"../utils\";\nimport { convertPortalAggregations } from \"./portalSearchUtils\";\nimport { expandPredicate } from \"./expandPredicate\";\nimport HubError from \"../../HubError\";\nimport { enrichContentSearchResult } from \"../../content/search\";\nimport { cloneObject } from \"../../util\";\nimport { getWellknownCollection } from \"../wellKnownCatalog\";\nimport { getProp } from \"../../objects\";\n/**\n * @internal\n * Portal Search Implementation for Items returning IHubSearchResults\n * @param query\n * @param options\n * @returns\n */\nexport async function portalSearchItems(query, options) {\n    const so = processSearchParams(options, query);\n    return searchPortalAsHubSearchResult(so);\n}\n/**\n * @internal\n * Portal Search for Items using IQuery and IHubSearchOptions\n * @param query\n * @param options\n * @returns\n */\nexport function portalSearchItemsAsItems(query, options) {\n    const so = processSearchParams(options, query);\n    return searchPortalAsItem(so);\n}\n/**\n * Common preprocessing for search options and the query\n * @param options\n * @param query\n * @returns\n */\nfunction processSearchParams(options, query) {\n    var _a;\n    if (!options.requestOptions) {\n        throw new HubError(\"portalSearchItems\", \"options.requestOptions is required.\");\n    }\n    let updatedQuery = applyWellKnownCollectionFilters(query);\n    // Expand well-known filterGroups\n    // TODO: Should we remove this with the whole idea of collections?\n    updatedQuery = applyWellKnownItemPredicates(updatedQuery);\n    // Expand the individual predicates in each filter\n    updatedQuery.filters = updatedQuery.filters.map((filter) => {\n        filter.predicates = filter.predicates.map(expandPredicate);\n        return filter;\n    });\n    // Serialize the all the groups for portal\n    const so = serializeQueryForPortal(updatedQuery);\n    // Array of properties we want to copy from IHubSearchOptions to the ISearchOptions\n    const props = [\n        \"num\",\n        \"sortField\",\n        \"sortOrder\",\n        \"include\",\n        \"start\",\n        \"requestOptions\",\n    ];\n    // copy the props over\n    props.forEach((prop) => {\n        if (options.hasOwnProperty(prop)) {\n            so[prop] = options[prop];\n        }\n    });\n    if (options.requestOptions.authentication) {\n        so.authentication = options.requestOptions.authentication;\n    }\n    else {\n        so.portal = options.requestOptions.portal;\n    }\n    // Aggregations\n    if ((_a = options.aggFields) === null || _a === void 0 ? void 0 : _a.length) {\n        so.countFields = options.aggFields.join(\",\");\n        so.countSize = options.aggLimit || 10;\n    }\n    return so;\n}\n/**\n * Internal portal search, which just returns IItems witn no conversion\n * Due to typescript complexity when adding multiple returns types to a function\n * it is simpler to have two functions that do the almost the same thing.\n * @param searchOptions\n * @returns\n */\nasync function searchPortalAsItem(searchOptions) {\n    // Execute portal search\n    const resp = await searchItems(searchOptions);\n    // convert portal  aggregations into hub aggregations\n    const aggregations = convertPortalAggregations(resp);\n    // Construct the return\n    return {\n        total: resp.total,\n        results: resp.results,\n        aggregations,\n        hasNext: resp.nextStart > -1,\n        next: getNextFunction(searchOptions, resp.nextStart, resp.total, searchPortalAsItem),\n    };\n}\n/**\n * Internal portal search, which then converts `IItem`s to `IHubSearchResult`s\n * handling enrichments & includes along the way\n *\n * @param searchOptions\n * @returns\n */\nasync function searchPortalAsHubSearchResult(searchOptions) {\n    // Execute portal search\n    const resp = await searchItems(searchOptions);\n    // create mappable fn that will handle the includes\n    const fn = (item) => {\n        return itemToSearchResult(item, searchOptions.includes, searchOptions.requestOptions);\n    };\n    // map over results\n    const results = await Promise.all(resp.results.map(fn));\n    // convert portal  aggregations into hub aggregations\n    const aggregations = convertPortalAggregations(resp);\n    // Construct the return\n    return {\n        total: resp.total,\n        results,\n        aggregations,\n        hasNext: resp.nextStart > -1,\n        next: getNextFunction(searchOptions, resp.nextStart, resp.total, searchPortalAsHubSearchResult),\n    };\n}\n/**\n * Convert an `IItem` to a `IHubSearchResult`\n * Fetches the enrichments, and attaches them as directed in the `include` list\n * @param item\n * @param includes\n * @param requestOptions\n * @returns\n */\nexport async function itemToSearchResult(item, includes = [], requestOptions) {\n    // based on the type, we delegate to type-specific functions\n    // this allows each type to apply \"default\" enrichments\n    let fn = enrichContentSearchResult;\n    switch (item.type) {\n        case \"Hub Site Application\":\n        case \"Site Application\":\n            fn = enrichSiteSearchResult;\n            break;\n        case \"Hub Page\":\n        case \"Site Page\":\n            fn = enrichPageSearchResult;\n            break;\n        case \"Hub Project\":\n            fn = enrichProjectSearchResult;\n            break;\n        // handle old hub sites\n        case \"Web Mapping Application\":\n            if (item.typeKeywords.includes(\"hubSite\")) {\n                fn = enrichSiteSearchResult;\n            }\n            break;\n    }\n    return fn(item, includes, requestOptions);\n}\nexport const WellKnownItemPredicates = {\n    $application: [\n        {\n            type: {\n                any: [\n                    \"Web Mapping Application\",\n                    \"Application\",\n                    \"Insights\",\n                    \"Web Experience\",\n                ],\n                not: [\"Insights Theme\", \"Insights Model\"],\n            },\n            typekeywords: {\n                not: [\"hubSite\", \"Story Map\"],\n            },\n        },\n        {\n            type: \"Web Mapping Experience\",\n            typekeywords: \"EXB Experience\",\n        },\n    ],\n    $dashboard: [\n        {\n            type: {\n                any: [\"Dashboard\"],\n                not: [\"Operation View\"],\n            },\n            typekeywords: {\n                not: [\"Extension\", \"ArcGIS Operation View\"],\n            },\n        },\n    ],\n    $dataset: [\n        {\n            type: {\n                any: [\n                    \"Scene Service\",\n                    \"Feature Collection\",\n                    \"Route Layer\",\n                    \"Layer\",\n                    \"Explorer Layer\",\n                    \"Tile Package\",\n                    \"Vector Tile Package\",\n                    \"Scene Package\",\n                    \"Layer Package\",\n                    \"Feature Service\",\n                    \"Stream Service\",\n                    \"Map Service\",\n                    \"Vector Tile Service\",\n                    \"Image Service\",\n                    \"WMS\",\n                    \"WFS\",\n                    \"WMTS\",\n                    \"KML\",\n                    \"KML Collection\",\n                    \"Globe Service\",\n                    \"CSV\",\n                    \"Shapefile\",\n                    \"GeoJson\",\n                    \"Service Definition\",\n                    \"File Geodatabase\",\n                    \"CAD Drawing\",\n                    \"Relational Database Connection\",\n                ],\n                not: [\"Web Mapping Application\", \"Geodata Service\"],\n            },\n        },\n        {\n            typekeywords: [\"OGC\", \"Geodata Service\"],\n        },\n    ],\n    $document: [\n        {\n            type: [\n                \"PDF\",\n                \"Microsoft Excel\",\n                \"Microsoft Word\",\n                \"Microsoft Powerpoint\",\n                \"iWork Keynote\",\n                \"iWork Pages\",\n                \"iWork Numbers\",\n                \"Visio Document\",\n                \"Document Link\",\n            ],\n        },\n    ],\n    $initiative: [\n        {\n            type: \"Hub Initiative\",\n        },\n    ],\n    $experience: [\n        {\n            type: \"Web Experience\",\n        },\n    ],\n    $feedback: [\n        {\n            type: \"Form\",\n        },\n    ],\n    $page: [\n        {\n            typekeywords: \"hubPage\",\n        },\n    ],\n    $site: [\n        {\n            type: [\"Hub Site Application\", \"Site Application\"],\n        },\n    ],\n    $storymap: [\n        {\n            type: \"Storymap\",\n        },\n        {\n            type: \"Web Mapping Application\",\n            typekeywords: \"Story Map\",\n        },\n    ],\n    $template: [\n        {\n            type: [\n                \"Web Mapping Application\",\n                \"Hub Initiative\",\n                \"Hub Initiative Template\",\n                \"Solution\",\n            ],\n            typekeywords: {\n                any: [\"hubInitiativeTemplate\", \"hubSolutionTemplate\", \"Template\"],\n                not: \"Deployed\",\n            },\n        },\n    ],\n    $webmap: [\n        {\n            type: {\n                any: [\"Web Map\", \"Web Scene\"],\n                not: \"Web Mapping Application\",\n            },\n        },\n    ],\n};\n/**\n * @private\n * Add filter blocks from a well-known item collection if indicated.\n * This is meant to simplify query construction for common use cases.\n *\n * Only exported for testing.\n *\n * @param query query to add collection filters to\n * @returns a copy of the query with the additional filters\n */\nexport function applyWellKnownCollectionFilters(query) {\n    const updated = cloneObject(query);\n    if (updated.collection) {\n        const { collection, targetEntity, filters: queryFilters } = query;\n        const wellKnownCollection = getWellknownCollection(\"\", targetEntity, collection);\n        const wellKnownFilters = getProp(wellKnownCollection, \"scope.filters\") || [];\n        updated.filters = [...queryFilters, ...wellKnownFilters];\n    }\n    return updated;\n}\n/**\n * @private\n * Convert a Filter Group to expand well-known type filters\n *\n * The purpose of this function is to allow for the use of short-hand\n * names for commonly used, complex queries.\n *\n * It works by looking for filters using the .type property, the value\n * of which is a key in the WellKnownItemFilters hash. If found in the\n * hash, the filters array of the active filterGroup is replaced with the\n * filters specified in the hash.\n *\n * NOTE: Any other properties specified in a filter will be removed\n *\n * Only exported to enable extensive testing\n * @param query\n */\nexport function applyWellKnownItemPredicates(query) {\n    const queryClone = cloneObject(query);\n    // iterate the filters\n    queryClone.filters = queryClone.filters.map((filter) => {\n        // replace predicates with well-known types\n        let replacedPredicates = false;\n        filter.predicates = filter.predicates.reduce((acc, predicate) => {\n            // if the predicate has a well-known type\n            // we replace it with the set of predicates defined\n            // for the well-known type\n            if (isWellKnownTypeFilter(predicate.type)) {\n                const replacements = lookupTypePredicates(predicate.type);\n                acc = [...acc, ...replacements];\n                replacedPredicates = true;\n            }\n            else {\n                // this predicate does not have a well-known type\n                // so we just keep it\n                acc.push(predicate);\n            }\n            return acc;\n        }, []);\n        if (replacedPredicates) {\n            // Any filter who's predicates were replaced with\n            // well-known predicates, needs to use \"OR\" to ensure\n            // correct query logic\n            filter.operation = \"OR\";\n        }\n        return filter;\n    });\n    return queryClone;\n}\n/**\n * Is the argument a well-known type \"key\"\n *\n * Accepts `string`, `string[]` or `IMatchOptions`\n * but only string values can possibly be keys\n * on `WellKnownItemFilters`\n * @param key\n * @returns\n */\nexport function isWellKnownTypeFilter(key) {\n    let result = false;\n    if (typeof key === \"string\") {\n        result = key in WellKnownItemPredicates;\n    }\n    return result;\n}\n/**\n * Return the predicates for a well-known type\n * @param key\n * @returns\n */\nfunction lookupTypePredicates(key) {\n    return WellKnownItemPredicates[key];\n}\n//# sourceMappingURL=portalSearchItems.js.map","export function formatOgcAggregationsResponse(response) {\n    const aggregations = response.aggregations.aggregations.map((ogcAgg) => ({\n        // What should it really be?\n        mode: \"terms\",\n        field: ogcAgg.field,\n        values: ogcAgg.aggregations.map((a) => ({\n            // Not confusing at all, right? Just some differences in terminology\n            value: a.label,\n            count: a.value,\n        })),\n    }));\n    return {\n        total: 0,\n        results: [],\n        hasNext: false,\n        next: () => null,\n        aggregations,\n    };\n}\n//# sourceMappingURL=formatOgcAggregationsResponse.js.map","import { getProp } from \"../../../objects/get-prop\";\nexport function getOgcAggregationQueryParams(_query, options) {\n    // TODO: use options.aggLimit once the OGC API supports it\n    const aggregations = `terms(fields=(${options.aggFields.join()}))`;\n    // TODO: Use `query` to filter aggregations once the OGC API supports it\n    const token = getProp(options, \"requestOptions.authentication.token\");\n    return { aggregations, token };\n}\n//# sourceMappingURL=getOgcAggregationQueryParams.js.map","/**\n * @private\n *\n * Given a query, returns the correct OGC Collection URL to target.\n * If a collectionId is indicated, that collection is targeted. Else\n * the all collection is targeted.\n *\n * @param query the query the request is based on\n * @param options request options, including the base OGC api url\n * @returns the collection url\n */\nexport function getOgcCollectionUrl(query, options) {\n    const apiDefinition = options.api;\n    const collectionId = query.collection || \"all\";\n    return `${apiDefinition.url}/collections/${collectionId}`;\n}\n//# sourceMappingURL=getOgcCollectionUrl.js.map","export function getQueryString(queryParams) {\n    const result = Object.entries(queryParams)\n        .filter(([_key, value]) => !!value)\n        .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n        .join(\"&\");\n    return result && `?${result}`;\n}\n//# sourceMappingURL=getQueryString.js.map","import { RemoteServerError } from \"../../../request\";\nimport { cloneObject } from \"../../../util\";\nimport { getQueryString } from \"./getQueryString\";\n/**\n * Wrapper over fetch for performing common operations when executing a request to an OGC API, such as:\n * - Creating the query string\n * - URL encoding query string values\n * - Appending the ?target query param if needed\n * - Checking whether the response is ok\n * - Returning the .json() of the response body\n *\n * Note: the ?target query param is only appended if the target site (options.site) is _different_ from the\n * the site that will have its OGC API hit (url). This allows us to use the environment-level OGC API's url while\n * actually targeting a specific Hub Site's catalog. It's a powerful capability that significantly eases local development.\n *\n * Example: https://hubqa.arcgis.com/api/search/v1?target=\"my-actual-hub.hub.arcgis.com\"\n *\n * We omit the ?target query when the site and url are the same because it would be redundant.\n *\n * Bad example: https://hubqa.arcgis.com/api/search/v1?target=\"hubqa.arcgis.com\"\n * Good example: https://hubqa.arcgis.com/api/search/v1\n *\n * @param url the OGC API endpoint that should actually be hit\n * @param queryParams query params that should be serialized with the request (excluding `target`)\n * @param options options to customize the search, such as the site whose catalogs we're targeting\n * @returns the JSON response from the endpoint\n */\nexport async function ogcApiRequest(url, queryParams, options) {\n    var _a;\n    const updatedQueryParams = cloneObject(queryParams);\n    const targetDomain = new URL(options.site).hostname;\n    const urlDomain = new URL(url).hostname;\n    if (targetDomain !== urlDomain) {\n        updatedQueryParams.target = targetDomain;\n    }\n    const withQueryString = url + getQueryString(updatedQueryParams);\n    // use fetch override if any\n    const _fetch = ((_a = options.requestOptions) === null || _a === void 0 ? void 0 : _a.fetch) || fetch;\n    const response = await _fetch(withQueryString, { method: \"GET\" });\n    if (!response.ok) {\n        throw new RemoteServerError(response.statusText, withQueryString, response.status);\n    }\n    return response.json();\n}\n//# sourceMappingURL=ogcApiRequest.js.map","import { formatOgcAggregationsResponse } from \"./formatOgcAggregationsResponse\";\nimport { getOgcAggregationQueryParams } from \"./getOgcAggregationQueryParams\";\nimport { getOgcCollectionUrl } from \"./getOgcCollectionUrl\";\nimport { ogcApiRequest } from \"./ogcApiRequest\";\nexport async function searchOgcAggregations(query, options) {\n    const url = `${getOgcCollectionUrl(query, options)}/aggregations`;\n    const queryParams = getOgcAggregationQueryParams(query, options);\n    const rawResponse = await ogcApiRequest(url, queryParams, options);\n    return formatOgcAggregationsResponse(rawResponse);\n}\n//# sourceMappingURL=searchOgcAggregations.js.map","import { searchOgcItems } from \"./searchOgcItems\";\nexport function getNextOgcCallback(response, originalQuery, originalOptions) {\n    const nextLink = response.links.find((l) => l.rel === \"next\");\n    let callback = () => null;\n    if (nextLink) {\n        callback = () => {\n            const nextUrl = new URL(nextLink.href);\n            const start = +nextUrl.searchParams.get(\"startindex\");\n            const nextOptions = Object.assign(Object.assign({}, originalOptions), { start });\n            return searchOgcItems(originalQuery, nextOptions);\n        };\n    }\n    return callback;\n}\n//# sourceMappingURL=getNextOgcCallback.js.map","import { itemToSearchResult } from \"../portalSearchItems\";\nexport async function ogcItemToSearchResult(ogcItem, includes, requestOptions) {\n    // OGC Api stuffs the item wholesale in  `.properties`\n    // NOTE: the properties hash may also have some extraneous members such\n    // as `license` and `source` if the OgcItem came from the index.\n    const pseudoItem = ogcItem.properties;\n    const result = await itemToSearchResult(pseudoItem, includes, requestOptions);\n    // Expose extraneous members like `license` and `source`\n    result.source = ogcItem.properties.source;\n    result.license = ogcItem.properties.license;\n    return result;\n}\n//# sourceMappingURL=ogcItemToSearchResult.js.map","import { getNextOgcCallback } from \"./getNextOgcCallback\";\nimport { ogcItemToSearchResult } from \"./ogcItemToSearchResult\";\nexport async function formatOgcItemsResponse(response, originalQuery, originalOptions) {\n    const formattedResults = await Promise.all(response.features.map((f) => ogcItemToSearchResult(f, originalOptions.include, originalOptions.requestOptions)));\n    const next = getNextOgcCallback(response, originalQuery, originalOptions);\n    const nextLink = response.links.find((l) => l.rel === \"next\");\n    return {\n        total: response.numberMatched,\n        results: formattedResults,\n        hasNext: !!nextLink,\n        next,\n    };\n}\n//# sourceMappingURL=formatOgcItemsResponse.js.map","import { getTopLevelPredicate } from \"../commonHelpers/getTopLevelPredicate\";\n/**\n * @private\n * Extracts the bbox value that the search should be filtered by.\n * Also validates that the bbox predicate is not combined in some\n * invalid way with other predicates.\n *\n * @param query query to extract the bbox predicate from\n * @returns the bbox value to filter by\n */\nexport function getBboxQueryParam(query) {\n    const bboxPredicate = getTopLevelPredicate(\"bbox\", query.filters);\n    return bboxPredicate === null || bboxPredicate === void 0 ? void 0 : bboxPredicate.bbox;\n}\n//# sourceMappingURL=getBboxQueryParam.js.map","export function getFilterQueryParam(query) {\n    return query.filters\n        .map(formatFilterBlock)\n        .filter(removeEmptyClauses)\n        .join(\" AND \");\n}\nexport function formatFilterBlock(filter) {\n    const operation = filter.operation || \"OR\";\n    const formatted = filter.predicates\n        .map(formatPredicate)\n        .filter(removeEmptyClauses)\n        .join(` ${operation} `);\n    return `(${formatted})`;\n}\nexport function formatPredicate(predicate) {\n    const formatted = Object.entries(predicate)\n        // Remove predicates that use `term` (handled in `getQQueryParam`),\n        // `bbox` (handled in `getBboxQueryParam) or have undefined entries\n        .filter(([field, value]) => field !== \"term\" && field !== \"bbox\" && !!value)\n        // Create sections for each field\n        .reduce((acc, [field, value]) => {\n        let section;\n        if (typeof value === \"string\") {\n            section = formatSimpleComparison(field, value);\n        }\n        else if (Array.isArray(value)) {\n            section = formatMultiStringPredicate(field, value);\n        }\n        else if (isDateRange(value)) {\n            section = formatDateRangePredicate(field, value);\n        }\n        else {\n            section = formatComplexPredicate(field, value);\n        }\n        acc.push(section);\n        return acc;\n    }, [])\n        // AND together all field requirements\n        .join(\" AND \");\n    return `(${formatted})`;\n}\nfunction isDateRange(x) {\n    return Number.isInteger(x.from) && Number.isInteger(x.to);\n}\nfunction formatDateRangePredicate(field, value) {\n    return `${field} BETWEEN ${value.from} AND ${value.to}`;\n}\nfunction formatSimpleComparison(field, value) {\n    return `${field}=${maybeAddSingleQuotes(value)}`;\n}\nfunction formatMultiStringPredicate(field, values) {\n    const wrappedValues = values.map(maybeAddSingleQuotes);\n    return `${field} IN (${wrappedValues.join(\", \")})`;\n}\nfunction formatComplexPredicate(field, value) {\n    const anys = formatAnys(field, value.any);\n    const alls = formatAlls(field, value.all);\n    const nots = formatNots(field, value.not);\n    return [anys, alls, nots].filter((subsection) => !!subsection).join(\" AND \");\n}\nfunction formatAnys(field, value) {\n    let result;\n    if (Array.isArray(value)) {\n        const wrappedValues = value.map(maybeAddSingleQuotes);\n        result = `${field} IN (${wrappedValues.join(\", \")})`;\n    }\n    else if (value) {\n        result = formatSimpleComparison(field, value);\n    }\n    return result;\n}\nfunction formatAlls(field, value) {\n    let result;\n    if (Array.isArray(value)) {\n        result = value\n            .map((v) => formatSimpleComparison(field, v))\n            .join(\" AND \");\n    }\n    else if (value) {\n        result = formatSimpleComparison(field, value);\n    }\n    return result;\n}\nfunction formatNots(field, value) {\n    let result;\n    if (value) {\n        const valueAsArray = Array.isArray(value) ? value : [value];\n        const wrappedValues = valueAsArray.map(maybeAddSingleQuotes);\n        result = `${field} NOT IN (${wrappedValues.join(\", \")})`;\n    }\n    return result;\n}\nfunction maybeAddSingleQuotes(value) {\n    const whitespaceRegex = /\\s/;\n    return whitespaceRegex.test(value) ? `'${value}'` : value;\n}\n/**\n * Returns whether a clause is non-empty and should be included in the\n * final serialized string.\n *\n * Empty clauses appear when certain predicates are detected that are invalid\n * in the OGC API's ?filter string (i.e. `term`, `bbox`)\n *\n * @param clause stringified clause to inspect\n * @returns whether the clause should be included in the final serialization\n */\nfunction removeEmptyClauses(clause) {\n    return clause !== \"()\";\n}\n//# sourceMappingURL=getFilterQueryParam.js.map","import { getTopLevelPredicate } from \"../commonHelpers/getTopLevelPredicate\";\n// TODO: the 'q' query param logic is only here because the\n// OGC API currently has a bug where 'q' cannot be included\n// in the 'filter' string. Once that bug is resolved, rip this\n// logic out and let predicates with 'term' to be processed normally\nexport function getQQueryParam(query) {\n    const qPredicate = getTopLevelPredicate(\"term\", query.filters);\n    return qPredicate === null || qPredicate === void 0 ? void 0 : qPredicate.term;\n}\n//# sourceMappingURL=getQQueryParam.js.map","/**\n * @private\n * Serializes the sort options provided from the request options\n * object into a string that the OGC API can understand\n *\n * @param options IHubSearchOptions that contain sorting information\n * @returns a serialized sort string\n */\nexport function getSortByQueryParam(options) {\n    const { sortField, sortOrder } = options;\n    let result;\n    if (sortField) {\n        result =\n            sortOrder === \"desc\"\n                ? `-properties.${sortField}`\n                : `properties.${sortField}`;\n    }\n    return result;\n}\n//# sourceMappingURL=getSortByQueryParam.js.map","import { getProp } from \"../../../objects/get-prop\";\nimport { getBboxQueryParam } from \"./getBboxQueryParam\";\nimport { getFilterQueryParam } from \"./getFilterQueryParam\";\nimport { getQQueryParam } from \"./getQQueryParam\";\nimport { getSortByQueryParam } from \"./getSortByQueryParam\";\n/**\n * @private\n * Derives a hash of query params that should be included with a request\n * to the /items endpoint of an OGC API collection\n *\n * @param query an IQuery to derive query params from\n * @param options an IHubSearchOptions object to derive query params from\n * @returns a hash of query params to be included in the request\n */\nexport function getOgcItemQueryParams(query, options) {\n    const filter = getFilterQueryParam(query);\n    const token = getProp(options, \"requestOptions.authentication.token\");\n    const limit = options.num;\n    // API requires the param name be all lowercase\n    const startindex = options.start;\n    const q = getQQueryParam(query);\n    const sortBy = getSortByQueryParam(options);\n    const bbox = getBboxQueryParam(query);\n    return {\n        filter,\n        token,\n        limit,\n        startindex,\n        q,\n        sortBy,\n        bbox,\n    };\n}\n//# sourceMappingURL=getOgcItemQueryParams.js.map","import { formatOgcItemsResponse } from \"./formatOgcItemsResponse\";\nimport { getOgcCollectionUrl } from \"./getOgcCollectionUrl\";\nimport { getOgcItemQueryParams } from \"./getOgcItemQueryParams\";\nimport { ogcApiRequest } from \"./ogcApiRequest\";\nexport async function searchOgcItems(query, options) {\n    const url = `${getOgcCollectionUrl(query, options)}/items`;\n    const queryParams = getOgcItemQueryParams(query, options);\n    const rawResponse = await ogcApiRequest(url, queryParams, options);\n    return formatOgcItemsResponse(rawResponse, query, options);\n}\n//# sourceMappingURL=searchOgcItems.js.map","import { searchOgcAggregations } from \"./hubSearchItemsHelpers/searchOgcAggregations\";\nimport { searchOgcItems } from \"./hubSearchItemsHelpers/searchOgcItems\";\n/**\n * @private\n * Execute item search against the Hub API\n * @param query\n * @param options\n * @returns\n */\nexport async function hubSearchItems(query, options) {\n    var _a;\n    return ((_a = options.aggFields) === null || _a === void 0 ? void 0 : _a.length) ? searchOgcAggregations(query, options)\n        : searchOgcItems(query, options);\n}\n//# sourceMappingURL=hubSearchItems.js.map","import { searchGroups } from \"@esri/arcgis-rest-portal\";\nimport { enrichGroupSearchResult } from \"../../groups/HubGroups\";\nimport HubError from \"../../HubError\";\nimport { serializeQueryForPortal } from \"../serializeQueryForPortal\";\nimport { getNextFunction } from \"../utils\";\nimport { expandPredicate } from \"./expandPredicate\";\n/**\n * @private\n * Portal Search Implementation for Groups\n * @param query\n * @param options\n * @returns\n */\nexport async function portalSearchGroups(query, options) {\n    if (!options.requestOptions) {\n        throw new HubError(\"portalSearchGroups\", \"options.requestOptions is required.\");\n    }\n    // Expand the individual predicates in each filter\n    query.filters = query.filters.map((filter) => {\n        filter.predicates = filter.predicates.map(expandPredicate);\n        return filter;\n    });\n    // Serialize the all the groups for portal\n    const so = serializeQueryForPortal(query);\n    // Array of properties we want to copy from IHubSearchOptions to the ISearchOptions\n    const props = [\n        \"num\",\n        \"sortField\",\n        \"sortOrder\",\n        \"include\",\n        \"start\",\n        \"requestOptions\",\n    ];\n    // copy the props over\n    props.forEach((prop) => {\n        if (options.hasOwnProperty(prop)) {\n            so[prop] = options[prop];\n        }\n    });\n    // If we don't have auth, ensure we have .portal\n    if (options.requestOptions.authentication) {\n        so.authentication = options.requestOptions.authentication;\n    }\n    else {\n        so.portal = options.requestOptions.portal;\n    }\n    return searchPortal(so);\n}\n/**\n * Internal portal search, which then converts `IGroup`s to `IHubSearchResult`s\n * handling enrichments & includes along the way\n *\n * @param searchOptions\n * @returns\n */\nasync function searchPortal(searchOptions) {\n    // Execute portal search\n    const resp = await searchGroups(searchOptions);\n    // create mappable fn that will close\n    // over the includes and requestOptions\n    const fn = (item) => {\n        return groupToSearchResult(item, searchOptions.include, searchOptions.requestOptions);\n    };\n    // map over results\n    const results = await Promise.all(resp.results.map(fn));\n    // Group Search does not support aggregations\n    // Construct the return\n    return {\n        total: resp.total,\n        results,\n        hasNext: resp.nextStart > -1,\n        next: getNextFunction(searchOptions, resp.nextStart, resp.total, searchPortal),\n    };\n}\n/**\n * Convert an Item to a IHubSearchResult\n * Fetches the includes and attaches them to the item\n * @param item\n * @param includes\n * @param requestOptions\n * @returns\n */\nasync function groupToSearchResult(group, includes = [], requestOptions) {\n    // Delegate to HubGroups module\n    // This layer of indirection is not necessary but\n    // aligns with how the items search works and\n    // allows for future specialization\n    return enrichGroupSearchResult(group, includes, requestOptions);\n}\n//# sourceMappingURL=portalSearchGroups.js.map","import { fetchOrg } from \"../../org/fetch-org\";\nimport { getEnrichmentErrors } from \"../../items/_enrichments\";\nimport OperationStack from \"../../OperationStack\";\nimport { getPortalBaseFromOrgUrl } from \"../../urls\";\nimport { createOperationPipeline } from \"../../utils\";\nconst enrichUserOrg = (input) => {\n    const { data, stack, requestOptions } = input;\n    const opId = stack.start(\"enrichUserOrg\");\n    const options = Object.assign(Object.assign({}, requestOptions), { \n        // In order to get the correct response, we must pass options.portal\n        // as a base portal url (e.g., www.arcgis.com, qaext.arcgis.com, etc)\n        // **not** an org portal (i.e. org.maps.arcgis.com).\n        portal: `${getPortalBaseFromOrgUrl(requestOptions.portal)}/sharing/rest` });\n    // TODO: Add Caching\n    // Had implemented a simple caching system, but it leads to unstable\n    // tests because we can't deterministically clear it\n    // if (!orgCache[data.user.orgId]) {\n    //   orgCache[data.user.orgId] = fetchOrg(data.user.orgId, options);\n    // }\n    // return (orgCache[data.user.orgId] as Promise<IPortal>)\n    return fetchOrg(data.user.orgId, options)\n        .then((results) => {\n        stack.finish(opId);\n        return {\n            data: Object.assign(Object.assign({}, data), {\n                org: results,\n            }),\n            stack,\n            requestOptions,\n        };\n    })\n        .catch((error) => handleEnrichmentError(error, input, opId));\n};\n/**\n * Simple cache for user org's. This does not expire\n * but that seems reasonable as Org props rarely change\n */\n// This works find at run-time, but it's a problem in tests\n// where we are validating calls. Will work with Randy to\n// create something that's more robust\n// const orgCache: Record<string, any> = {};\n// add the error to the content.errors,\n// log current stack operation as finished with an error\n// and return output that can be piped into the next operation\nconst handleEnrichmentError = (error, input, opId) => {\n    const { data, stack, requestOptions } = input;\n    stack.finish(opId, { error });\n    return {\n        data: Object.assign(Object.assign({}, data), { errors: getEnrichmentErrors(error, data.errors) }),\n        stack,\n        requestOptions,\n    };\n};\n/**\n * Available enrichments for Groups\n */\nconst groupEnrichementOperations = {\n    org: enrichUserOrg,\n};\n/**\n * Fetch enrichments for Users\n * @param group\n * @param enrichments\n * @param requestOptions\n * @returns\n */\nexport function fetchUserEnrichments(user, enrichments, requestOptions) {\n    // create a pipeline of enrichment operations\n    const operations = enrichments.reduce((ops, enrichment) => {\n        const operation = groupEnrichementOperations[enrichment];\n        // only include the enrichments that we know how to fetch\n        operation && ops.push(operation);\n        return ops;\n    }, []);\n    const pipeline = createOperationPipeline(operations);\n    // execute pipeline and return the item and enrichments\n    return pipeline({\n        data: { user },\n        stack: new OperationStack(),\n        requestOptions,\n    }).then((output) => {\n        // TODO: send telemetry so we have info on what enrichments are requested and possible errors\n        return output.data;\n    });\n}\n//# sourceMappingURL=enrichments.js.map","import { fetchUserEnrichments } from \"./_internal/enrichments\";\nimport { getProp } from \"../objects\";\nimport { getUserThumbnailUrl } from \"../search\";\nimport { parseInclude } from \"../search/_internal/parseInclude\";\nimport { getUserHomeUrl } from \"../urls\";\nimport { unique } from \"../util\";\nimport { mapBy } from \"../utils\";\n/**\n * Enrich a User object\n * @param user\n * @param includes\n * @param requestOptions\n * @returns\n */\nexport async function enrichUserSearchResult(user, include, requestOptions) {\n    // Create the basic structure\n    const result = {\n        access: user.access,\n        id: user.username,\n        type: \"User\",\n        name: user.fullName,\n        owner: user.username,\n        summary: user.description,\n        createdDate: new Date(user.created),\n        createdDateSource: \"user.created\",\n        updatedDate: new Date(user.modified),\n        updatedDateSource: \"user.modified\",\n        family: \"people\",\n        links: {\n            self: \"not-implemented\",\n            siteRelative: \"not-implemented\",\n            thumbnail: \"not-implemented\",\n        },\n    };\n    // Informal Enrichments - basically adding type-specific props\n    // derived directly from the entity\n    // default includes\n    const DEFAULTS = [\"org.name AS orgName\"];\n    // merge includes\n    include = [...DEFAULTS, ...include].filter(unique);\n    // Parse the includes into a valid set of enrichments\n    const specs = include.map(parseInclude);\n    // Extract out the low-level enrichments needed\n    const enrichments = mapBy(\"enrichment\", specs).filter(unique);\n    // fetch the enrichments\n    let enriched = {};\n    // Ignoring the else, because we currently have defaults, but want the guards\n    // so if we remove that in the future, we don't call the fn\n    /* istanbul ignore else */\n    if (enrichments.length) {\n        enriched = await fetchUserEnrichments(user, enrichments, requestOptions);\n    }\n    // map the enriched props onto the result\n    specs.forEach((spec) => {\n        result[spec.prop] = getProp(enriched, spec.path);\n    });\n    const token = requestOptions.authentication.token;\n    // Handle links\n    result.links.thumbnail = getUserThumbnailUrl(requestOptions.portal, user, token);\n    result.links.self = getUserHomeUrl(result.id, requestOptions);\n    result.links.siteRelative = `/people/${result.id}`;\n    return result;\n}\n//# sourceMappingURL=HubUsers.js.map","import { searchUsers, } from \"@esri/arcgis-rest-portal\";\nimport { enrichUserSearchResult } from \"../../users\";\nimport { serializeQueryForPortal } from \"../serializeQueryForPortal\";\nimport HubError from \"../../HubError\";\nimport { getNextFunction } from \"../utils\";\nimport { expandPredicate } from \"./expandPredicate\";\n/**\n * @private\n * Portal Search Implementation for Users\n * @param filterGroups\n * @param options\n * @returns\n */\nexport async function portalSearchUsers(query, options) {\n    // requestOptions is always required and user must be authd\n    if (!options.requestOptions) {\n        throw new HubError(\"portalSearchUsers\", \"requestOptions: IHubRequestOptions is required.\");\n    }\n    if (!options.requestOptions.authentication) {\n        throw new HubError(\"portalSearchUsers\", \"requestOptions must pass authentication.\");\n    }\n    // Expand the individual predicates in each filter\n    query.filters = query.filters.map((filter) => {\n        filter.predicates = filter.predicates.map(expandPredicate);\n        return filter;\n    });\n    // Serialize the all the groups for portal\n    const so = serializeQueryForPortal(query);\n    // Array of properties we want to copy from IHubSearchOptions to the ISearchOptions\n    const props = [\n        \"num\",\n        \"sortField\",\n        \"sortOrder\",\n        \"include\",\n        \"start\",\n        \"requestOptions\",\n    ];\n    // copy the props over\n    props.forEach((prop) => {\n        if (options.hasOwnProperty(prop)) {\n            so[prop] = options[prop];\n        }\n    });\n    // Unlike Groups and Item, the Users api *requires* authentication\n    // so we set it directly\n    so.authentication = options.requestOptions.authentication;\n    // Execute search\n    return searchPortal(so);\n}\n/**\n * Internal portal search, which then converts `IGroup`s to `IHubSearchResult`s\n * handling enrichments & includes along the way\n *\n * @param searchOptions\n * @returns\n */\nasync function searchPortal(searchOptions) {\n    // Execute portal search\n    const resp = await searchUsers(searchOptions);\n    // create mappable fn that will close\n    // over the includes and requestOptions\n    const fn = (user) => {\n        return userToSearchResult(user, searchOptions.include, searchOptions.requestOptions);\n    };\n    // map over results\n    const results = await Promise.all(resp.results.map(fn));\n    // Group Search does not support aggregations\n    // Construct the return\n    return {\n        total: resp.total,\n        results,\n        hasNext: resp.nextStart > -1,\n        next: getNextFunction(searchOptions, resp.nextStart, resp.total, searchPortal),\n    };\n}\n/**\n * Convert an Item to a IHubSearchResult\n * Fetches the includes and attaches them to the item\n * @param item\n * @param include\n * @param requestOptions\n * @returns\n */\nasync function userToSearchResult(user, include = [], requestOptions) {\n    // Delegate to HubGroups module\n    // This layer of indirection is not necessary but\n    // aligns with how the items search works and\n    // allows for future specialization\n    return enrichUserSearchResult(user, include, requestOptions);\n}\n//# sourceMappingURL=portalSearchUsers.js.map","import { __rest } from \"tslib\";\nimport HubError from \"../HubError\";\nimport { getProp } from \"../objects\";\nimport { cloneObject } from \"../util\";\nimport { getApi } from \"./_internal/commonHelpers/getApi\";\nimport { hubSearchItems, portalSearchItems, portalSearchGroups, portalSearchUsers, } from \"./_internal\";\n/**\n * Main entrypoint for searching via Hub\n *\n * Default's to search ArcGIS Portal but can delegate\n * to Hub API when it's available.\n * @param query\n * @param options\n * @returns\n */\nexport async function hubSearch(query, options) {\n    // Validate inputs\n    if (!query) {\n        throw new HubError(\"hubSearch\", \"Query is required.\");\n    }\n    if (!Array.isArray(query.filters)) {\n        throw new HubError(\"hubSearch\", \"Query must have a filters array.\");\n    }\n    if (!query.filters.length && !query.collection) {\n        throw new HubError(\"hubSearch\", \"Query must contain at least one Filter or a collection.\");\n    }\n    if (!options.requestOptions) {\n        throw new HubError(\"hubSearch\", \"requestOptions: IHubRequestOptions is required.\");\n    }\n    // Ensure includes is an array\n    if (!options.include) {\n        options.include = [];\n    }\n    // Get the type of the first filterGroup\n    const filterType = query.targetEntity;\n    // NOTE: We want to clone the `options` object to do some expansion operations,\n    // But if we clone `options.requestOptions`, the underlying `UserSession` will\n    // lose some fundamental functions like `getToken`. As a workaround, we just\n    // clone everything else on the `options` object.\n    const { requestOptions } = options, remainder = __rest(options, [\"requestOptions\"]);\n    const formattedOptions = cloneObject(remainder);\n    formattedOptions.requestOptions = requestOptions;\n    formattedOptions.api = getApi(filterType, formattedOptions);\n    const fnHash = {\n        arcgis: {\n            item: portalSearchItems,\n            group: portalSearchGroups,\n            user: portalSearchUsers,\n        },\n        \"arcgis-hub\": {\n            item: hubSearchItems,\n        },\n    };\n    const fn = getProp(fnHash, `${formattedOptions.api.type}.${filterType}`);\n    if (!fn) {\n        throw new HubError(`hubSearch`, `Search via \"${filterType}\" filter against \"${formattedOptions.api.type}\" api is not implemented. Please ensure \"targetEntity\" is defined on the query.`);\n    }\n    return fn(cloneObject(query), formattedOptions);\n}\n//# sourceMappingURL=hubSearch.js.map","import { fetchGroupEnrichments } from \"./_internal/enrichments\";\nimport { getProp } from \"../objects\";\nimport { getGroupThumbnailUrl } from \"../search\";\nimport { parseInclude } from \"../search/_internal/parseInclude\";\nimport { getGroupHomeUrl } from \"../urls\";\nimport { unique } from \"../util\";\nimport { mapBy } from \"../utils\";\n/**\n * Enrich a generic search result\n * @param group\n * @param includes\n * @param requestOptions\n * @returns\n */\nexport async function enrichGroupSearchResult(group, include, requestOptions) {\n    // Create the basic structure\n    const result = {\n        access: group.access,\n        id: group.id,\n        type: \"Group\",\n        name: group.title,\n        owner: group.owner,\n        summary: group.snippet || group.description,\n        createdDate: new Date(group.created),\n        createdDateSource: \"group.created\",\n        updatedDate: new Date(group.modified),\n        updatedDateSource: \"group.modified\",\n        family: \"team\",\n        links: {\n            self: \"not-implemented\",\n            siteRelative: \"not-implemented\",\n            thumbnail: \"not-implemented\",\n        },\n    };\n    // Informal Enrichments - basically adding type-specific props\n    // derived directly from the entity\n    result.isSharedUpdate = (group.capabilities || []).includes(\"updateitemcontrol\");\n    result.membershipAccess = group.membershipAccess;\n    result.isOpenData = !!group.isOpenData;\n    // default includes\n    const DEFAULTS = [];\n    // merge includes\n    include = [...DEFAULTS, ...include].filter(unique);\n    // Parse the includes into a valid set of enrichments\n    const specs = include.map(parseInclude);\n    // Extract out the low-level enrichments needed\n    const enrichments = mapBy(\"enrichment\", specs).filter(unique);\n    // fetch the enrichments\n    let enriched = {};\n    if (enrichments.length) {\n        enriched = await fetchGroupEnrichments(group, enrichments, requestOptions);\n    }\n    // map the enriched props onto the result\n    specs.forEach((spec) => {\n        result[spec.prop] = getProp(enriched, spec.path);\n    });\n    // Handle links\n    result.links.thumbnail = getGroupThumbnailUrl(requestOptions.portal, group);\n    result.links.self = getGroupHomeUrl(result.id, requestOptions);\n    result.links.siteRelative = `/teams/${result.id}`;\n    return result;\n}\n//# sourceMappingURL=HubGroups.js.map",":host {\n  position: absolute;\n  width: 300px;\n  background-color: white;\n  border: 1px solid #ccc;\n  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n  padding: 5px;\n}\n\nhub-autosuggest-section {\n  display: block;\n}\nhub-autosuggest-section:last-child {\n  border-bottom: none;\n}","import { IHubSearchResult, hubSearch } from '@esri/hub-common';\nimport { Component, Prop, State, Watch, h } from '@stencil/core';\n\nvar groupBy = function(xs, key) {\n  return xs.reduce(function(rv, x) {\n    (rv[x[key]] = rv[x[key]] || []).push(x);\n    return rv;\n  }, {});\n};\n\n\n@Component({\n  tag: 'hub-autosuggest',\n  styleUrl: 'hub-autosuggest.css',\n  shadow: true,\n})\nexport class HubAutosuggest {\n  @Prop() term: string;\n  @Prop() api: string = \"ogc\";\n  \n  @State() suggestions = [];\n  @State() sections = {};\n  @State() loading:boolean = true;\n\n  @Watch('term')\n  @Watch('api')\n  // Placeholder function\n  async fetchSuggestions() {\n    const queryTerm = this.term;\n    // TODO: the Search docs need to be cleaned up\n    const options = {\n      requestOptions: {} \n    } as { [key: string]: any};\n\n    console.info(`Using ${this.api} API`)\n    if (this.api === \"ogc\") {\n      options.site = \"https://opendata.dc.gov\",\n      options.requestOptions.hubApiUrl = \"https://hub.arcgis.com\";\n    } else {\n      options.requestOptions.portal = \"https://www.arcgis.com/sharing/rest\";\n    }\n    \n    const results = await hubSearch({\n      targetEntity: \"item\",\n      filters: [\n        { predicates: [{term: queryTerm}] }\n      ]\n    }, options);\n\n    this.loading = true;\n    const items:IHubSearchResult[] = results.results;\n    this.sections = groupBy(items, 'family')\n    console.debug(\"Results\", results, this.sections)\n    this.loading = false;\n  }\n\n  componentWillLoad() {\n    this.fetchSuggestions();\n  }\n\n  render() {\n    return (\n      <div>\n        {this.loading ? this.renderLoading() : null}\n        {Object.keys(this.sections).map((section) => {\n          return(\n            <hub-autosuggest-section name={section} data={this.sections[section]}></hub-autosuggest-section>\n          )\n        })}\n        {/* <hub-autosuggest-action name='Try out AI'></hub-autosuggest-action> */}\n      </div>\n    );\n  }\n  renderLoading() {\n    return <em>loading...</em>;\n  }\n}\n"],"mappings":"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"}